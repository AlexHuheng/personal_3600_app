/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HIOther_H
#define HIOther_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "H2103_Host_Invoke_types.h"

namespace H2103_Host_Invoke {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class HIOtherIf {
 public:
  virtual ~HIOtherIf() {}
  virtual  ::EXE_STATE::type SetSystemBaseData(const std::string& strJson) = 0;
  virtual  ::EXE_STATE::type ExecuteScriptAsync(const std::string& strFileNmae, const int32_t iUserData) = 0;
  virtual  ::EXE_STATE::type UpgradeSlaveProgramAsync(const  ::SLAVE_PROGRAM_T& tSlaveprogram, const int32_t iUserData) = 0;
  virtual void GetVersion(std::string& _return, const int32_t iType) = 0;
  virtual  ::EXE_STATE::type SetInstrumentNo(const std::string& strInstrumentNo) = 0;
  virtual void GetInstrumentNo(std::string& _return) = 0;
  virtual  ::EXE_STATE::type SetSystemTime(const  ::DATE_TIME_T& tDateTime) = 0;
  virtual void GetSystemTime( ::DATE_TIME_T& _return) = 0;
  virtual  ::EXE_STATE::type SetBootStrategy(const std::vector< ::BOOT_PARAM_T> & lstcBootParams, const std::vector<std::string> & lstMAC) = 0;
  virtual  ::EXE_STATE::type HeartbeatAsync(const int32_t iUserData) = 0;
  virtual  ::EXE_STATE::type ThriftMotorParaSet(const  ::THRIFT_MOTOR_PARA_T& tMotorPara) = 0;
  virtual void ThriftMotorParaGet( ::THRIFT_MOTOR_PARA_T& _return, const int32_t iMotorID) = 0;
  virtual  ::EXE_STATE::type ThriftMotorPosSet(const int32_t iMotorID, const int32_t iPos, const int32_t iStep) = 0;
  virtual void ThriftMotorPosGet(std::vector<int32_t> & _return, const int32_t iMotorID) = 0;
  virtual  ::EXE_STATE::type ThriftMotorReset(const int32_t iMotorID, const int32_t iIsFirst) = 0;
  virtual  ::EXE_STATE::type ThriftMotorMove(const int32_t iMotorID, const int32_t iStep) = 0;
  virtual  ::EXE_STATE::type ThriftMotorMoveTo(const int32_t iMotorID, const int32_t iStep) = 0;
  virtual void ThriftReadBarcode(std::string& _return, const int32_t iReaderID) = 0;
  virtual int32_t ThriftLiquidDetect(const int32_t iNeedleID) = 0;
  virtual  ::EXE_STATE::type ThriftRackMoveIn() = 0;
  virtual  ::EXE_STATE::type ThriftRackMoveOutHorizontal() = 0;
  virtual  ::EXE_STATE::type RotatingReagentBin(const int32_t iReagentPos) = 0;
  virtual  ::EXE_STATE::type EngineerDebugPosSet(const  ::ENGINEER_DEBUG_MODULE_PARA_T& tModulePara) = 0;
  virtual void EngineerDebugPosGet(std::vector< ::ENGINEER_DEBUG_MODULE_PARA_T> & _return, const int32_t iModuleIndex) = 0;
  virtual void EngineerDebugGetVirtualPosition(std::vector< ::ENGINEER_DEBUG_VIRTUAL_POSITION_T> & _return) = 0;
  virtual  ::EXE_STATE::type EngineerDebugMotorActionExecuteAsync(const  ::ENGINEER_DEBUG_MOTOR_PARA_T& tMotorPara, const int32_t iUserData) = 0;
  virtual  ::EXE_STATE::type EngineerDebugWeighingAsync(const int32_t iNeedType, const int32_t iSampleOrReagentVol, const int32_t iDiulentVol, const int32_t iCups, const int32_t iUserData) = 0;
  virtual  ::EXE_STATE::type EngineerDebugAutoCalibrationAsync(const int32_t iCalibID, const int32_t iType, const int32_t iUserData) = 0;
  virtual  ::EXE_STATE::type EngineerDebugInjectorKBSet(const  ::ENGINEER_DEBUG_INJECTOR_KB_T& tInjectorKB) = 0;
  virtual void EngineerDebugInjectorKBGet(std::vector< ::ENGINEER_DEBUG_INJECTOR_KB_T> & _return) = 0;
  virtual  ::EXE_STATE::type EngineerDebugRunAsync(const int32_t iModuleIndex, const int32_t iCmd, const int32_t iUserData) = 0;
  virtual  ::EXE_STATE::type ThriftConfigPara(const  ::THRIFT_CONFIG_T& tThriftConfig, const int32_t iUserData) = 0;
  virtual  ::EXE_STATE::type SetTimeOut(const int32_t iType, const int32_t iSeconds) = 0;
  virtual  ::EXE_STATE::type GetUploadBackupFile(const int32_t iFileType, const int32_t iRandNo) = 0;
  virtual  ::EXE_STATE::type RestoreConfigFile(const std::string& strFileName, const int32_t iFileType, const std::string& hexConfigFile, const std::string& strMD5) = 0;
  virtual  ::EXE_STATE::type EngineerAgingRunAsync(const  ::SLAVE_ASSEMBLY_AGING_PARA_T& tAssemblyAgingPara, const int32_t iUserData) = 0;
  virtual void GetChannelStatus(std::vector< ::CHANNEL_STATUS_T> & _return) = 0;
  virtual  ::EXE_STATE::type SetChannelStatus(const std::vector< ::CHANNEL_STATUS_T> & lstChannelStatus) = 0;
  virtual  ::EXE_STATE::type StartAdjustChannelAsync(const int32_t iUserData) = 0;
  virtual  ::EXE_STATE::type SetOpticalLED(const int32_t iOnOrOff, const int32_t iWave) = 0;
  virtual void GetChannelAD(std::vector< ::CHANNEL_AD_T> & _return) = 0;
  virtual void GetChannelGain( ::CHANNEL_GAIN_T& _return) = 0;
};

class HIOtherIfFactory {
 public:
  typedef HIOtherIf Handler;

  virtual ~HIOtherIfFactory() {}

  virtual HIOtherIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HIOtherIf* /* handler */) = 0;
};

class HIOtherIfSingletonFactory : virtual public HIOtherIfFactory {
 public:
  HIOtherIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<HIOtherIf>& iface) : iface_(iface) {}
  virtual ~HIOtherIfSingletonFactory() {}

  virtual HIOtherIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HIOtherIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<HIOtherIf> iface_;
};

class HIOtherNull : virtual public HIOtherIf {
 public:
  virtual ~HIOtherNull() {}
   ::EXE_STATE::type SetSystemBaseData(const std::string& /* strJson */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ExecuteScriptAsync(const std::string& /* strFileNmae */, const int32_t /* iUserData */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type UpgradeSlaveProgramAsync(const  ::SLAVE_PROGRAM_T& /* tSlaveprogram */, const int32_t /* iUserData */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
  void GetVersion(std::string& /* _return */, const int32_t /* iType */) {
    return;
  }
   ::EXE_STATE::type SetInstrumentNo(const std::string& /* strInstrumentNo */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
  void GetInstrumentNo(std::string& /* _return */) {
    return;
  }
   ::EXE_STATE::type SetSystemTime(const  ::DATE_TIME_T& /* tDateTime */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
  void GetSystemTime( ::DATE_TIME_T& /* _return */) {
    return;
  }
   ::EXE_STATE::type SetBootStrategy(const std::vector< ::BOOT_PARAM_T> & /* lstcBootParams */, const std::vector<std::string> & /* lstMAC */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type HeartbeatAsync(const int32_t /* iUserData */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ThriftMotorParaSet(const  ::THRIFT_MOTOR_PARA_T& /* tMotorPara */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
  void ThriftMotorParaGet( ::THRIFT_MOTOR_PARA_T& /* _return */, const int32_t /* iMotorID */) {
    return;
  }
   ::EXE_STATE::type ThriftMotorPosSet(const int32_t /* iMotorID */, const int32_t /* iPos */, const int32_t /* iStep */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
  void ThriftMotorPosGet(std::vector<int32_t> & /* _return */, const int32_t /* iMotorID */) {
    return;
  }
   ::EXE_STATE::type ThriftMotorReset(const int32_t /* iMotorID */, const int32_t /* iIsFirst */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ThriftMotorMove(const int32_t /* iMotorID */, const int32_t /* iStep */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ThriftMotorMoveTo(const int32_t /* iMotorID */, const int32_t /* iStep */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
  void ThriftReadBarcode(std::string& /* _return */, const int32_t /* iReaderID */) {
    return;
  }
  int32_t ThriftLiquidDetect(const int32_t /* iNeedleID */) {
    int32_t _return = 0;
    return _return;
  }
   ::EXE_STATE::type ThriftRackMoveIn() {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ThriftRackMoveOutHorizontal() {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type RotatingReagentBin(const int32_t /* iReagentPos */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type EngineerDebugPosSet(const  ::ENGINEER_DEBUG_MODULE_PARA_T& /* tModulePara */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
  void EngineerDebugPosGet(std::vector< ::ENGINEER_DEBUG_MODULE_PARA_T> & /* _return */, const int32_t /* iModuleIndex */) {
    return;
  }
  void EngineerDebugGetVirtualPosition(std::vector< ::ENGINEER_DEBUG_VIRTUAL_POSITION_T> & /* _return */) {
    return;
  }
   ::EXE_STATE::type EngineerDebugMotorActionExecuteAsync(const  ::ENGINEER_DEBUG_MOTOR_PARA_T& /* tMotorPara */, const int32_t /* iUserData */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type EngineerDebugWeighingAsync(const int32_t /* iNeedType */, const int32_t /* iSampleOrReagentVol */, const int32_t /* iDiulentVol */, const int32_t /* iCups */, const int32_t /* iUserData */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type EngineerDebugAutoCalibrationAsync(const int32_t /* iCalibID */, const int32_t /* iType */, const int32_t /* iUserData */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type EngineerDebugInjectorKBSet(const  ::ENGINEER_DEBUG_INJECTOR_KB_T& /* tInjectorKB */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
  void EngineerDebugInjectorKBGet(std::vector< ::ENGINEER_DEBUG_INJECTOR_KB_T> & /* _return */) {
    return;
  }
   ::EXE_STATE::type EngineerDebugRunAsync(const int32_t /* iModuleIndex */, const int32_t /* iCmd */, const int32_t /* iUserData */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ThriftConfigPara(const  ::THRIFT_CONFIG_T& /* tThriftConfig */, const int32_t /* iUserData */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type SetTimeOut(const int32_t /* iType */, const int32_t /* iSeconds */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type GetUploadBackupFile(const int32_t /* iFileType */, const int32_t /* iRandNo */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type RestoreConfigFile(const std::string& /* strFileName */, const int32_t /* iFileType */, const std::string& /* hexConfigFile */, const std::string& /* strMD5 */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type EngineerAgingRunAsync(const  ::SLAVE_ASSEMBLY_AGING_PARA_T& /* tAssemblyAgingPara */, const int32_t /* iUserData */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
  void GetChannelStatus(std::vector< ::CHANNEL_STATUS_T> & /* _return */) {
    return;
  }
   ::EXE_STATE::type SetChannelStatus(const std::vector< ::CHANNEL_STATUS_T> & /* lstChannelStatus */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type StartAdjustChannelAsync(const int32_t /* iUserData */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type SetOpticalLED(const int32_t /* iOnOrOff */, const int32_t /* iWave */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
  void GetChannelAD(std::vector< ::CHANNEL_AD_T> & /* _return */) {
    return;
  }
  void GetChannelGain( ::CHANNEL_GAIN_T& /* _return */) {
    return;
  }
};

typedef struct _HIOther_SetSystemBaseData_args__isset {
  _HIOther_SetSystemBaseData_args__isset() : strJson(false) {}
  bool strJson :1;
} _HIOther_SetSystemBaseData_args__isset;

class HIOther_SetSystemBaseData_args {
 public:

  HIOther_SetSystemBaseData_args(const HIOther_SetSystemBaseData_args&);
  HIOther_SetSystemBaseData_args& operator=(const HIOther_SetSystemBaseData_args&);
  HIOther_SetSystemBaseData_args() : strJson() {
  }

  virtual ~HIOther_SetSystemBaseData_args() throw();
  std::string strJson;

  _HIOther_SetSystemBaseData_args__isset __isset;

  void __set_strJson(const std::string& val);

  bool operator == (const HIOther_SetSystemBaseData_args & rhs) const
  {
    if (!(strJson == rhs.strJson))
      return false;
    return true;
  }
  bool operator != (const HIOther_SetSystemBaseData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_SetSystemBaseData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_SetSystemBaseData_pargs {
 public:


  virtual ~HIOther_SetSystemBaseData_pargs() throw();
  const std::string* strJson;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_SetSystemBaseData_result__isset {
  _HIOther_SetSystemBaseData_result__isset() : success(false) {}
  bool success :1;
} _HIOther_SetSystemBaseData_result__isset;

class HIOther_SetSystemBaseData_result {
 public:

  HIOther_SetSystemBaseData_result(const HIOther_SetSystemBaseData_result&);
  HIOther_SetSystemBaseData_result& operator=(const HIOther_SetSystemBaseData_result&);
  HIOther_SetSystemBaseData_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_SetSystemBaseData_result() throw();
   ::EXE_STATE::type success;

  _HIOther_SetSystemBaseData_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_SetSystemBaseData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_SetSystemBaseData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_SetSystemBaseData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_SetSystemBaseData_presult__isset {
  _HIOther_SetSystemBaseData_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_SetSystemBaseData_presult__isset;

class HIOther_SetSystemBaseData_presult {
 public:


  virtual ~HIOther_SetSystemBaseData_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_SetSystemBaseData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_ExecuteScriptAsync_args__isset {
  _HIOther_ExecuteScriptAsync_args__isset() : strFileNmae(false), iUserData(false) {}
  bool strFileNmae :1;
  bool iUserData :1;
} _HIOther_ExecuteScriptAsync_args__isset;

class HIOther_ExecuteScriptAsync_args {
 public:

  HIOther_ExecuteScriptAsync_args(const HIOther_ExecuteScriptAsync_args&);
  HIOther_ExecuteScriptAsync_args& operator=(const HIOther_ExecuteScriptAsync_args&);
  HIOther_ExecuteScriptAsync_args() : strFileNmae(), iUserData(0) {
  }

  virtual ~HIOther_ExecuteScriptAsync_args() throw();
  std::string strFileNmae;
  int32_t iUserData;

  _HIOther_ExecuteScriptAsync_args__isset __isset;

  void __set_strFileNmae(const std::string& val);

  void __set_iUserData(const int32_t val);

  bool operator == (const HIOther_ExecuteScriptAsync_args & rhs) const
  {
    if (!(strFileNmae == rhs.strFileNmae))
      return false;
    if (!(iUserData == rhs.iUserData))
      return false;
    return true;
  }
  bool operator != (const HIOther_ExecuteScriptAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ExecuteScriptAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_ExecuteScriptAsync_pargs {
 public:


  virtual ~HIOther_ExecuteScriptAsync_pargs() throw();
  const std::string* strFileNmae;
  const int32_t* iUserData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ExecuteScriptAsync_result__isset {
  _HIOther_ExecuteScriptAsync_result__isset() : success(false) {}
  bool success :1;
} _HIOther_ExecuteScriptAsync_result__isset;

class HIOther_ExecuteScriptAsync_result {
 public:

  HIOther_ExecuteScriptAsync_result(const HIOther_ExecuteScriptAsync_result&);
  HIOther_ExecuteScriptAsync_result& operator=(const HIOther_ExecuteScriptAsync_result&);
  HIOther_ExecuteScriptAsync_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_ExecuteScriptAsync_result() throw();
   ::EXE_STATE::type success;

  _HIOther_ExecuteScriptAsync_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_ExecuteScriptAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_ExecuteScriptAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ExecuteScriptAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ExecuteScriptAsync_presult__isset {
  _HIOther_ExecuteScriptAsync_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_ExecuteScriptAsync_presult__isset;

class HIOther_ExecuteScriptAsync_presult {
 public:


  virtual ~HIOther_ExecuteScriptAsync_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_ExecuteScriptAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_UpgradeSlaveProgramAsync_args__isset {
  _HIOther_UpgradeSlaveProgramAsync_args__isset() : tSlaveprogram(false), iUserData(false) {}
  bool tSlaveprogram :1;
  bool iUserData :1;
} _HIOther_UpgradeSlaveProgramAsync_args__isset;

class HIOther_UpgradeSlaveProgramAsync_args {
 public:

  HIOther_UpgradeSlaveProgramAsync_args(const HIOther_UpgradeSlaveProgramAsync_args&);
  HIOther_UpgradeSlaveProgramAsync_args& operator=(const HIOther_UpgradeSlaveProgramAsync_args&);
  HIOther_UpgradeSlaveProgramAsync_args() : iUserData(0) {
  }

  virtual ~HIOther_UpgradeSlaveProgramAsync_args() throw();
   ::SLAVE_PROGRAM_T tSlaveprogram;
  int32_t iUserData;

  _HIOther_UpgradeSlaveProgramAsync_args__isset __isset;

  void __set_tSlaveprogram(const  ::SLAVE_PROGRAM_T& val);

  void __set_iUserData(const int32_t val);

  bool operator == (const HIOther_UpgradeSlaveProgramAsync_args & rhs) const
  {
    if (!(tSlaveprogram == rhs.tSlaveprogram))
      return false;
    if (!(iUserData == rhs.iUserData))
      return false;
    return true;
  }
  bool operator != (const HIOther_UpgradeSlaveProgramAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_UpgradeSlaveProgramAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_UpgradeSlaveProgramAsync_pargs {
 public:


  virtual ~HIOther_UpgradeSlaveProgramAsync_pargs() throw();
  const  ::SLAVE_PROGRAM_T* tSlaveprogram;
  const int32_t* iUserData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_UpgradeSlaveProgramAsync_result__isset {
  _HIOther_UpgradeSlaveProgramAsync_result__isset() : success(false) {}
  bool success :1;
} _HIOther_UpgradeSlaveProgramAsync_result__isset;

class HIOther_UpgradeSlaveProgramAsync_result {
 public:

  HIOther_UpgradeSlaveProgramAsync_result(const HIOther_UpgradeSlaveProgramAsync_result&);
  HIOther_UpgradeSlaveProgramAsync_result& operator=(const HIOther_UpgradeSlaveProgramAsync_result&);
  HIOther_UpgradeSlaveProgramAsync_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_UpgradeSlaveProgramAsync_result() throw();
   ::EXE_STATE::type success;

  _HIOther_UpgradeSlaveProgramAsync_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_UpgradeSlaveProgramAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_UpgradeSlaveProgramAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_UpgradeSlaveProgramAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_UpgradeSlaveProgramAsync_presult__isset {
  _HIOther_UpgradeSlaveProgramAsync_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_UpgradeSlaveProgramAsync_presult__isset;

class HIOther_UpgradeSlaveProgramAsync_presult {
 public:


  virtual ~HIOther_UpgradeSlaveProgramAsync_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_UpgradeSlaveProgramAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_GetVersion_args__isset {
  _HIOther_GetVersion_args__isset() : iType(false) {}
  bool iType :1;
} _HIOther_GetVersion_args__isset;

class HIOther_GetVersion_args {
 public:

  HIOther_GetVersion_args(const HIOther_GetVersion_args&);
  HIOther_GetVersion_args& operator=(const HIOther_GetVersion_args&);
  HIOther_GetVersion_args() : iType(0) {
  }

  virtual ~HIOther_GetVersion_args() throw();
  int32_t iType;

  _HIOther_GetVersion_args__isset __isset;

  void __set_iType(const int32_t val);

  bool operator == (const HIOther_GetVersion_args & rhs) const
  {
    if (!(iType == rhs.iType))
      return false;
    return true;
  }
  bool operator != (const HIOther_GetVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_GetVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_GetVersion_pargs {
 public:


  virtual ~HIOther_GetVersion_pargs() throw();
  const int32_t* iType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_GetVersion_result__isset {
  _HIOther_GetVersion_result__isset() : success(false) {}
  bool success :1;
} _HIOther_GetVersion_result__isset;

class HIOther_GetVersion_result {
 public:

  HIOther_GetVersion_result(const HIOther_GetVersion_result&);
  HIOther_GetVersion_result& operator=(const HIOther_GetVersion_result&);
  HIOther_GetVersion_result() : success() {
  }

  virtual ~HIOther_GetVersion_result() throw();
  std::string success;

  _HIOther_GetVersion_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const HIOther_GetVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_GetVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_GetVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_GetVersion_presult__isset {
  _HIOther_GetVersion_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_GetVersion_presult__isset;

class HIOther_GetVersion_presult {
 public:


  virtual ~HIOther_GetVersion_presult() throw();
  std::string* success;

  _HIOther_GetVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_SetInstrumentNo_args__isset {
  _HIOther_SetInstrumentNo_args__isset() : strInstrumentNo(false) {}
  bool strInstrumentNo :1;
} _HIOther_SetInstrumentNo_args__isset;

class HIOther_SetInstrumentNo_args {
 public:

  HIOther_SetInstrumentNo_args(const HIOther_SetInstrumentNo_args&);
  HIOther_SetInstrumentNo_args& operator=(const HIOther_SetInstrumentNo_args&);
  HIOther_SetInstrumentNo_args() : strInstrumentNo() {
  }

  virtual ~HIOther_SetInstrumentNo_args() throw();
  std::string strInstrumentNo;

  _HIOther_SetInstrumentNo_args__isset __isset;

  void __set_strInstrumentNo(const std::string& val);

  bool operator == (const HIOther_SetInstrumentNo_args & rhs) const
  {
    if (!(strInstrumentNo == rhs.strInstrumentNo))
      return false;
    return true;
  }
  bool operator != (const HIOther_SetInstrumentNo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_SetInstrumentNo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_SetInstrumentNo_pargs {
 public:


  virtual ~HIOther_SetInstrumentNo_pargs() throw();
  const std::string* strInstrumentNo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_SetInstrumentNo_result__isset {
  _HIOther_SetInstrumentNo_result__isset() : success(false) {}
  bool success :1;
} _HIOther_SetInstrumentNo_result__isset;

class HIOther_SetInstrumentNo_result {
 public:

  HIOther_SetInstrumentNo_result(const HIOther_SetInstrumentNo_result&);
  HIOther_SetInstrumentNo_result& operator=(const HIOther_SetInstrumentNo_result&);
  HIOther_SetInstrumentNo_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_SetInstrumentNo_result() throw();
   ::EXE_STATE::type success;

  _HIOther_SetInstrumentNo_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_SetInstrumentNo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_SetInstrumentNo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_SetInstrumentNo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_SetInstrumentNo_presult__isset {
  _HIOther_SetInstrumentNo_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_SetInstrumentNo_presult__isset;

class HIOther_SetInstrumentNo_presult {
 public:


  virtual ~HIOther_SetInstrumentNo_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_SetInstrumentNo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HIOther_GetInstrumentNo_args {
 public:

  HIOther_GetInstrumentNo_args(const HIOther_GetInstrumentNo_args&);
  HIOther_GetInstrumentNo_args& operator=(const HIOther_GetInstrumentNo_args&);
  HIOther_GetInstrumentNo_args() {
  }

  virtual ~HIOther_GetInstrumentNo_args() throw();

  bool operator == (const HIOther_GetInstrumentNo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HIOther_GetInstrumentNo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_GetInstrumentNo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_GetInstrumentNo_pargs {
 public:


  virtual ~HIOther_GetInstrumentNo_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_GetInstrumentNo_result__isset {
  _HIOther_GetInstrumentNo_result__isset() : success(false) {}
  bool success :1;
} _HIOther_GetInstrumentNo_result__isset;

class HIOther_GetInstrumentNo_result {
 public:

  HIOther_GetInstrumentNo_result(const HIOther_GetInstrumentNo_result&);
  HIOther_GetInstrumentNo_result& operator=(const HIOther_GetInstrumentNo_result&);
  HIOther_GetInstrumentNo_result() : success() {
  }

  virtual ~HIOther_GetInstrumentNo_result() throw();
  std::string success;

  _HIOther_GetInstrumentNo_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const HIOther_GetInstrumentNo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_GetInstrumentNo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_GetInstrumentNo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_GetInstrumentNo_presult__isset {
  _HIOther_GetInstrumentNo_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_GetInstrumentNo_presult__isset;

class HIOther_GetInstrumentNo_presult {
 public:


  virtual ~HIOther_GetInstrumentNo_presult() throw();
  std::string* success;

  _HIOther_GetInstrumentNo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_SetSystemTime_args__isset {
  _HIOther_SetSystemTime_args__isset() : tDateTime(false) {}
  bool tDateTime :1;
} _HIOther_SetSystemTime_args__isset;

class HIOther_SetSystemTime_args {
 public:

  HIOther_SetSystemTime_args(const HIOther_SetSystemTime_args&);
  HIOther_SetSystemTime_args& operator=(const HIOther_SetSystemTime_args&);
  HIOther_SetSystemTime_args() {
  }

  virtual ~HIOther_SetSystemTime_args() throw();
   ::DATE_TIME_T tDateTime;

  _HIOther_SetSystemTime_args__isset __isset;

  void __set_tDateTime(const  ::DATE_TIME_T& val);

  bool operator == (const HIOther_SetSystemTime_args & rhs) const
  {
    if (!(tDateTime == rhs.tDateTime))
      return false;
    return true;
  }
  bool operator != (const HIOther_SetSystemTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_SetSystemTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_SetSystemTime_pargs {
 public:


  virtual ~HIOther_SetSystemTime_pargs() throw();
  const  ::DATE_TIME_T* tDateTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_SetSystemTime_result__isset {
  _HIOther_SetSystemTime_result__isset() : success(false) {}
  bool success :1;
} _HIOther_SetSystemTime_result__isset;

class HIOther_SetSystemTime_result {
 public:

  HIOther_SetSystemTime_result(const HIOther_SetSystemTime_result&);
  HIOther_SetSystemTime_result& operator=(const HIOther_SetSystemTime_result&);
  HIOther_SetSystemTime_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_SetSystemTime_result() throw();
   ::EXE_STATE::type success;

  _HIOther_SetSystemTime_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_SetSystemTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_SetSystemTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_SetSystemTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_SetSystemTime_presult__isset {
  _HIOther_SetSystemTime_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_SetSystemTime_presult__isset;

class HIOther_SetSystemTime_presult {
 public:


  virtual ~HIOther_SetSystemTime_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_SetSystemTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HIOther_GetSystemTime_args {
 public:

  HIOther_GetSystemTime_args(const HIOther_GetSystemTime_args&);
  HIOther_GetSystemTime_args& operator=(const HIOther_GetSystemTime_args&);
  HIOther_GetSystemTime_args() {
  }

  virtual ~HIOther_GetSystemTime_args() throw();

  bool operator == (const HIOther_GetSystemTime_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HIOther_GetSystemTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_GetSystemTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_GetSystemTime_pargs {
 public:


  virtual ~HIOther_GetSystemTime_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_GetSystemTime_result__isset {
  _HIOther_GetSystemTime_result__isset() : success(false) {}
  bool success :1;
} _HIOther_GetSystemTime_result__isset;

class HIOther_GetSystemTime_result {
 public:

  HIOther_GetSystemTime_result(const HIOther_GetSystemTime_result&);
  HIOther_GetSystemTime_result& operator=(const HIOther_GetSystemTime_result&);
  HIOther_GetSystemTime_result() {
  }

  virtual ~HIOther_GetSystemTime_result() throw();
   ::DATE_TIME_T success;

  _HIOther_GetSystemTime_result__isset __isset;

  void __set_success(const  ::DATE_TIME_T& val);

  bool operator == (const HIOther_GetSystemTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_GetSystemTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_GetSystemTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_GetSystemTime_presult__isset {
  _HIOther_GetSystemTime_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_GetSystemTime_presult__isset;

class HIOther_GetSystemTime_presult {
 public:


  virtual ~HIOther_GetSystemTime_presult() throw();
   ::DATE_TIME_T* success;

  _HIOther_GetSystemTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_SetBootStrategy_args__isset {
  _HIOther_SetBootStrategy_args__isset() : lstcBootParams(false), lstMAC(false) {}
  bool lstcBootParams :1;
  bool lstMAC :1;
} _HIOther_SetBootStrategy_args__isset;

class HIOther_SetBootStrategy_args {
 public:

  HIOther_SetBootStrategy_args(const HIOther_SetBootStrategy_args&);
  HIOther_SetBootStrategy_args& operator=(const HIOther_SetBootStrategy_args&);
  HIOther_SetBootStrategy_args() {
  }

  virtual ~HIOther_SetBootStrategy_args() throw();
  std::vector< ::BOOT_PARAM_T>  lstcBootParams;
  std::vector<std::string>  lstMAC;

  _HIOther_SetBootStrategy_args__isset __isset;

  void __set_lstcBootParams(const std::vector< ::BOOT_PARAM_T> & val);

  void __set_lstMAC(const std::vector<std::string> & val);

  bool operator == (const HIOther_SetBootStrategy_args & rhs) const
  {
    if (!(lstcBootParams == rhs.lstcBootParams))
      return false;
    if (!(lstMAC == rhs.lstMAC))
      return false;
    return true;
  }
  bool operator != (const HIOther_SetBootStrategy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_SetBootStrategy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_SetBootStrategy_pargs {
 public:


  virtual ~HIOther_SetBootStrategy_pargs() throw();
  const std::vector< ::BOOT_PARAM_T> * lstcBootParams;
  const std::vector<std::string> * lstMAC;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_SetBootStrategy_result__isset {
  _HIOther_SetBootStrategy_result__isset() : success(false) {}
  bool success :1;
} _HIOther_SetBootStrategy_result__isset;

class HIOther_SetBootStrategy_result {
 public:

  HIOther_SetBootStrategy_result(const HIOther_SetBootStrategy_result&);
  HIOther_SetBootStrategy_result& operator=(const HIOther_SetBootStrategy_result&);
  HIOther_SetBootStrategy_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_SetBootStrategy_result() throw();
   ::EXE_STATE::type success;

  _HIOther_SetBootStrategy_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_SetBootStrategy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_SetBootStrategy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_SetBootStrategy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_SetBootStrategy_presult__isset {
  _HIOther_SetBootStrategy_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_SetBootStrategy_presult__isset;

class HIOther_SetBootStrategy_presult {
 public:


  virtual ~HIOther_SetBootStrategy_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_SetBootStrategy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_HeartbeatAsync_args__isset {
  _HIOther_HeartbeatAsync_args__isset() : iUserData(false) {}
  bool iUserData :1;
} _HIOther_HeartbeatAsync_args__isset;

class HIOther_HeartbeatAsync_args {
 public:

  HIOther_HeartbeatAsync_args(const HIOther_HeartbeatAsync_args&);
  HIOther_HeartbeatAsync_args& operator=(const HIOther_HeartbeatAsync_args&);
  HIOther_HeartbeatAsync_args() : iUserData(0) {
  }

  virtual ~HIOther_HeartbeatAsync_args() throw();
  int32_t iUserData;

  _HIOther_HeartbeatAsync_args__isset __isset;

  void __set_iUserData(const int32_t val);

  bool operator == (const HIOther_HeartbeatAsync_args & rhs) const
  {
    if (!(iUserData == rhs.iUserData))
      return false;
    return true;
  }
  bool operator != (const HIOther_HeartbeatAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_HeartbeatAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_HeartbeatAsync_pargs {
 public:


  virtual ~HIOther_HeartbeatAsync_pargs() throw();
  const int32_t* iUserData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_HeartbeatAsync_result__isset {
  _HIOther_HeartbeatAsync_result__isset() : success(false) {}
  bool success :1;
} _HIOther_HeartbeatAsync_result__isset;

class HIOther_HeartbeatAsync_result {
 public:

  HIOther_HeartbeatAsync_result(const HIOther_HeartbeatAsync_result&);
  HIOther_HeartbeatAsync_result& operator=(const HIOther_HeartbeatAsync_result&);
  HIOther_HeartbeatAsync_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_HeartbeatAsync_result() throw();
   ::EXE_STATE::type success;

  _HIOther_HeartbeatAsync_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_HeartbeatAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_HeartbeatAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_HeartbeatAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_HeartbeatAsync_presult__isset {
  _HIOther_HeartbeatAsync_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_HeartbeatAsync_presult__isset;

class HIOther_HeartbeatAsync_presult {
 public:


  virtual ~HIOther_HeartbeatAsync_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_HeartbeatAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_ThriftMotorParaSet_args__isset {
  _HIOther_ThriftMotorParaSet_args__isset() : tMotorPara(false) {}
  bool tMotorPara :1;
} _HIOther_ThriftMotorParaSet_args__isset;

class HIOther_ThriftMotorParaSet_args {
 public:

  HIOther_ThriftMotorParaSet_args(const HIOther_ThriftMotorParaSet_args&);
  HIOther_ThriftMotorParaSet_args& operator=(const HIOther_ThriftMotorParaSet_args&);
  HIOther_ThriftMotorParaSet_args() {
  }

  virtual ~HIOther_ThriftMotorParaSet_args() throw();
   ::THRIFT_MOTOR_PARA_T tMotorPara;

  _HIOther_ThriftMotorParaSet_args__isset __isset;

  void __set_tMotorPara(const  ::THRIFT_MOTOR_PARA_T& val);

  bool operator == (const HIOther_ThriftMotorParaSet_args & rhs) const
  {
    if (!(tMotorPara == rhs.tMotorPara))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftMotorParaSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftMotorParaSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_ThriftMotorParaSet_pargs {
 public:


  virtual ~HIOther_ThriftMotorParaSet_pargs() throw();
  const  ::THRIFT_MOTOR_PARA_T* tMotorPara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftMotorParaSet_result__isset {
  _HIOther_ThriftMotorParaSet_result__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftMotorParaSet_result__isset;

class HIOther_ThriftMotorParaSet_result {
 public:

  HIOther_ThriftMotorParaSet_result(const HIOther_ThriftMotorParaSet_result&);
  HIOther_ThriftMotorParaSet_result& operator=(const HIOther_ThriftMotorParaSet_result&);
  HIOther_ThriftMotorParaSet_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_ThriftMotorParaSet_result() throw();
   ::EXE_STATE::type success;

  _HIOther_ThriftMotorParaSet_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_ThriftMotorParaSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftMotorParaSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftMotorParaSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftMotorParaSet_presult__isset {
  _HIOther_ThriftMotorParaSet_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftMotorParaSet_presult__isset;

class HIOther_ThriftMotorParaSet_presult {
 public:


  virtual ~HIOther_ThriftMotorParaSet_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_ThriftMotorParaSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_ThriftMotorParaGet_args__isset {
  _HIOther_ThriftMotorParaGet_args__isset() : iMotorID(false) {}
  bool iMotorID :1;
} _HIOther_ThriftMotorParaGet_args__isset;

class HIOther_ThriftMotorParaGet_args {
 public:

  HIOther_ThriftMotorParaGet_args(const HIOther_ThriftMotorParaGet_args&);
  HIOther_ThriftMotorParaGet_args& operator=(const HIOther_ThriftMotorParaGet_args&);
  HIOther_ThriftMotorParaGet_args() : iMotorID(0) {
  }

  virtual ~HIOther_ThriftMotorParaGet_args() throw();
  int32_t iMotorID;

  _HIOther_ThriftMotorParaGet_args__isset __isset;

  void __set_iMotorID(const int32_t val);

  bool operator == (const HIOther_ThriftMotorParaGet_args & rhs) const
  {
    if (!(iMotorID == rhs.iMotorID))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftMotorParaGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftMotorParaGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_ThriftMotorParaGet_pargs {
 public:


  virtual ~HIOther_ThriftMotorParaGet_pargs() throw();
  const int32_t* iMotorID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftMotorParaGet_result__isset {
  _HIOther_ThriftMotorParaGet_result__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftMotorParaGet_result__isset;

class HIOther_ThriftMotorParaGet_result {
 public:

  HIOther_ThriftMotorParaGet_result(const HIOther_ThriftMotorParaGet_result&);
  HIOther_ThriftMotorParaGet_result& operator=(const HIOther_ThriftMotorParaGet_result&);
  HIOther_ThriftMotorParaGet_result() {
  }

  virtual ~HIOther_ThriftMotorParaGet_result() throw();
   ::THRIFT_MOTOR_PARA_T success;

  _HIOther_ThriftMotorParaGet_result__isset __isset;

  void __set_success(const  ::THRIFT_MOTOR_PARA_T& val);

  bool operator == (const HIOther_ThriftMotorParaGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftMotorParaGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftMotorParaGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftMotorParaGet_presult__isset {
  _HIOther_ThriftMotorParaGet_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftMotorParaGet_presult__isset;

class HIOther_ThriftMotorParaGet_presult {
 public:


  virtual ~HIOther_ThriftMotorParaGet_presult() throw();
   ::THRIFT_MOTOR_PARA_T* success;

  _HIOther_ThriftMotorParaGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_ThriftMotorPosSet_args__isset {
  _HIOther_ThriftMotorPosSet_args__isset() : iMotorID(false), iPos(false), iStep(false) {}
  bool iMotorID :1;
  bool iPos :1;
  bool iStep :1;
} _HIOther_ThriftMotorPosSet_args__isset;

class HIOther_ThriftMotorPosSet_args {
 public:

  HIOther_ThriftMotorPosSet_args(const HIOther_ThriftMotorPosSet_args&);
  HIOther_ThriftMotorPosSet_args& operator=(const HIOther_ThriftMotorPosSet_args&);
  HIOther_ThriftMotorPosSet_args() : iMotorID(0), iPos(0), iStep(0) {
  }

  virtual ~HIOther_ThriftMotorPosSet_args() throw();
  int32_t iMotorID;
  int32_t iPos;
  int32_t iStep;

  _HIOther_ThriftMotorPosSet_args__isset __isset;

  void __set_iMotorID(const int32_t val);

  void __set_iPos(const int32_t val);

  void __set_iStep(const int32_t val);

  bool operator == (const HIOther_ThriftMotorPosSet_args & rhs) const
  {
    if (!(iMotorID == rhs.iMotorID))
      return false;
    if (!(iPos == rhs.iPos))
      return false;
    if (!(iStep == rhs.iStep))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftMotorPosSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftMotorPosSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_ThriftMotorPosSet_pargs {
 public:


  virtual ~HIOther_ThriftMotorPosSet_pargs() throw();
  const int32_t* iMotorID;
  const int32_t* iPos;
  const int32_t* iStep;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftMotorPosSet_result__isset {
  _HIOther_ThriftMotorPosSet_result__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftMotorPosSet_result__isset;

class HIOther_ThriftMotorPosSet_result {
 public:

  HIOther_ThriftMotorPosSet_result(const HIOther_ThriftMotorPosSet_result&);
  HIOther_ThriftMotorPosSet_result& operator=(const HIOther_ThriftMotorPosSet_result&);
  HIOther_ThriftMotorPosSet_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_ThriftMotorPosSet_result() throw();
   ::EXE_STATE::type success;

  _HIOther_ThriftMotorPosSet_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_ThriftMotorPosSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftMotorPosSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftMotorPosSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftMotorPosSet_presult__isset {
  _HIOther_ThriftMotorPosSet_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftMotorPosSet_presult__isset;

class HIOther_ThriftMotorPosSet_presult {
 public:


  virtual ~HIOther_ThriftMotorPosSet_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_ThriftMotorPosSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_ThriftMotorPosGet_args__isset {
  _HIOther_ThriftMotorPosGet_args__isset() : iMotorID(false) {}
  bool iMotorID :1;
} _HIOther_ThriftMotorPosGet_args__isset;

class HIOther_ThriftMotorPosGet_args {
 public:

  HIOther_ThriftMotorPosGet_args(const HIOther_ThriftMotorPosGet_args&);
  HIOther_ThriftMotorPosGet_args& operator=(const HIOther_ThriftMotorPosGet_args&);
  HIOther_ThriftMotorPosGet_args() : iMotorID(0) {
  }

  virtual ~HIOther_ThriftMotorPosGet_args() throw();
  int32_t iMotorID;

  _HIOther_ThriftMotorPosGet_args__isset __isset;

  void __set_iMotorID(const int32_t val);

  bool operator == (const HIOther_ThriftMotorPosGet_args & rhs) const
  {
    if (!(iMotorID == rhs.iMotorID))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftMotorPosGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftMotorPosGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_ThriftMotorPosGet_pargs {
 public:


  virtual ~HIOther_ThriftMotorPosGet_pargs() throw();
  const int32_t* iMotorID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftMotorPosGet_result__isset {
  _HIOther_ThriftMotorPosGet_result__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftMotorPosGet_result__isset;

class HIOther_ThriftMotorPosGet_result {
 public:

  HIOther_ThriftMotorPosGet_result(const HIOther_ThriftMotorPosGet_result&);
  HIOther_ThriftMotorPosGet_result& operator=(const HIOther_ThriftMotorPosGet_result&);
  HIOther_ThriftMotorPosGet_result() {
  }

  virtual ~HIOther_ThriftMotorPosGet_result() throw();
  std::vector<int32_t>  success;

  _HIOther_ThriftMotorPosGet_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const HIOther_ThriftMotorPosGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftMotorPosGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftMotorPosGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftMotorPosGet_presult__isset {
  _HIOther_ThriftMotorPosGet_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftMotorPosGet_presult__isset;

class HIOther_ThriftMotorPosGet_presult {
 public:


  virtual ~HIOther_ThriftMotorPosGet_presult() throw();
  std::vector<int32_t> * success;

  _HIOther_ThriftMotorPosGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_ThriftMotorReset_args__isset {
  _HIOther_ThriftMotorReset_args__isset() : iMotorID(false), iIsFirst(false) {}
  bool iMotorID :1;
  bool iIsFirst :1;
} _HIOther_ThriftMotorReset_args__isset;

class HIOther_ThriftMotorReset_args {
 public:

  HIOther_ThriftMotorReset_args(const HIOther_ThriftMotorReset_args&);
  HIOther_ThriftMotorReset_args& operator=(const HIOther_ThriftMotorReset_args&);
  HIOther_ThriftMotorReset_args() : iMotorID(0), iIsFirst(0) {
  }

  virtual ~HIOther_ThriftMotorReset_args() throw();
  int32_t iMotorID;
  int32_t iIsFirst;

  _HIOther_ThriftMotorReset_args__isset __isset;

  void __set_iMotorID(const int32_t val);

  void __set_iIsFirst(const int32_t val);

  bool operator == (const HIOther_ThriftMotorReset_args & rhs) const
  {
    if (!(iMotorID == rhs.iMotorID))
      return false;
    if (!(iIsFirst == rhs.iIsFirst))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftMotorReset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftMotorReset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_ThriftMotorReset_pargs {
 public:


  virtual ~HIOther_ThriftMotorReset_pargs() throw();
  const int32_t* iMotorID;
  const int32_t* iIsFirst;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftMotorReset_result__isset {
  _HIOther_ThriftMotorReset_result__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftMotorReset_result__isset;

class HIOther_ThriftMotorReset_result {
 public:

  HIOther_ThriftMotorReset_result(const HIOther_ThriftMotorReset_result&);
  HIOther_ThriftMotorReset_result& operator=(const HIOther_ThriftMotorReset_result&);
  HIOther_ThriftMotorReset_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_ThriftMotorReset_result() throw();
   ::EXE_STATE::type success;

  _HIOther_ThriftMotorReset_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_ThriftMotorReset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftMotorReset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftMotorReset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftMotorReset_presult__isset {
  _HIOther_ThriftMotorReset_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftMotorReset_presult__isset;

class HIOther_ThriftMotorReset_presult {
 public:


  virtual ~HIOther_ThriftMotorReset_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_ThriftMotorReset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_ThriftMotorMove_args__isset {
  _HIOther_ThriftMotorMove_args__isset() : iMotorID(false), iStep(false) {}
  bool iMotorID :1;
  bool iStep :1;
} _HIOther_ThriftMotorMove_args__isset;

class HIOther_ThriftMotorMove_args {
 public:

  HIOther_ThriftMotorMove_args(const HIOther_ThriftMotorMove_args&);
  HIOther_ThriftMotorMove_args& operator=(const HIOther_ThriftMotorMove_args&);
  HIOther_ThriftMotorMove_args() : iMotorID(0), iStep(0) {
  }

  virtual ~HIOther_ThriftMotorMove_args() throw();
  int32_t iMotorID;
  int32_t iStep;

  _HIOther_ThriftMotorMove_args__isset __isset;

  void __set_iMotorID(const int32_t val);

  void __set_iStep(const int32_t val);

  bool operator == (const HIOther_ThriftMotorMove_args & rhs) const
  {
    if (!(iMotorID == rhs.iMotorID))
      return false;
    if (!(iStep == rhs.iStep))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftMotorMove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftMotorMove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_ThriftMotorMove_pargs {
 public:


  virtual ~HIOther_ThriftMotorMove_pargs() throw();
  const int32_t* iMotorID;
  const int32_t* iStep;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftMotorMove_result__isset {
  _HIOther_ThriftMotorMove_result__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftMotorMove_result__isset;

class HIOther_ThriftMotorMove_result {
 public:

  HIOther_ThriftMotorMove_result(const HIOther_ThriftMotorMove_result&);
  HIOther_ThriftMotorMove_result& operator=(const HIOther_ThriftMotorMove_result&);
  HIOther_ThriftMotorMove_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_ThriftMotorMove_result() throw();
   ::EXE_STATE::type success;

  _HIOther_ThriftMotorMove_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_ThriftMotorMove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftMotorMove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftMotorMove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftMotorMove_presult__isset {
  _HIOther_ThriftMotorMove_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftMotorMove_presult__isset;

class HIOther_ThriftMotorMove_presult {
 public:


  virtual ~HIOther_ThriftMotorMove_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_ThriftMotorMove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_ThriftMotorMoveTo_args__isset {
  _HIOther_ThriftMotorMoveTo_args__isset() : iMotorID(false), iStep(false) {}
  bool iMotorID :1;
  bool iStep :1;
} _HIOther_ThriftMotorMoveTo_args__isset;

class HIOther_ThriftMotorMoveTo_args {
 public:

  HIOther_ThriftMotorMoveTo_args(const HIOther_ThriftMotorMoveTo_args&);
  HIOther_ThriftMotorMoveTo_args& operator=(const HIOther_ThriftMotorMoveTo_args&);
  HIOther_ThriftMotorMoveTo_args() : iMotorID(0), iStep(0) {
  }

  virtual ~HIOther_ThriftMotorMoveTo_args() throw();
  int32_t iMotorID;
  int32_t iStep;

  _HIOther_ThriftMotorMoveTo_args__isset __isset;

  void __set_iMotorID(const int32_t val);

  void __set_iStep(const int32_t val);

  bool operator == (const HIOther_ThriftMotorMoveTo_args & rhs) const
  {
    if (!(iMotorID == rhs.iMotorID))
      return false;
    if (!(iStep == rhs.iStep))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftMotorMoveTo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftMotorMoveTo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_ThriftMotorMoveTo_pargs {
 public:


  virtual ~HIOther_ThriftMotorMoveTo_pargs() throw();
  const int32_t* iMotorID;
  const int32_t* iStep;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftMotorMoveTo_result__isset {
  _HIOther_ThriftMotorMoveTo_result__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftMotorMoveTo_result__isset;

class HIOther_ThriftMotorMoveTo_result {
 public:

  HIOther_ThriftMotorMoveTo_result(const HIOther_ThriftMotorMoveTo_result&);
  HIOther_ThriftMotorMoveTo_result& operator=(const HIOther_ThriftMotorMoveTo_result&);
  HIOther_ThriftMotorMoveTo_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_ThriftMotorMoveTo_result() throw();
   ::EXE_STATE::type success;

  _HIOther_ThriftMotorMoveTo_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_ThriftMotorMoveTo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftMotorMoveTo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftMotorMoveTo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftMotorMoveTo_presult__isset {
  _HIOther_ThriftMotorMoveTo_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftMotorMoveTo_presult__isset;

class HIOther_ThriftMotorMoveTo_presult {
 public:


  virtual ~HIOther_ThriftMotorMoveTo_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_ThriftMotorMoveTo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_ThriftReadBarcode_args__isset {
  _HIOther_ThriftReadBarcode_args__isset() : iReaderID(false) {}
  bool iReaderID :1;
} _HIOther_ThriftReadBarcode_args__isset;

class HIOther_ThriftReadBarcode_args {
 public:

  HIOther_ThriftReadBarcode_args(const HIOther_ThriftReadBarcode_args&);
  HIOther_ThriftReadBarcode_args& operator=(const HIOther_ThriftReadBarcode_args&);
  HIOther_ThriftReadBarcode_args() : iReaderID(0) {
  }

  virtual ~HIOther_ThriftReadBarcode_args() throw();
  int32_t iReaderID;

  _HIOther_ThriftReadBarcode_args__isset __isset;

  void __set_iReaderID(const int32_t val);

  bool operator == (const HIOther_ThriftReadBarcode_args & rhs) const
  {
    if (!(iReaderID == rhs.iReaderID))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftReadBarcode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftReadBarcode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_ThriftReadBarcode_pargs {
 public:


  virtual ~HIOther_ThriftReadBarcode_pargs() throw();
  const int32_t* iReaderID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftReadBarcode_result__isset {
  _HIOther_ThriftReadBarcode_result__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftReadBarcode_result__isset;

class HIOther_ThriftReadBarcode_result {
 public:

  HIOther_ThriftReadBarcode_result(const HIOther_ThriftReadBarcode_result&);
  HIOther_ThriftReadBarcode_result& operator=(const HIOther_ThriftReadBarcode_result&);
  HIOther_ThriftReadBarcode_result() : success() {
  }

  virtual ~HIOther_ThriftReadBarcode_result() throw();
  std::string success;

  _HIOther_ThriftReadBarcode_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const HIOther_ThriftReadBarcode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftReadBarcode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftReadBarcode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftReadBarcode_presult__isset {
  _HIOther_ThriftReadBarcode_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftReadBarcode_presult__isset;

class HIOther_ThriftReadBarcode_presult {
 public:


  virtual ~HIOther_ThriftReadBarcode_presult() throw();
  std::string* success;

  _HIOther_ThriftReadBarcode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_ThriftLiquidDetect_args__isset {
  _HIOther_ThriftLiquidDetect_args__isset() : iNeedleID(false) {}
  bool iNeedleID :1;
} _HIOther_ThriftLiquidDetect_args__isset;

class HIOther_ThriftLiquidDetect_args {
 public:

  HIOther_ThriftLiquidDetect_args(const HIOther_ThriftLiquidDetect_args&);
  HIOther_ThriftLiquidDetect_args& operator=(const HIOther_ThriftLiquidDetect_args&);
  HIOther_ThriftLiquidDetect_args() : iNeedleID(0) {
  }

  virtual ~HIOther_ThriftLiquidDetect_args() throw();
  int32_t iNeedleID;

  _HIOther_ThriftLiquidDetect_args__isset __isset;

  void __set_iNeedleID(const int32_t val);

  bool operator == (const HIOther_ThriftLiquidDetect_args & rhs) const
  {
    if (!(iNeedleID == rhs.iNeedleID))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftLiquidDetect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftLiquidDetect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_ThriftLiquidDetect_pargs {
 public:


  virtual ~HIOther_ThriftLiquidDetect_pargs() throw();
  const int32_t* iNeedleID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftLiquidDetect_result__isset {
  _HIOther_ThriftLiquidDetect_result__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftLiquidDetect_result__isset;

class HIOther_ThriftLiquidDetect_result {
 public:

  HIOther_ThriftLiquidDetect_result(const HIOther_ThriftLiquidDetect_result&);
  HIOther_ThriftLiquidDetect_result& operator=(const HIOther_ThriftLiquidDetect_result&);
  HIOther_ThriftLiquidDetect_result() : success(0) {
  }

  virtual ~HIOther_ThriftLiquidDetect_result() throw();
  int32_t success;

  _HIOther_ThriftLiquidDetect_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const HIOther_ThriftLiquidDetect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftLiquidDetect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftLiquidDetect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftLiquidDetect_presult__isset {
  _HIOther_ThriftLiquidDetect_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftLiquidDetect_presult__isset;

class HIOther_ThriftLiquidDetect_presult {
 public:


  virtual ~HIOther_ThriftLiquidDetect_presult() throw();
  int32_t* success;

  _HIOther_ThriftLiquidDetect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HIOther_ThriftRackMoveIn_args {
 public:

  HIOther_ThriftRackMoveIn_args(const HIOther_ThriftRackMoveIn_args&);
  HIOther_ThriftRackMoveIn_args& operator=(const HIOther_ThriftRackMoveIn_args&);
  HIOther_ThriftRackMoveIn_args() {
  }

  virtual ~HIOther_ThriftRackMoveIn_args() throw();

  bool operator == (const HIOther_ThriftRackMoveIn_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HIOther_ThriftRackMoveIn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftRackMoveIn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_ThriftRackMoveIn_pargs {
 public:


  virtual ~HIOther_ThriftRackMoveIn_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftRackMoveIn_result__isset {
  _HIOther_ThriftRackMoveIn_result__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftRackMoveIn_result__isset;

class HIOther_ThriftRackMoveIn_result {
 public:

  HIOther_ThriftRackMoveIn_result(const HIOther_ThriftRackMoveIn_result&);
  HIOther_ThriftRackMoveIn_result& operator=(const HIOther_ThriftRackMoveIn_result&);
  HIOther_ThriftRackMoveIn_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_ThriftRackMoveIn_result() throw();
   ::EXE_STATE::type success;

  _HIOther_ThriftRackMoveIn_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_ThriftRackMoveIn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftRackMoveIn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftRackMoveIn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftRackMoveIn_presult__isset {
  _HIOther_ThriftRackMoveIn_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftRackMoveIn_presult__isset;

class HIOther_ThriftRackMoveIn_presult {
 public:


  virtual ~HIOther_ThriftRackMoveIn_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_ThriftRackMoveIn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HIOther_ThriftRackMoveOutHorizontal_args {
 public:

  HIOther_ThriftRackMoveOutHorizontal_args(const HIOther_ThriftRackMoveOutHorizontal_args&);
  HIOther_ThriftRackMoveOutHorizontal_args& operator=(const HIOther_ThriftRackMoveOutHorizontal_args&);
  HIOther_ThriftRackMoveOutHorizontal_args() {
  }

  virtual ~HIOther_ThriftRackMoveOutHorizontal_args() throw();

  bool operator == (const HIOther_ThriftRackMoveOutHorizontal_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HIOther_ThriftRackMoveOutHorizontal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftRackMoveOutHorizontal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_ThriftRackMoveOutHorizontal_pargs {
 public:


  virtual ~HIOther_ThriftRackMoveOutHorizontal_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftRackMoveOutHorizontal_result__isset {
  _HIOther_ThriftRackMoveOutHorizontal_result__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftRackMoveOutHorizontal_result__isset;

class HIOther_ThriftRackMoveOutHorizontal_result {
 public:

  HIOther_ThriftRackMoveOutHorizontal_result(const HIOther_ThriftRackMoveOutHorizontal_result&);
  HIOther_ThriftRackMoveOutHorizontal_result& operator=(const HIOther_ThriftRackMoveOutHorizontal_result&);
  HIOther_ThriftRackMoveOutHorizontal_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_ThriftRackMoveOutHorizontal_result() throw();
   ::EXE_STATE::type success;

  _HIOther_ThriftRackMoveOutHorizontal_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_ThriftRackMoveOutHorizontal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftRackMoveOutHorizontal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftRackMoveOutHorizontal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftRackMoveOutHorizontal_presult__isset {
  _HIOther_ThriftRackMoveOutHorizontal_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftRackMoveOutHorizontal_presult__isset;

class HIOther_ThriftRackMoveOutHorizontal_presult {
 public:


  virtual ~HIOther_ThriftRackMoveOutHorizontal_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_ThriftRackMoveOutHorizontal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_RotatingReagentBin_args__isset {
  _HIOther_RotatingReagentBin_args__isset() : iReagentPos(false) {}
  bool iReagentPos :1;
} _HIOther_RotatingReagentBin_args__isset;

class HIOther_RotatingReagentBin_args {
 public:

  HIOther_RotatingReagentBin_args(const HIOther_RotatingReagentBin_args&);
  HIOther_RotatingReagentBin_args& operator=(const HIOther_RotatingReagentBin_args&);
  HIOther_RotatingReagentBin_args() : iReagentPos(0) {
  }

  virtual ~HIOther_RotatingReagentBin_args() throw();
  int32_t iReagentPos;

  _HIOther_RotatingReagentBin_args__isset __isset;

  void __set_iReagentPos(const int32_t val);

  bool operator == (const HIOther_RotatingReagentBin_args & rhs) const
  {
    if (!(iReagentPos == rhs.iReagentPos))
      return false;
    return true;
  }
  bool operator != (const HIOther_RotatingReagentBin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_RotatingReagentBin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_RotatingReagentBin_pargs {
 public:


  virtual ~HIOther_RotatingReagentBin_pargs() throw();
  const int32_t* iReagentPos;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_RotatingReagentBin_result__isset {
  _HIOther_RotatingReagentBin_result__isset() : success(false) {}
  bool success :1;
} _HIOther_RotatingReagentBin_result__isset;

class HIOther_RotatingReagentBin_result {
 public:

  HIOther_RotatingReagentBin_result(const HIOther_RotatingReagentBin_result&);
  HIOther_RotatingReagentBin_result& operator=(const HIOther_RotatingReagentBin_result&);
  HIOther_RotatingReagentBin_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_RotatingReagentBin_result() throw();
   ::EXE_STATE::type success;

  _HIOther_RotatingReagentBin_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_RotatingReagentBin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_RotatingReagentBin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_RotatingReagentBin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_RotatingReagentBin_presult__isset {
  _HIOther_RotatingReagentBin_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_RotatingReagentBin_presult__isset;

class HIOther_RotatingReagentBin_presult {
 public:


  virtual ~HIOther_RotatingReagentBin_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_RotatingReagentBin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_EngineerDebugPosSet_args__isset {
  _HIOther_EngineerDebugPosSet_args__isset() : tModulePara(false) {}
  bool tModulePara :1;
} _HIOther_EngineerDebugPosSet_args__isset;

class HIOther_EngineerDebugPosSet_args {
 public:

  HIOther_EngineerDebugPosSet_args(const HIOther_EngineerDebugPosSet_args&);
  HIOther_EngineerDebugPosSet_args& operator=(const HIOther_EngineerDebugPosSet_args&);
  HIOther_EngineerDebugPosSet_args() {
  }

  virtual ~HIOther_EngineerDebugPosSet_args() throw();
   ::ENGINEER_DEBUG_MODULE_PARA_T tModulePara;

  _HIOther_EngineerDebugPosSet_args__isset __isset;

  void __set_tModulePara(const  ::ENGINEER_DEBUG_MODULE_PARA_T& val);

  bool operator == (const HIOther_EngineerDebugPosSet_args & rhs) const
  {
    if (!(tModulePara == rhs.tModulePara))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugPosSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugPosSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_EngineerDebugPosSet_pargs {
 public:


  virtual ~HIOther_EngineerDebugPosSet_pargs() throw();
  const  ::ENGINEER_DEBUG_MODULE_PARA_T* tModulePara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugPosSet_result__isset {
  _HIOther_EngineerDebugPosSet_result__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugPosSet_result__isset;

class HIOther_EngineerDebugPosSet_result {
 public:

  HIOther_EngineerDebugPosSet_result(const HIOther_EngineerDebugPosSet_result&);
  HIOther_EngineerDebugPosSet_result& operator=(const HIOther_EngineerDebugPosSet_result&);
  HIOther_EngineerDebugPosSet_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_EngineerDebugPosSet_result() throw();
   ::EXE_STATE::type success;

  _HIOther_EngineerDebugPosSet_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_EngineerDebugPosSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugPosSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugPosSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugPosSet_presult__isset {
  _HIOther_EngineerDebugPosSet_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugPosSet_presult__isset;

class HIOther_EngineerDebugPosSet_presult {
 public:


  virtual ~HIOther_EngineerDebugPosSet_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_EngineerDebugPosSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_EngineerDebugPosGet_args__isset {
  _HIOther_EngineerDebugPosGet_args__isset() : iModuleIndex(false) {}
  bool iModuleIndex :1;
} _HIOther_EngineerDebugPosGet_args__isset;

class HIOther_EngineerDebugPosGet_args {
 public:

  HIOther_EngineerDebugPosGet_args(const HIOther_EngineerDebugPosGet_args&);
  HIOther_EngineerDebugPosGet_args& operator=(const HIOther_EngineerDebugPosGet_args&);
  HIOther_EngineerDebugPosGet_args() : iModuleIndex(0) {
  }

  virtual ~HIOther_EngineerDebugPosGet_args() throw();
  int32_t iModuleIndex;

  _HIOther_EngineerDebugPosGet_args__isset __isset;

  void __set_iModuleIndex(const int32_t val);

  bool operator == (const HIOther_EngineerDebugPosGet_args & rhs) const
  {
    if (!(iModuleIndex == rhs.iModuleIndex))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugPosGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugPosGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_EngineerDebugPosGet_pargs {
 public:


  virtual ~HIOther_EngineerDebugPosGet_pargs() throw();
  const int32_t* iModuleIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugPosGet_result__isset {
  _HIOther_EngineerDebugPosGet_result__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugPosGet_result__isset;

class HIOther_EngineerDebugPosGet_result {
 public:

  HIOther_EngineerDebugPosGet_result(const HIOther_EngineerDebugPosGet_result&);
  HIOther_EngineerDebugPosGet_result& operator=(const HIOther_EngineerDebugPosGet_result&);
  HIOther_EngineerDebugPosGet_result() {
  }

  virtual ~HIOther_EngineerDebugPosGet_result() throw();
  std::vector< ::ENGINEER_DEBUG_MODULE_PARA_T>  success;

  _HIOther_EngineerDebugPosGet_result__isset __isset;

  void __set_success(const std::vector< ::ENGINEER_DEBUG_MODULE_PARA_T> & val);

  bool operator == (const HIOther_EngineerDebugPosGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugPosGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugPosGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugPosGet_presult__isset {
  _HIOther_EngineerDebugPosGet_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugPosGet_presult__isset;

class HIOther_EngineerDebugPosGet_presult {
 public:


  virtual ~HIOther_EngineerDebugPosGet_presult() throw();
  std::vector< ::ENGINEER_DEBUG_MODULE_PARA_T> * success;

  _HIOther_EngineerDebugPosGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HIOther_EngineerDebugGetVirtualPosition_args {
 public:

  HIOther_EngineerDebugGetVirtualPosition_args(const HIOther_EngineerDebugGetVirtualPosition_args&);
  HIOther_EngineerDebugGetVirtualPosition_args& operator=(const HIOther_EngineerDebugGetVirtualPosition_args&);
  HIOther_EngineerDebugGetVirtualPosition_args() {
  }

  virtual ~HIOther_EngineerDebugGetVirtualPosition_args() throw();

  bool operator == (const HIOther_EngineerDebugGetVirtualPosition_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HIOther_EngineerDebugGetVirtualPosition_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugGetVirtualPosition_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_EngineerDebugGetVirtualPosition_pargs {
 public:


  virtual ~HIOther_EngineerDebugGetVirtualPosition_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugGetVirtualPosition_result__isset {
  _HIOther_EngineerDebugGetVirtualPosition_result__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugGetVirtualPosition_result__isset;

class HIOther_EngineerDebugGetVirtualPosition_result {
 public:

  HIOther_EngineerDebugGetVirtualPosition_result(const HIOther_EngineerDebugGetVirtualPosition_result&);
  HIOther_EngineerDebugGetVirtualPosition_result& operator=(const HIOther_EngineerDebugGetVirtualPosition_result&);
  HIOther_EngineerDebugGetVirtualPosition_result() {
  }

  virtual ~HIOther_EngineerDebugGetVirtualPosition_result() throw();
  std::vector< ::ENGINEER_DEBUG_VIRTUAL_POSITION_T>  success;

  _HIOther_EngineerDebugGetVirtualPosition_result__isset __isset;

  void __set_success(const std::vector< ::ENGINEER_DEBUG_VIRTUAL_POSITION_T> & val);

  bool operator == (const HIOther_EngineerDebugGetVirtualPosition_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugGetVirtualPosition_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugGetVirtualPosition_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugGetVirtualPosition_presult__isset {
  _HIOther_EngineerDebugGetVirtualPosition_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugGetVirtualPosition_presult__isset;

class HIOther_EngineerDebugGetVirtualPosition_presult {
 public:


  virtual ~HIOther_EngineerDebugGetVirtualPosition_presult() throw();
  std::vector< ::ENGINEER_DEBUG_VIRTUAL_POSITION_T> * success;

  _HIOther_EngineerDebugGetVirtualPosition_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_EngineerDebugMotorActionExecuteAsync_args__isset {
  _HIOther_EngineerDebugMotorActionExecuteAsync_args__isset() : tMotorPara(false), iUserData(false) {}
  bool tMotorPara :1;
  bool iUserData :1;
} _HIOther_EngineerDebugMotorActionExecuteAsync_args__isset;

class HIOther_EngineerDebugMotorActionExecuteAsync_args {
 public:

  HIOther_EngineerDebugMotorActionExecuteAsync_args(const HIOther_EngineerDebugMotorActionExecuteAsync_args&);
  HIOther_EngineerDebugMotorActionExecuteAsync_args& operator=(const HIOther_EngineerDebugMotorActionExecuteAsync_args&);
  HIOther_EngineerDebugMotorActionExecuteAsync_args() : iUserData(0) {
  }

  virtual ~HIOther_EngineerDebugMotorActionExecuteAsync_args() throw();
   ::ENGINEER_DEBUG_MOTOR_PARA_T tMotorPara;
  int32_t iUserData;

  _HIOther_EngineerDebugMotorActionExecuteAsync_args__isset __isset;

  void __set_tMotorPara(const  ::ENGINEER_DEBUG_MOTOR_PARA_T& val);

  void __set_iUserData(const int32_t val);

  bool operator == (const HIOther_EngineerDebugMotorActionExecuteAsync_args & rhs) const
  {
    if (!(tMotorPara == rhs.tMotorPara))
      return false;
    if (!(iUserData == rhs.iUserData))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugMotorActionExecuteAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugMotorActionExecuteAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_EngineerDebugMotorActionExecuteAsync_pargs {
 public:


  virtual ~HIOther_EngineerDebugMotorActionExecuteAsync_pargs() throw();
  const  ::ENGINEER_DEBUG_MOTOR_PARA_T* tMotorPara;
  const int32_t* iUserData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugMotorActionExecuteAsync_result__isset {
  _HIOther_EngineerDebugMotorActionExecuteAsync_result__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugMotorActionExecuteAsync_result__isset;

class HIOther_EngineerDebugMotorActionExecuteAsync_result {
 public:

  HIOther_EngineerDebugMotorActionExecuteAsync_result(const HIOther_EngineerDebugMotorActionExecuteAsync_result&);
  HIOther_EngineerDebugMotorActionExecuteAsync_result& operator=(const HIOther_EngineerDebugMotorActionExecuteAsync_result&);
  HIOther_EngineerDebugMotorActionExecuteAsync_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_EngineerDebugMotorActionExecuteAsync_result() throw();
   ::EXE_STATE::type success;

  _HIOther_EngineerDebugMotorActionExecuteAsync_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_EngineerDebugMotorActionExecuteAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugMotorActionExecuteAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugMotorActionExecuteAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugMotorActionExecuteAsync_presult__isset {
  _HIOther_EngineerDebugMotorActionExecuteAsync_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugMotorActionExecuteAsync_presult__isset;

class HIOther_EngineerDebugMotorActionExecuteAsync_presult {
 public:


  virtual ~HIOther_EngineerDebugMotorActionExecuteAsync_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_EngineerDebugMotorActionExecuteAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_EngineerDebugWeighingAsync_args__isset {
  _HIOther_EngineerDebugWeighingAsync_args__isset() : iNeedType(false), iSampleOrReagentVol(false), iDiulentVol(false), iCups(false), iUserData(false) {}
  bool iNeedType :1;
  bool iSampleOrReagentVol :1;
  bool iDiulentVol :1;
  bool iCups :1;
  bool iUserData :1;
} _HIOther_EngineerDebugWeighingAsync_args__isset;

class HIOther_EngineerDebugWeighingAsync_args {
 public:

  HIOther_EngineerDebugWeighingAsync_args(const HIOther_EngineerDebugWeighingAsync_args&);
  HIOther_EngineerDebugWeighingAsync_args& operator=(const HIOther_EngineerDebugWeighingAsync_args&);
  HIOther_EngineerDebugWeighingAsync_args() : iNeedType(0), iSampleOrReagentVol(0), iDiulentVol(0), iCups(0), iUserData(0) {
  }

  virtual ~HIOther_EngineerDebugWeighingAsync_args() throw();
  int32_t iNeedType;
  int32_t iSampleOrReagentVol;
  int32_t iDiulentVol;
  int32_t iCups;
  int32_t iUserData;

  _HIOther_EngineerDebugWeighingAsync_args__isset __isset;

  void __set_iNeedType(const int32_t val);

  void __set_iSampleOrReagentVol(const int32_t val);

  void __set_iDiulentVol(const int32_t val);

  void __set_iCups(const int32_t val);

  void __set_iUserData(const int32_t val);

  bool operator == (const HIOther_EngineerDebugWeighingAsync_args & rhs) const
  {
    if (!(iNeedType == rhs.iNeedType))
      return false;
    if (!(iSampleOrReagentVol == rhs.iSampleOrReagentVol))
      return false;
    if (!(iDiulentVol == rhs.iDiulentVol))
      return false;
    if (!(iCups == rhs.iCups))
      return false;
    if (!(iUserData == rhs.iUserData))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugWeighingAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugWeighingAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_EngineerDebugWeighingAsync_pargs {
 public:


  virtual ~HIOther_EngineerDebugWeighingAsync_pargs() throw();
  const int32_t* iNeedType;
  const int32_t* iSampleOrReagentVol;
  const int32_t* iDiulentVol;
  const int32_t* iCups;
  const int32_t* iUserData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugWeighingAsync_result__isset {
  _HIOther_EngineerDebugWeighingAsync_result__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugWeighingAsync_result__isset;

class HIOther_EngineerDebugWeighingAsync_result {
 public:

  HIOther_EngineerDebugWeighingAsync_result(const HIOther_EngineerDebugWeighingAsync_result&);
  HIOther_EngineerDebugWeighingAsync_result& operator=(const HIOther_EngineerDebugWeighingAsync_result&);
  HIOther_EngineerDebugWeighingAsync_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_EngineerDebugWeighingAsync_result() throw();
   ::EXE_STATE::type success;

  _HIOther_EngineerDebugWeighingAsync_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_EngineerDebugWeighingAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugWeighingAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugWeighingAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugWeighingAsync_presult__isset {
  _HIOther_EngineerDebugWeighingAsync_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugWeighingAsync_presult__isset;

class HIOther_EngineerDebugWeighingAsync_presult {
 public:


  virtual ~HIOther_EngineerDebugWeighingAsync_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_EngineerDebugWeighingAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_EngineerDebugAutoCalibrationAsync_args__isset {
  _HIOther_EngineerDebugAutoCalibrationAsync_args__isset() : iCalibID(false), iType(false), iUserData(false) {}
  bool iCalibID :1;
  bool iType :1;
  bool iUserData :1;
} _HIOther_EngineerDebugAutoCalibrationAsync_args__isset;

class HIOther_EngineerDebugAutoCalibrationAsync_args {
 public:

  HIOther_EngineerDebugAutoCalibrationAsync_args(const HIOther_EngineerDebugAutoCalibrationAsync_args&);
  HIOther_EngineerDebugAutoCalibrationAsync_args& operator=(const HIOther_EngineerDebugAutoCalibrationAsync_args&);
  HIOther_EngineerDebugAutoCalibrationAsync_args() : iCalibID(0), iType(0), iUserData(0) {
  }

  virtual ~HIOther_EngineerDebugAutoCalibrationAsync_args() throw();
  int32_t iCalibID;
  int32_t iType;
  int32_t iUserData;

  _HIOther_EngineerDebugAutoCalibrationAsync_args__isset __isset;

  void __set_iCalibID(const int32_t val);

  void __set_iType(const int32_t val);

  void __set_iUserData(const int32_t val);

  bool operator == (const HIOther_EngineerDebugAutoCalibrationAsync_args & rhs) const
  {
    if (!(iCalibID == rhs.iCalibID))
      return false;
    if (!(iType == rhs.iType))
      return false;
    if (!(iUserData == rhs.iUserData))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugAutoCalibrationAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugAutoCalibrationAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_EngineerDebugAutoCalibrationAsync_pargs {
 public:


  virtual ~HIOther_EngineerDebugAutoCalibrationAsync_pargs() throw();
  const int32_t* iCalibID;
  const int32_t* iType;
  const int32_t* iUserData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugAutoCalibrationAsync_result__isset {
  _HIOther_EngineerDebugAutoCalibrationAsync_result__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugAutoCalibrationAsync_result__isset;

class HIOther_EngineerDebugAutoCalibrationAsync_result {
 public:

  HIOther_EngineerDebugAutoCalibrationAsync_result(const HIOther_EngineerDebugAutoCalibrationAsync_result&);
  HIOther_EngineerDebugAutoCalibrationAsync_result& operator=(const HIOther_EngineerDebugAutoCalibrationAsync_result&);
  HIOther_EngineerDebugAutoCalibrationAsync_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_EngineerDebugAutoCalibrationAsync_result() throw();
   ::EXE_STATE::type success;

  _HIOther_EngineerDebugAutoCalibrationAsync_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_EngineerDebugAutoCalibrationAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugAutoCalibrationAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugAutoCalibrationAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugAutoCalibrationAsync_presult__isset {
  _HIOther_EngineerDebugAutoCalibrationAsync_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugAutoCalibrationAsync_presult__isset;

class HIOther_EngineerDebugAutoCalibrationAsync_presult {
 public:


  virtual ~HIOther_EngineerDebugAutoCalibrationAsync_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_EngineerDebugAutoCalibrationAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_EngineerDebugInjectorKBSet_args__isset {
  _HIOther_EngineerDebugInjectorKBSet_args__isset() : tInjectorKB(false) {}
  bool tInjectorKB :1;
} _HIOther_EngineerDebugInjectorKBSet_args__isset;

class HIOther_EngineerDebugInjectorKBSet_args {
 public:

  HIOther_EngineerDebugInjectorKBSet_args(const HIOther_EngineerDebugInjectorKBSet_args&);
  HIOther_EngineerDebugInjectorKBSet_args& operator=(const HIOther_EngineerDebugInjectorKBSet_args&);
  HIOther_EngineerDebugInjectorKBSet_args() {
  }

  virtual ~HIOther_EngineerDebugInjectorKBSet_args() throw();
   ::ENGINEER_DEBUG_INJECTOR_KB_T tInjectorKB;

  _HIOther_EngineerDebugInjectorKBSet_args__isset __isset;

  void __set_tInjectorKB(const  ::ENGINEER_DEBUG_INJECTOR_KB_T& val);

  bool operator == (const HIOther_EngineerDebugInjectorKBSet_args & rhs) const
  {
    if (!(tInjectorKB == rhs.tInjectorKB))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugInjectorKBSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugInjectorKBSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_EngineerDebugInjectorKBSet_pargs {
 public:


  virtual ~HIOther_EngineerDebugInjectorKBSet_pargs() throw();
  const  ::ENGINEER_DEBUG_INJECTOR_KB_T* tInjectorKB;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugInjectorKBSet_result__isset {
  _HIOther_EngineerDebugInjectorKBSet_result__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugInjectorKBSet_result__isset;

class HIOther_EngineerDebugInjectorKBSet_result {
 public:

  HIOther_EngineerDebugInjectorKBSet_result(const HIOther_EngineerDebugInjectorKBSet_result&);
  HIOther_EngineerDebugInjectorKBSet_result& operator=(const HIOther_EngineerDebugInjectorKBSet_result&);
  HIOther_EngineerDebugInjectorKBSet_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_EngineerDebugInjectorKBSet_result() throw();
   ::EXE_STATE::type success;

  _HIOther_EngineerDebugInjectorKBSet_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_EngineerDebugInjectorKBSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugInjectorKBSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugInjectorKBSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugInjectorKBSet_presult__isset {
  _HIOther_EngineerDebugInjectorKBSet_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugInjectorKBSet_presult__isset;

class HIOther_EngineerDebugInjectorKBSet_presult {
 public:


  virtual ~HIOther_EngineerDebugInjectorKBSet_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_EngineerDebugInjectorKBSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HIOther_EngineerDebugInjectorKBGet_args {
 public:

  HIOther_EngineerDebugInjectorKBGet_args(const HIOther_EngineerDebugInjectorKBGet_args&);
  HIOther_EngineerDebugInjectorKBGet_args& operator=(const HIOther_EngineerDebugInjectorKBGet_args&);
  HIOther_EngineerDebugInjectorKBGet_args() {
  }

  virtual ~HIOther_EngineerDebugInjectorKBGet_args() throw();

  bool operator == (const HIOther_EngineerDebugInjectorKBGet_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HIOther_EngineerDebugInjectorKBGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugInjectorKBGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_EngineerDebugInjectorKBGet_pargs {
 public:


  virtual ~HIOther_EngineerDebugInjectorKBGet_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugInjectorKBGet_result__isset {
  _HIOther_EngineerDebugInjectorKBGet_result__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugInjectorKBGet_result__isset;

class HIOther_EngineerDebugInjectorKBGet_result {
 public:

  HIOther_EngineerDebugInjectorKBGet_result(const HIOther_EngineerDebugInjectorKBGet_result&);
  HIOther_EngineerDebugInjectorKBGet_result& operator=(const HIOther_EngineerDebugInjectorKBGet_result&);
  HIOther_EngineerDebugInjectorKBGet_result() {
  }

  virtual ~HIOther_EngineerDebugInjectorKBGet_result() throw();
  std::vector< ::ENGINEER_DEBUG_INJECTOR_KB_T>  success;

  _HIOther_EngineerDebugInjectorKBGet_result__isset __isset;

  void __set_success(const std::vector< ::ENGINEER_DEBUG_INJECTOR_KB_T> & val);

  bool operator == (const HIOther_EngineerDebugInjectorKBGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugInjectorKBGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugInjectorKBGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugInjectorKBGet_presult__isset {
  _HIOther_EngineerDebugInjectorKBGet_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugInjectorKBGet_presult__isset;

class HIOther_EngineerDebugInjectorKBGet_presult {
 public:


  virtual ~HIOther_EngineerDebugInjectorKBGet_presult() throw();
  std::vector< ::ENGINEER_DEBUG_INJECTOR_KB_T> * success;

  _HIOther_EngineerDebugInjectorKBGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_EngineerDebugRunAsync_args__isset {
  _HIOther_EngineerDebugRunAsync_args__isset() : iModuleIndex(false), iCmd(false), iUserData(false) {}
  bool iModuleIndex :1;
  bool iCmd :1;
  bool iUserData :1;
} _HIOther_EngineerDebugRunAsync_args__isset;

class HIOther_EngineerDebugRunAsync_args {
 public:

  HIOther_EngineerDebugRunAsync_args(const HIOther_EngineerDebugRunAsync_args&);
  HIOther_EngineerDebugRunAsync_args& operator=(const HIOther_EngineerDebugRunAsync_args&);
  HIOther_EngineerDebugRunAsync_args() : iModuleIndex(0), iCmd(0), iUserData(0) {
  }

  virtual ~HIOther_EngineerDebugRunAsync_args() throw();
  int32_t iModuleIndex;
  int32_t iCmd;
  int32_t iUserData;

  _HIOther_EngineerDebugRunAsync_args__isset __isset;

  void __set_iModuleIndex(const int32_t val);

  void __set_iCmd(const int32_t val);

  void __set_iUserData(const int32_t val);

  bool operator == (const HIOther_EngineerDebugRunAsync_args & rhs) const
  {
    if (!(iModuleIndex == rhs.iModuleIndex))
      return false;
    if (!(iCmd == rhs.iCmd))
      return false;
    if (!(iUserData == rhs.iUserData))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugRunAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugRunAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_EngineerDebugRunAsync_pargs {
 public:


  virtual ~HIOther_EngineerDebugRunAsync_pargs() throw();
  const int32_t* iModuleIndex;
  const int32_t* iCmd;
  const int32_t* iUserData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugRunAsync_result__isset {
  _HIOther_EngineerDebugRunAsync_result__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugRunAsync_result__isset;

class HIOther_EngineerDebugRunAsync_result {
 public:

  HIOther_EngineerDebugRunAsync_result(const HIOther_EngineerDebugRunAsync_result&);
  HIOther_EngineerDebugRunAsync_result& operator=(const HIOther_EngineerDebugRunAsync_result&);
  HIOther_EngineerDebugRunAsync_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_EngineerDebugRunAsync_result() throw();
   ::EXE_STATE::type success;

  _HIOther_EngineerDebugRunAsync_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_EngineerDebugRunAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerDebugRunAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerDebugRunAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerDebugRunAsync_presult__isset {
  _HIOther_EngineerDebugRunAsync_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerDebugRunAsync_presult__isset;

class HIOther_EngineerDebugRunAsync_presult {
 public:


  virtual ~HIOther_EngineerDebugRunAsync_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_EngineerDebugRunAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_ThriftConfigPara_args__isset {
  _HIOther_ThriftConfigPara_args__isset() : tThriftConfig(false), iUserData(false) {}
  bool tThriftConfig :1;
  bool iUserData :1;
} _HIOther_ThriftConfigPara_args__isset;

class HIOther_ThriftConfigPara_args {
 public:

  HIOther_ThriftConfigPara_args(const HIOther_ThriftConfigPara_args&);
  HIOther_ThriftConfigPara_args& operator=(const HIOther_ThriftConfigPara_args&);
  HIOther_ThriftConfigPara_args() : iUserData(0) {
  }

  virtual ~HIOther_ThriftConfigPara_args() throw();
   ::THRIFT_CONFIG_T tThriftConfig;
  int32_t iUserData;

  _HIOther_ThriftConfigPara_args__isset __isset;

  void __set_tThriftConfig(const  ::THRIFT_CONFIG_T& val);

  void __set_iUserData(const int32_t val);

  bool operator == (const HIOther_ThriftConfigPara_args & rhs) const
  {
    if (!(tThriftConfig == rhs.tThriftConfig))
      return false;
    if (!(iUserData == rhs.iUserData))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftConfigPara_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftConfigPara_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_ThriftConfigPara_pargs {
 public:


  virtual ~HIOther_ThriftConfigPara_pargs() throw();
  const  ::THRIFT_CONFIG_T* tThriftConfig;
  const int32_t* iUserData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftConfigPara_result__isset {
  _HIOther_ThriftConfigPara_result__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftConfigPara_result__isset;

class HIOther_ThriftConfigPara_result {
 public:

  HIOther_ThriftConfigPara_result(const HIOther_ThriftConfigPara_result&);
  HIOther_ThriftConfigPara_result& operator=(const HIOther_ThriftConfigPara_result&);
  HIOther_ThriftConfigPara_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_ThriftConfigPara_result() throw();
   ::EXE_STATE::type success;

  _HIOther_ThriftConfigPara_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_ThriftConfigPara_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_ThriftConfigPara_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_ThriftConfigPara_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_ThriftConfigPara_presult__isset {
  _HIOther_ThriftConfigPara_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_ThriftConfigPara_presult__isset;

class HIOther_ThriftConfigPara_presult {
 public:


  virtual ~HIOther_ThriftConfigPara_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_ThriftConfigPara_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_SetTimeOut_args__isset {
  _HIOther_SetTimeOut_args__isset() : iType(false), iSeconds(false) {}
  bool iType :1;
  bool iSeconds :1;
} _HIOther_SetTimeOut_args__isset;

class HIOther_SetTimeOut_args {
 public:

  HIOther_SetTimeOut_args(const HIOther_SetTimeOut_args&);
  HIOther_SetTimeOut_args& operator=(const HIOther_SetTimeOut_args&);
  HIOther_SetTimeOut_args() : iType(0), iSeconds(0) {
  }

  virtual ~HIOther_SetTimeOut_args() throw();
  int32_t iType;
  int32_t iSeconds;

  _HIOther_SetTimeOut_args__isset __isset;

  void __set_iType(const int32_t val);

  void __set_iSeconds(const int32_t val);

  bool operator == (const HIOther_SetTimeOut_args & rhs) const
  {
    if (!(iType == rhs.iType))
      return false;
    if (!(iSeconds == rhs.iSeconds))
      return false;
    return true;
  }
  bool operator != (const HIOther_SetTimeOut_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_SetTimeOut_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_SetTimeOut_pargs {
 public:


  virtual ~HIOther_SetTimeOut_pargs() throw();
  const int32_t* iType;
  const int32_t* iSeconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_SetTimeOut_result__isset {
  _HIOther_SetTimeOut_result__isset() : success(false) {}
  bool success :1;
} _HIOther_SetTimeOut_result__isset;

class HIOther_SetTimeOut_result {
 public:

  HIOther_SetTimeOut_result(const HIOther_SetTimeOut_result&);
  HIOther_SetTimeOut_result& operator=(const HIOther_SetTimeOut_result&);
  HIOther_SetTimeOut_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_SetTimeOut_result() throw();
   ::EXE_STATE::type success;

  _HIOther_SetTimeOut_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_SetTimeOut_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_SetTimeOut_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_SetTimeOut_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_SetTimeOut_presult__isset {
  _HIOther_SetTimeOut_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_SetTimeOut_presult__isset;

class HIOther_SetTimeOut_presult {
 public:


  virtual ~HIOther_SetTimeOut_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_SetTimeOut_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_GetUploadBackupFile_args__isset {
  _HIOther_GetUploadBackupFile_args__isset() : iFileType(false), iRandNo(false) {}
  bool iFileType :1;
  bool iRandNo :1;
} _HIOther_GetUploadBackupFile_args__isset;

class HIOther_GetUploadBackupFile_args {
 public:

  HIOther_GetUploadBackupFile_args(const HIOther_GetUploadBackupFile_args&);
  HIOther_GetUploadBackupFile_args& operator=(const HIOther_GetUploadBackupFile_args&);
  HIOther_GetUploadBackupFile_args() : iFileType(0), iRandNo(0) {
  }

  virtual ~HIOther_GetUploadBackupFile_args() throw();
  int32_t iFileType;
  int32_t iRandNo;

  _HIOther_GetUploadBackupFile_args__isset __isset;

  void __set_iFileType(const int32_t val);

  void __set_iRandNo(const int32_t val);

  bool operator == (const HIOther_GetUploadBackupFile_args & rhs) const
  {
    if (!(iFileType == rhs.iFileType))
      return false;
    if (!(iRandNo == rhs.iRandNo))
      return false;
    return true;
  }
  bool operator != (const HIOther_GetUploadBackupFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_GetUploadBackupFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_GetUploadBackupFile_pargs {
 public:


  virtual ~HIOther_GetUploadBackupFile_pargs() throw();
  const int32_t* iFileType;
  const int32_t* iRandNo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_GetUploadBackupFile_result__isset {
  _HIOther_GetUploadBackupFile_result__isset() : success(false) {}
  bool success :1;
} _HIOther_GetUploadBackupFile_result__isset;

class HIOther_GetUploadBackupFile_result {
 public:

  HIOther_GetUploadBackupFile_result(const HIOther_GetUploadBackupFile_result&);
  HIOther_GetUploadBackupFile_result& operator=(const HIOther_GetUploadBackupFile_result&);
  HIOther_GetUploadBackupFile_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_GetUploadBackupFile_result() throw();
   ::EXE_STATE::type success;

  _HIOther_GetUploadBackupFile_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_GetUploadBackupFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_GetUploadBackupFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_GetUploadBackupFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_GetUploadBackupFile_presult__isset {
  _HIOther_GetUploadBackupFile_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_GetUploadBackupFile_presult__isset;

class HIOther_GetUploadBackupFile_presult {
 public:


  virtual ~HIOther_GetUploadBackupFile_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_GetUploadBackupFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_RestoreConfigFile_args__isset {
  _HIOther_RestoreConfigFile_args__isset() : strFileName(false), iFileType(false), hexConfigFile(false), strMD5(false) {}
  bool strFileName :1;
  bool iFileType :1;
  bool hexConfigFile :1;
  bool strMD5 :1;
} _HIOther_RestoreConfigFile_args__isset;

class HIOther_RestoreConfigFile_args {
 public:

  HIOther_RestoreConfigFile_args(const HIOther_RestoreConfigFile_args&);
  HIOther_RestoreConfigFile_args& operator=(const HIOther_RestoreConfigFile_args&);
  HIOther_RestoreConfigFile_args() : strFileName(), iFileType(0), hexConfigFile(), strMD5() {
  }

  virtual ~HIOther_RestoreConfigFile_args() throw();
  std::string strFileName;
  int32_t iFileType;
  std::string hexConfigFile;
  std::string strMD5;

  _HIOther_RestoreConfigFile_args__isset __isset;

  void __set_strFileName(const std::string& val);

  void __set_iFileType(const int32_t val);

  void __set_hexConfigFile(const std::string& val);

  void __set_strMD5(const std::string& val);

  bool operator == (const HIOther_RestoreConfigFile_args & rhs) const
  {
    if (!(strFileName == rhs.strFileName))
      return false;
    if (!(iFileType == rhs.iFileType))
      return false;
    if (!(hexConfigFile == rhs.hexConfigFile))
      return false;
    if (!(strMD5 == rhs.strMD5))
      return false;
    return true;
  }
  bool operator != (const HIOther_RestoreConfigFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_RestoreConfigFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_RestoreConfigFile_pargs {
 public:


  virtual ~HIOther_RestoreConfigFile_pargs() throw();
  const std::string* strFileName;
  const int32_t* iFileType;
  const std::string* hexConfigFile;
  const std::string* strMD5;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_RestoreConfigFile_result__isset {
  _HIOther_RestoreConfigFile_result__isset() : success(false) {}
  bool success :1;
} _HIOther_RestoreConfigFile_result__isset;

class HIOther_RestoreConfigFile_result {
 public:

  HIOther_RestoreConfigFile_result(const HIOther_RestoreConfigFile_result&);
  HIOther_RestoreConfigFile_result& operator=(const HIOther_RestoreConfigFile_result&);
  HIOther_RestoreConfigFile_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_RestoreConfigFile_result() throw();
   ::EXE_STATE::type success;

  _HIOther_RestoreConfigFile_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_RestoreConfigFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_RestoreConfigFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_RestoreConfigFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_RestoreConfigFile_presult__isset {
  _HIOther_RestoreConfigFile_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_RestoreConfigFile_presult__isset;

class HIOther_RestoreConfigFile_presult {
 public:


  virtual ~HIOther_RestoreConfigFile_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_RestoreConfigFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_EngineerAgingRunAsync_args__isset {
  _HIOther_EngineerAgingRunAsync_args__isset() : tAssemblyAgingPara(false), iUserData(false) {}
  bool tAssemblyAgingPara :1;
  bool iUserData :1;
} _HIOther_EngineerAgingRunAsync_args__isset;

class HIOther_EngineerAgingRunAsync_args {
 public:

  HIOther_EngineerAgingRunAsync_args(const HIOther_EngineerAgingRunAsync_args&);
  HIOther_EngineerAgingRunAsync_args& operator=(const HIOther_EngineerAgingRunAsync_args&);
  HIOther_EngineerAgingRunAsync_args() : iUserData(0) {
  }

  virtual ~HIOther_EngineerAgingRunAsync_args() throw();
   ::SLAVE_ASSEMBLY_AGING_PARA_T tAssemblyAgingPara;
  int32_t iUserData;

  _HIOther_EngineerAgingRunAsync_args__isset __isset;

  void __set_tAssemblyAgingPara(const  ::SLAVE_ASSEMBLY_AGING_PARA_T& val);

  void __set_iUserData(const int32_t val);

  bool operator == (const HIOther_EngineerAgingRunAsync_args & rhs) const
  {
    if (!(tAssemblyAgingPara == rhs.tAssemblyAgingPara))
      return false;
    if (!(iUserData == rhs.iUserData))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerAgingRunAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerAgingRunAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_EngineerAgingRunAsync_pargs {
 public:


  virtual ~HIOther_EngineerAgingRunAsync_pargs() throw();
  const  ::SLAVE_ASSEMBLY_AGING_PARA_T* tAssemblyAgingPara;
  const int32_t* iUserData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerAgingRunAsync_result__isset {
  _HIOther_EngineerAgingRunAsync_result__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerAgingRunAsync_result__isset;

class HIOther_EngineerAgingRunAsync_result {
 public:

  HIOther_EngineerAgingRunAsync_result(const HIOther_EngineerAgingRunAsync_result&);
  HIOther_EngineerAgingRunAsync_result& operator=(const HIOther_EngineerAgingRunAsync_result&);
  HIOther_EngineerAgingRunAsync_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_EngineerAgingRunAsync_result() throw();
   ::EXE_STATE::type success;

  _HIOther_EngineerAgingRunAsync_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_EngineerAgingRunAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_EngineerAgingRunAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_EngineerAgingRunAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_EngineerAgingRunAsync_presult__isset {
  _HIOther_EngineerAgingRunAsync_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_EngineerAgingRunAsync_presult__isset;

class HIOther_EngineerAgingRunAsync_presult {
 public:


  virtual ~HIOther_EngineerAgingRunAsync_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_EngineerAgingRunAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HIOther_GetChannelStatus_args {
 public:

  HIOther_GetChannelStatus_args(const HIOther_GetChannelStatus_args&);
  HIOther_GetChannelStatus_args& operator=(const HIOther_GetChannelStatus_args&);
  HIOther_GetChannelStatus_args() {
  }

  virtual ~HIOther_GetChannelStatus_args() throw();

  bool operator == (const HIOther_GetChannelStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HIOther_GetChannelStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_GetChannelStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_GetChannelStatus_pargs {
 public:


  virtual ~HIOther_GetChannelStatus_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_GetChannelStatus_result__isset {
  _HIOther_GetChannelStatus_result__isset() : success(false) {}
  bool success :1;
} _HIOther_GetChannelStatus_result__isset;

class HIOther_GetChannelStatus_result {
 public:

  HIOther_GetChannelStatus_result(const HIOther_GetChannelStatus_result&);
  HIOther_GetChannelStatus_result& operator=(const HIOther_GetChannelStatus_result&);
  HIOther_GetChannelStatus_result() {
  }

  virtual ~HIOther_GetChannelStatus_result() throw();
  std::vector< ::CHANNEL_STATUS_T>  success;

  _HIOther_GetChannelStatus_result__isset __isset;

  void __set_success(const std::vector< ::CHANNEL_STATUS_T> & val);

  bool operator == (const HIOther_GetChannelStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_GetChannelStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_GetChannelStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_GetChannelStatus_presult__isset {
  _HIOther_GetChannelStatus_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_GetChannelStatus_presult__isset;

class HIOther_GetChannelStatus_presult {
 public:


  virtual ~HIOther_GetChannelStatus_presult() throw();
  std::vector< ::CHANNEL_STATUS_T> * success;

  _HIOther_GetChannelStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_SetChannelStatus_args__isset {
  _HIOther_SetChannelStatus_args__isset() : lstChannelStatus(false) {}
  bool lstChannelStatus :1;
} _HIOther_SetChannelStatus_args__isset;

class HIOther_SetChannelStatus_args {
 public:

  HIOther_SetChannelStatus_args(const HIOther_SetChannelStatus_args&);
  HIOther_SetChannelStatus_args& operator=(const HIOther_SetChannelStatus_args&);
  HIOther_SetChannelStatus_args() {
  }

  virtual ~HIOther_SetChannelStatus_args() throw();
  std::vector< ::CHANNEL_STATUS_T>  lstChannelStatus;

  _HIOther_SetChannelStatus_args__isset __isset;

  void __set_lstChannelStatus(const std::vector< ::CHANNEL_STATUS_T> & val);

  bool operator == (const HIOther_SetChannelStatus_args & rhs) const
  {
    if (!(lstChannelStatus == rhs.lstChannelStatus))
      return false;
    return true;
  }
  bool operator != (const HIOther_SetChannelStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_SetChannelStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_SetChannelStatus_pargs {
 public:


  virtual ~HIOther_SetChannelStatus_pargs() throw();
  const std::vector< ::CHANNEL_STATUS_T> * lstChannelStatus;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_SetChannelStatus_result__isset {
  _HIOther_SetChannelStatus_result__isset() : success(false) {}
  bool success :1;
} _HIOther_SetChannelStatus_result__isset;

class HIOther_SetChannelStatus_result {
 public:

  HIOther_SetChannelStatus_result(const HIOther_SetChannelStatus_result&);
  HIOther_SetChannelStatus_result& operator=(const HIOther_SetChannelStatus_result&);
  HIOther_SetChannelStatus_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_SetChannelStatus_result() throw();
   ::EXE_STATE::type success;

  _HIOther_SetChannelStatus_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_SetChannelStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_SetChannelStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_SetChannelStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_SetChannelStatus_presult__isset {
  _HIOther_SetChannelStatus_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_SetChannelStatus_presult__isset;

class HIOther_SetChannelStatus_presult {
 public:


  virtual ~HIOther_SetChannelStatus_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_SetChannelStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_StartAdjustChannelAsync_args__isset {
  _HIOther_StartAdjustChannelAsync_args__isset() : iUserData(false) {}
  bool iUserData :1;
} _HIOther_StartAdjustChannelAsync_args__isset;

class HIOther_StartAdjustChannelAsync_args {
 public:

  HIOther_StartAdjustChannelAsync_args(const HIOther_StartAdjustChannelAsync_args&);
  HIOther_StartAdjustChannelAsync_args& operator=(const HIOther_StartAdjustChannelAsync_args&);
  HIOther_StartAdjustChannelAsync_args() : iUserData(0) {
  }

  virtual ~HIOther_StartAdjustChannelAsync_args() throw();
  int32_t iUserData;

  _HIOther_StartAdjustChannelAsync_args__isset __isset;

  void __set_iUserData(const int32_t val);

  bool operator == (const HIOther_StartAdjustChannelAsync_args & rhs) const
  {
    if (!(iUserData == rhs.iUserData))
      return false;
    return true;
  }
  bool operator != (const HIOther_StartAdjustChannelAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_StartAdjustChannelAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_StartAdjustChannelAsync_pargs {
 public:


  virtual ~HIOther_StartAdjustChannelAsync_pargs() throw();
  const int32_t* iUserData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_StartAdjustChannelAsync_result__isset {
  _HIOther_StartAdjustChannelAsync_result__isset() : success(false) {}
  bool success :1;
} _HIOther_StartAdjustChannelAsync_result__isset;

class HIOther_StartAdjustChannelAsync_result {
 public:

  HIOther_StartAdjustChannelAsync_result(const HIOther_StartAdjustChannelAsync_result&);
  HIOther_StartAdjustChannelAsync_result& operator=(const HIOther_StartAdjustChannelAsync_result&);
  HIOther_StartAdjustChannelAsync_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_StartAdjustChannelAsync_result() throw();
   ::EXE_STATE::type success;

  _HIOther_StartAdjustChannelAsync_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_StartAdjustChannelAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_StartAdjustChannelAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_StartAdjustChannelAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_StartAdjustChannelAsync_presult__isset {
  _HIOther_StartAdjustChannelAsync_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_StartAdjustChannelAsync_presult__isset;

class HIOther_StartAdjustChannelAsync_presult {
 public:


  virtual ~HIOther_StartAdjustChannelAsync_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_StartAdjustChannelAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HIOther_SetOpticalLED_args__isset {
  _HIOther_SetOpticalLED_args__isset() : iOnOrOff(false), iWave(false) {}
  bool iOnOrOff :1;
  bool iWave :1;
} _HIOther_SetOpticalLED_args__isset;

class HIOther_SetOpticalLED_args {
 public:

  HIOther_SetOpticalLED_args(const HIOther_SetOpticalLED_args&);
  HIOther_SetOpticalLED_args& operator=(const HIOther_SetOpticalLED_args&);
  HIOther_SetOpticalLED_args() : iOnOrOff(0), iWave(0) {
  }

  virtual ~HIOther_SetOpticalLED_args() throw();
  int32_t iOnOrOff;
  int32_t iWave;

  _HIOther_SetOpticalLED_args__isset __isset;

  void __set_iOnOrOff(const int32_t val);

  void __set_iWave(const int32_t val);

  bool operator == (const HIOther_SetOpticalLED_args & rhs) const
  {
    if (!(iOnOrOff == rhs.iOnOrOff))
      return false;
    if (!(iWave == rhs.iWave))
      return false;
    return true;
  }
  bool operator != (const HIOther_SetOpticalLED_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_SetOpticalLED_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_SetOpticalLED_pargs {
 public:


  virtual ~HIOther_SetOpticalLED_pargs() throw();
  const int32_t* iOnOrOff;
  const int32_t* iWave;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_SetOpticalLED_result__isset {
  _HIOther_SetOpticalLED_result__isset() : success(false) {}
  bool success :1;
} _HIOther_SetOpticalLED_result__isset;

class HIOther_SetOpticalLED_result {
 public:

  HIOther_SetOpticalLED_result(const HIOther_SetOpticalLED_result&);
  HIOther_SetOpticalLED_result& operator=(const HIOther_SetOpticalLED_result&);
  HIOther_SetOpticalLED_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HIOther_SetOpticalLED_result() throw();
   ::EXE_STATE::type success;

  _HIOther_SetOpticalLED_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HIOther_SetOpticalLED_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_SetOpticalLED_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_SetOpticalLED_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_SetOpticalLED_presult__isset {
  _HIOther_SetOpticalLED_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_SetOpticalLED_presult__isset;

class HIOther_SetOpticalLED_presult {
 public:


  virtual ~HIOther_SetOpticalLED_presult() throw();
   ::EXE_STATE::type* success;

  _HIOther_SetOpticalLED_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HIOther_GetChannelAD_args {
 public:

  HIOther_GetChannelAD_args(const HIOther_GetChannelAD_args&);
  HIOther_GetChannelAD_args& operator=(const HIOther_GetChannelAD_args&);
  HIOther_GetChannelAD_args() {
  }

  virtual ~HIOther_GetChannelAD_args() throw();

  bool operator == (const HIOther_GetChannelAD_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HIOther_GetChannelAD_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_GetChannelAD_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_GetChannelAD_pargs {
 public:


  virtual ~HIOther_GetChannelAD_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_GetChannelAD_result__isset {
  _HIOther_GetChannelAD_result__isset() : success(false) {}
  bool success :1;
} _HIOther_GetChannelAD_result__isset;

class HIOther_GetChannelAD_result {
 public:

  HIOther_GetChannelAD_result(const HIOther_GetChannelAD_result&);
  HIOther_GetChannelAD_result& operator=(const HIOther_GetChannelAD_result&);
  HIOther_GetChannelAD_result() {
  }

  virtual ~HIOther_GetChannelAD_result() throw();
  std::vector< ::CHANNEL_AD_T>  success;

  _HIOther_GetChannelAD_result__isset __isset;

  void __set_success(const std::vector< ::CHANNEL_AD_T> & val);

  bool operator == (const HIOther_GetChannelAD_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_GetChannelAD_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_GetChannelAD_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_GetChannelAD_presult__isset {
  _HIOther_GetChannelAD_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_GetChannelAD_presult__isset;

class HIOther_GetChannelAD_presult {
 public:


  virtual ~HIOther_GetChannelAD_presult() throw();
  std::vector< ::CHANNEL_AD_T> * success;

  _HIOther_GetChannelAD_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HIOther_GetChannelGain_args {
 public:

  HIOther_GetChannelGain_args(const HIOther_GetChannelGain_args&);
  HIOther_GetChannelGain_args& operator=(const HIOther_GetChannelGain_args&);
  HIOther_GetChannelGain_args() {
  }

  virtual ~HIOther_GetChannelGain_args() throw();

  bool operator == (const HIOther_GetChannelGain_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HIOther_GetChannelGain_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_GetChannelGain_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HIOther_GetChannelGain_pargs {
 public:


  virtual ~HIOther_GetChannelGain_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_GetChannelGain_result__isset {
  _HIOther_GetChannelGain_result__isset() : success(false) {}
  bool success :1;
} _HIOther_GetChannelGain_result__isset;

class HIOther_GetChannelGain_result {
 public:

  HIOther_GetChannelGain_result(const HIOther_GetChannelGain_result&);
  HIOther_GetChannelGain_result& operator=(const HIOther_GetChannelGain_result&);
  HIOther_GetChannelGain_result() {
  }

  virtual ~HIOther_GetChannelGain_result() throw();
   ::CHANNEL_GAIN_T success;

  _HIOther_GetChannelGain_result__isset __isset;

  void __set_success(const  ::CHANNEL_GAIN_T& val);

  bool operator == (const HIOther_GetChannelGain_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HIOther_GetChannelGain_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HIOther_GetChannelGain_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HIOther_GetChannelGain_presult__isset {
  _HIOther_GetChannelGain_presult__isset() : success(false) {}
  bool success :1;
} _HIOther_GetChannelGain_presult__isset;

class HIOther_GetChannelGain_presult {
 public:


  virtual ~HIOther_GetChannelGain_presult() throw();
   ::CHANNEL_GAIN_T* success;

  _HIOther_GetChannelGain_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HIOtherClient : virtual public HIOtherIf {
 public:
  HIOtherClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HIOtherClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::EXE_STATE::type SetSystemBaseData(const std::string& strJson);
  void send_SetSystemBaseData(const std::string& strJson);
   ::EXE_STATE::type recv_SetSystemBaseData();
   ::EXE_STATE::type ExecuteScriptAsync(const std::string& strFileNmae, const int32_t iUserData);
  void send_ExecuteScriptAsync(const std::string& strFileNmae, const int32_t iUserData);
   ::EXE_STATE::type recv_ExecuteScriptAsync();
   ::EXE_STATE::type UpgradeSlaveProgramAsync(const  ::SLAVE_PROGRAM_T& tSlaveprogram, const int32_t iUserData);
  void send_UpgradeSlaveProgramAsync(const  ::SLAVE_PROGRAM_T& tSlaveprogram, const int32_t iUserData);
   ::EXE_STATE::type recv_UpgradeSlaveProgramAsync();
  void GetVersion(std::string& _return, const int32_t iType);
  void send_GetVersion(const int32_t iType);
  void recv_GetVersion(std::string& _return);
   ::EXE_STATE::type SetInstrumentNo(const std::string& strInstrumentNo);
  void send_SetInstrumentNo(const std::string& strInstrumentNo);
   ::EXE_STATE::type recv_SetInstrumentNo();
  void GetInstrumentNo(std::string& _return);
  void send_GetInstrumentNo();
  void recv_GetInstrumentNo(std::string& _return);
   ::EXE_STATE::type SetSystemTime(const  ::DATE_TIME_T& tDateTime);
  void send_SetSystemTime(const  ::DATE_TIME_T& tDateTime);
   ::EXE_STATE::type recv_SetSystemTime();
  void GetSystemTime( ::DATE_TIME_T& _return);
  void send_GetSystemTime();
  void recv_GetSystemTime( ::DATE_TIME_T& _return);
   ::EXE_STATE::type SetBootStrategy(const std::vector< ::BOOT_PARAM_T> & lstcBootParams, const std::vector<std::string> & lstMAC);
  void send_SetBootStrategy(const std::vector< ::BOOT_PARAM_T> & lstcBootParams, const std::vector<std::string> & lstMAC);
   ::EXE_STATE::type recv_SetBootStrategy();
   ::EXE_STATE::type HeartbeatAsync(const int32_t iUserData);
  void send_HeartbeatAsync(const int32_t iUserData);
   ::EXE_STATE::type recv_HeartbeatAsync();
   ::EXE_STATE::type ThriftMotorParaSet(const  ::THRIFT_MOTOR_PARA_T& tMotorPara);
  void send_ThriftMotorParaSet(const  ::THRIFT_MOTOR_PARA_T& tMotorPara);
   ::EXE_STATE::type recv_ThriftMotorParaSet();
  void ThriftMotorParaGet( ::THRIFT_MOTOR_PARA_T& _return, const int32_t iMotorID);
  void send_ThriftMotorParaGet(const int32_t iMotorID);
  void recv_ThriftMotorParaGet( ::THRIFT_MOTOR_PARA_T& _return);
   ::EXE_STATE::type ThriftMotorPosSet(const int32_t iMotorID, const int32_t iPos, const int32_t iStep);
  void send_ThriftMotorPosSet(const int32_t iMotorID, const int32_t iPos, const int32_t iStep);
   ::EXE_STATE::type recv_ThriftMotorPosSet();
  void ThriftMotorPosGet(std::vector<int32_t> & _return, const int32_t iMotorID);
  void send_ThriftMotorPosGet(const int32_t iMotorID);
  void recv_ThriftMotorPosGet(std::vector<int32_t> & _return);
   ::EXE_STATE::type ThriftMotorReset(const int32_t iMotorID, const int32_t iIsFirst);
  void send_ThriftMotorReset(const int32_t iMotorID, const int32_t iIsFirst);
   ::EXE_STATE::type recv_ThriftMotorReset();
   ::EXE_STATE::type ThriftMotorMove(const int32_t iMotorID, const int32_t iStep);
  void send_ThriftMotorMove(const int32_t iMotorID, const int32_t iStep);
   ::EXE_STATE::type recv_ThriftMotorMove();
   ::EXE_STATE::type ThriftMotorMoveTo(const int32_t iMotorID, const int32_t iStep);
  void send_ThriftMotorMoveTo(const int32_t iMotorID, const int32_t iStep);
   ::EXE_STATE::type recv_ThriftMotorMoveTo();
  void ThriftReadBarcode(std::string& _return, const int32_t iReaderID);
  void send_ThriftReadBarcode(const int32_t iReaderID);
  void recv_ThriftReadBarcode(std::string& _return);
  int32_t ThriftLiquidDetect(const int32_t iNeedleID);
  void send_ThriftLiquidDetect(const int32_t iNeedleID);
  int32_t recv_ThriftLiquidDetect();
   ::EXE_STATE::type ThriftRackMoveIn();
  void send_ThriftRackMoveIn();
   ::EXE_STATE::type recv_ThriftRackMoveIn();
   ::EXE_STATE::type ThriftRackMoveOutHorizontal();
  void send_ThriftRackMoveOutHorizontal();
   ::EXE_STATE::type recv_ThriftRackMoveOutHorizontal();
   ::EXE_STATE::type RotatingReagentBin(const int32_t iReagentPos);
  void send_RotatingReagentBin(const int32_t iReagentPos);
   ::EXE_STATE::type recv_RotatingReagentBin();
   ::EXE_STATE::type EngineerDebugPosSet(const  ::ENGINEER_DEBUG_MODULE_PARA_T& tModulePara);
  void send_EngineerDebugPosSet(const  ::ENGINEER_DEBUG_MODULE_PARA_T& tModulePara);
   ::EXE_STATE::type recv_EngineerDebugPosSet();
  void EngineerDebugPosGet(std::vector< ::ENGINEER_DEBUG_MODULE_PARA_T> & _return, const int32_t iModuleIndex);
  void send_EngineerDebugPosGet(const int32_t iModuleIndex);
  void recv_EngineerDebugPosGet(std::vector< ::ENGINEER_DEBUG_MODULE_PARA_T> & _return);
  void EngineerDebugGetVirtualPosition(std::vector< ::ENGINEER_DEBUG_VIRTUAL_POSITION_T> & _return);
  void send_EngineerDebugGetVirtualPosition();
  void recv_EngineerDebugGetVirtualPosition(std::vector< ::ENGINEER_DEBUG_VIRTUAL_POSITION_T> & _return);
   ::EXE_STATE::type EngineerDebugMotorActionExecuteAsync(const  ::ENGINEER_DEBUG_MOTOR_PARA_T& tMotorPara, const int32_t iUserData);
  void send_EngineerDebugMotorActionExecuteAsync(const  ::ENGINEER_DEBUG_MOTOR_PARA_T& tMotorPara, const int32_t iUserData);
   ::EXE_STATE::type recv_EngineerDebugMotorActionExecuteAsync();
   ::EXE_STATE::type EngineerDebugWeighingAsync(const int32_t iNeedType, const int32_t iSampleOrReagentVol, const int32_t iDiulentVol, const int32_t iCups, const int32_t iUserData);
  void send_EngineerDebugWeighingAsync(const int32_t iNeedType, const int32_t iSampleOrReagentVol, const int32_t iDiulentVol, const int32_t iCups, const int32_t iUserData);
   ::EXE_STATE::type recv_EngineerDebugWeighingAsync();
   ::EXE_STATE::type EngineerDebugAutoCalibrationAsync(const int32_t iCalibID, const int32_t iType, const int32_t iUserData);
  void send_EngineerDebugAutoCalibrationAsync(const int32_t iCalibID, const int32_t iType, const int32_t iUserData);
   ::EXE_STATE::type recv_EngineerDebugAutoCalibrationAsync();
   ::EXE_STATE::type EngineerDebugInjectorKBSet(const  ::ENGINEER_DEBUG_INJECTOR_KB_T& tInjectorKB);
  void send_EngineerDebugInjectorKBSet(const  ::ENGINEER_DEBUG_INJECTOR_KB_T& tInjectorKB);
   ::EXE_STATE::type recv_EngineerDebugInjectorKBSet();
  void EngineerDebugInjectorKBGet(std::vector< ::ENGINEER_DEBUG_INJECTOR_KB_T> & _return);
  void send_EngineerDebugInjectorKBGet();
  void recv_EngineerDebugInjectorKBGet(std::vector< ::ENGINEER_DEBUG_INJECTOR_KB_T> & _return);
   ::EXE_STATE::type EngineerDebugRunAsync(const int32_t iModuleIndex, const int32_t iCmd, const int32_t iUserData);
  void send_EngineerDebugRunAsync(const int32_t iModuleIndex, const int32_t iCmd, const int32_t iUserData);
   ::EXE_STATE::type recv_EngineerDebugRunAsync();
   ::EXE_STATE::type ThriftConfigPara(const  ::THRIFT_CONFIG_T& tThriftConfig, const int32_t iUserData);
  void send_ThriftConfigPara(const  ::THRIFT_CONFIG_T& tThriftConfig, const int32_t iUserData);
   ::EXE_STATE::type recv_ThriftConfigPara();
   ::EXE_STATE::type SetTimeOut(const int32_t iType, const int32_t iSeconds);
  void send_SetTimeOut(const int32_t iType, const int32_t iSeconds);
   ::EXE_STATE::type recv_SetTimeOut();
   ::EXE_STATE::type GetUploadBackupFile(const int32_t iFileType, const int32_t iRandNo);
  void send_GetUploadBackupFile(const int32_t iFileType, const int32_t iRandNo);
   ::EXE_STATE::type recv_GetUploadBackupFile();
   ::EXE_STATE::type RestoreConfigFile(const std::string& strFileName, const int32_t iFileType, const std::string& hexConfigFile, const std::string& strMD5);
  void send_RestoreConfigFile(const std::string& strFileName, const int32_t iFileType, const std::string& hexConfigFile, const std::string& strMD5);
   ::EXE_STATE::type recv_RestoreConfigFile();
   ::EXE_STATE::type EngineerAgingRunAsync(const  ::SLAVE_ASSEMBLY_AGING_PARA_T& tAssemblyAgingPara, const int32_t iUserData);
  void send_EngineerAgingRunAsync(const  ::SLAVE_ASSEMBLY_AGING_PARA_T& tAssemblyAgingPara, const int32_t iUserData);
   ::EXE_STATE::type recv_EngineerAgingRunAsync();
  void GetChannelStatus(std::vector< ::CHANNEL_STATUS_T> & _return);
  void send_GetChannelStatus();
  void recv_GetChannelStatus(std::vector< ::CHANNEL_STATUS_T> & _return);
   ::EXE_STATE::type SetChannelStatus(const std::vector< ::CHANNEL_STATUS_T> & lstChannelStatus);
  void send_SetChannelStatus(const std::vector< ::CHANNEL_STATUS_T> & lstChannelStatus);
   ::EXE_STATE::type recv_SetChannelStatus();
   ::EXE_STATE::type StartAdjustChannelAsync(const int32_t iUserData);
  void send_StartAdjustChannelAsync(const int32_t iUserData);
   ::EXE_STATE::type recv_StartAdjustChannelAsync();
   ::EXE_STATE::type SetOpticalLED(const int32_t iOnOrOff, const int32_t iWave);
  void send_SetOpticalLED(const int32_t iOnOrOff, const int32_t iWave);
   ::EXE_STATE::type recv_SetOpticalLED();
  void GetChannelAD(std::vector< ::CHANNEL_AD_T> & _return);
  void send_GetChannelAD();
  void recv_GetChannelAD(std::vector< ::CHANNEL_AD_T> & _return);
  void GetChannelGain( ::CHANNEL_GAIN_T& _return);
  void send_GetChannelGain();
  void recv_GetChannelGain( ::CHANNEL_GAIN_T& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HIOtherProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<HIOtherIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HIOtherProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SetSystemBaseData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ExecuteScriptAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpgradeSlaveProgramAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetInstrumentNo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetInstrumentNo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetSystemTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSystemTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetBootStrategy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HeartbeatAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ThriftMotorParaSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ThriftMotorParaGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ThriftMotorPosSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ThriftMotorPosGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ThriftMotorReset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ThriftMotorMove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ThriftMotorMoveTo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ThriftReadBarcode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ThriftLiquidDetect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ThriftRackMoveIn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ThriftRackMoveOutHorizontal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RotatingReagentBin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EngineerDebugPosSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EngineerDebugPosGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EngineerDebugGetVirtualPosition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EngineerDebugMotorActionExecuteAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EngineerDebugWeighingAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EngineerDebugAutoCalibrationAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EngineerDebugInjectorKBSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EngineerDebugInjectorKBGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EngineerDebugRunAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ThriftConfigPara(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetTimeOut(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetUploadBackupFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RestoreConfigFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EngineerAgingRunAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetChannelStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetChannelStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StartAdjustChannelAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetOpticalLED(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetChannelAD(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetChannelGain(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HIOtherProcessor(::apache::thrift::stdcxx::shared_ptr<HIOtherIf> iface) :
    iface_(iface) {
    processMap_["SetSystemBaseData"] = &HIOtherProcessor::process_SetSystemBaseData;
    processMap_["ExecuteScriptAsync"] = &HIOtherProcessor::process_ExecuteScriptAsync;
    processMap_["UpgradeSlaveProgramAsync"] = &HIOtherProcessor::process_UpgradeSlaveProgramAsync;
    processMap_["GetVersion"] = &HIOtherProcessor::process_GetVersion;
    processMap_["SetInstrumentNo"] = &HIOtherProcessor::process_SetInstrumentNo;
    processMap_["GetInstrumentNo"] = &HIOtherProcessor::process_GetInstrumentNo;
    processMap_["SetSystemTime"] = &HIOtherProcessor::process_SetSystemTime;
    processMap_["GetSystemTime"] = &HIOtherProcessor::process_GetSystemTime;
    processMap_["SetBootStrategy"] = &HIOtherProcessor::process_SetBootStrategy;
    processMap_["HeartbeatAsync"] = &HIOtherProcessor::process_HeartbeatAsync;
    processMap_["ThriftMotorParaSet"] = &HIOtherProcessor::process_ThriftMotorParaSet;
    processMap_["ThriftMotorParaGet"] = &HIOtherProcessor::process_ThriftMotorParaGet;
    processMap_["ThriftMotorPosSet"] = &HIOtherProcessor::process_ThriftMotorPosSet;
    processMap_["ThriftMotorPosGet"] = &HIOtherProcessor::process_ThriftMotorPosGet;
    processMap_["ThriftMotorReset"] = &HIOtherProcessor::process_ThriftMotorReset;
    processMap_["ThriftMotorMove"] = &HIOtherProcessor::process_ThriftMotorMove;
    processMap_["ThriftMotorMoveTo"] = &HIOtherProcessor::process_ThriftMotorMoveTo;
    processMap_["ThriftReadBarcode"] = &HIOtherProcessor::process_ThriftReadBarcode;
    processMap_["ThriftLiquidDetect"] = &HIOtherProcessor::process_ThriftLiquidDetect;
    processMap_["ThriftRackMoveIn"] = &HIOtherProcessor::process_ThriftRackMoveIn;
    processMap_["ThriftRackMoveOutHorizontal"] = &HIOtherProcessor::process_ThriftRackMoveOutHorizontal;
    processMap_["RotatingReagentBin"] = &HIOtherProcessor::process_RotatingReagentBin;
    processMap_["EngineerDebugPosSet"] = &HIOtherProcessor::process_EngineerDebugPosSet;
    processMap_["EngineerDebugPosGet"] = &HIOtherProcessor::process_EngineerDebugPosGet;
    processMap_["EngineerDebugGetVirtualPosition"] = &HIOtherProcessor::process_EngineerDebugGetVirtualPosition;
    processMap_["EngineerDebugMotorActionExecuteAsync"] = &HIOtherProcessor::process_EngineerDebugMotorActionExecuteAsync;
    processMap_["EngineerDebugWeighingAsync"] = &HIOtherProcessor::process_EngineerDebugWeighingAsync;
    processMap_["EngineerDebugAutoCalibrationAsync"] = &HIOtherProcessor::process_EngineerDebugAutoCalibrationAsync;
    processMap_["EngineerDebugInjectorKBSet"] = &HIOtherProcessor::process_EngineerDebugInjectorKBSet;
    processMap_["EngineerDebugInjectorKBGet"] = &HIOtherProcessor::process_EngineerDebugInjectorKBGet;
    processMap_["EngineerDebugRunAsync"] = &HIOtherProcessor::process_EngineerDebugRunAsync;
    processMap_["ThriftConfigPara"] = &HIOtherProcessor::process_ThriftConfigPara;
    processMap_["SetTimeOut"] = &HIOtherProcessor::process_SetTimeOut;
    processMap_["GetUploadBackupFile"] = &HIOtherProcessor::process_GetUploadBackupFile;
    processMap_["RestoreConfigFile"] = &HIOtherProcessor::process_RestoreConfigFile;
    processMap_["EngineerAgingRunAsync"] = &HIOtherProcessor::process_EngineerAgingRunAsync;
    processMap_["GetChannelStatus"] = &HIOtherProcessor::process_GetChannelStatus;
    processMap_["SetChannelStatus"] = &HIOtherProcessor::process_SetChannelStatus;
    processMap_["StartAdjustChannelAsync"] = &HIOtherProcessor::process_StartAdjustChannelAsync;
    processMap_["SetOpticalLED"] = &HIOtherProcessor::process_SetOpticalLED;
    processMap_["GetChannelAD"] = &HIOtherProcessor::process_GetChannelAD;
    processMap_["GetChannelGain"] = &HIOtherProcessor::process_GetChannelGain;
  }

  virtual ~HIOtherProcessor() {}
};

class HIOtherProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HIOtherProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< HIOtherIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< HIOtherIfFactory > handlerFactory_;
};

class HIOtherMultiface : virtual public HIOtherIf {
 public:
  HIOtherMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<HIOtherIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HIOtherMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<HIOtherIf> > ifaces_;
  HIOtherMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<HIOtherIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
   ::EXE_STATE::type SetSystemBaseData(const std::string& strJson) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetSystemBaseData(strJson);
    }
    return ifaces_[i]->SetSystemBaseData(strJson);
  }

   ::EXE_STATE::type ExecuteScriptAsync(const std::string& strFileNmae, const int32_t iUserData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ExecuteScriptAsync(strFileNmae, iUserData);
    }
    return ifaces_[i]->ExecuteScriptAsync(strFileNmae, iUserData);
  }

   ::EXE_STATE::type UpgradeSlaveProgramAsync(const  ::SLAVE_PROGRAM_T& tSlaveprogram, const int32_t iUserData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpgradeSlaveProgramAsync(tSlaveprogram, iUserData);
    }
    return ifaces_[i]->UpgradeSlaveProgramAsync(tSlaveprogram, iUserData);
  }

  void GetVersion(std::string& _return, const int32_t iType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetVersion(_return, iType);
    }
    ifaces_[i]->GetVersion(_return, iType);
    return;
  }

   ::EXE_STATE::type SetInstrumentNo(const std::string& strInstrumentNo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetInstrumentNo(strInstrumentNo);
    }
    return ifaces_[i]->SetInstrumentNo(strInstrumentNo);
  }

  void GetInstrumentNo(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetInstrumentNo(_return);
    }
    ifaces_[i]->GetInstrumentNo(_return);
    return;
  }

   ::EXE_STATE::type SetSystemTime(const  ::DATE_TIME_T& tDateTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetSystemTime(tDateTime);
    }
    return ifaces_[i]->SetSystemTime(tDateTime);
  }

  void GetSystemTime( ::DATE_TIME_T& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSystemTime(_return);
    }
    ifaces_[i]->GetSystemTime(_return);
    return;
  }

   ::EXE_STATE::type SetBootStrategy(const std::vector< ::BOOT_PARAM_T> & lstcBootParams, const std::vector<std::string> & lstMAC) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetBootStrategy(lstcBootParams, lstMAC);
    }
    return ifaces_[i]->SetBootStrategy(lstcBootParams, lstMAC);
  }

   ::EXE_STATE::type HeartbeatAsync(const int32_t iUserData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HeartbeatAsync(iUserData);
    }
    return ifaces_[i]->HeartbeatAsync(iUserData);
  }

   ::EXE_STATE::type ThriftMotorParaSet(const  ::THRIFT_MOTOR_PARA_T& tMotorPara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ThriftMotorParaSet(tMotorPara);
    }
    return ifaces_[i]->ThriftMotorParaSet(tMotorPara);
  }

  void ThriftMotorParaGet( ::THRIFT_MOTOR_PARA_T& _return, const int32_t iMotorID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ThriftMotorParaGet(_return, iMotorID);
    }
    ifaces_[i]->ThriftMotorParaGet(_return, iMotorID);
    return;
  }

   ::EXE_STATE::type ThriftMotorPosSet(const int32_t iMotorID, const int32_t iPos, const int32_t iStep) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ThriftMotorPosSet(iMotorID, iPos, iStep);
    }
    return ifaces_[i]->ThriftMotorPosSet(iMotorID, iPos, iStep);
  }

  void ThriftMotorPosGet(std::vector<int32_t> & _return, const int32_t iMotorID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ThriftMotorPosGet(_return, iMotorID);
    }
    ifaces_[i]->ThriftMotorPosGet(_return, iMotorID);
    return;
  }

   ::EXE_STATE::type ThriftMotorReset(const int32_t iMotorID, const int32_t iIsFirst) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ThriftMotorReset(iMotorID, iIsFirst);
    }
    return ifaces_[i]->ThriftMotorReset(iMotorID, iIsFirst);
  }

   ::EXE_STATE::type ThriftMotorMove(const int32_t iMotorID, const int32_t iStep) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ThriftMotorMove(iMotorID, iStep);
    }
    return ifaces_[i]->ThriftMotorMove(iMotorID, iStep);
  }

   ::EXE_STATE::type ThriftMotorMoveTo(const int32_t iMotorID, const int32_t iStep) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ThriftMotorMoveTo(iMotorID, iStep);
    }
    return ifaces_[i]->ThriftMotorMoveTo(iMotorID, iStep);
  }

  void ThriftReadBarcode(std::string& _return, const int32_t iReaderID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ThriftReadBarcode(_return, iReaderID);
    }
    ifaces_[i]->ThriftReadBarcode(_return, iReaderID);
    return;
  }

  int32_t ThriftLiquidDetect(const int32_t iNeedleID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ThriftLiquidDetect(iNeedleID);
    }
    return ifaces_[i]->ThriftLiquidDetect(iNeedleID);
  }

   ::EXE_STATE::type ThriftRackMoveIn() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ThriftRackMoveIn();
    }
    return ifaces_[i]->ThriftRackMoveIn();
  }

   ::EXE_STATE::type ThriftRackMoveOutHorizontal() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ThriftRackMoveOutHorizontal();
    }
    return ifaces_[i]->ThriftRackMoveOutHorizontal();
  }

   ::EXE_STATE::type RotatingReagentBin(const int32_t iReagentPos) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RotatingReagentBin(iReagentPos);
    }
    return ifaces_[i]->RotatingReagentBin(iReagentPos);
  }

   ::EXE_STATE::type EngineerDebugPosSet(const  ::ENGINEER_DEBUG_MODULE_PARA_T& tModulePara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EngineerDebugPosSet(tModulePara);
    }
    return ifaces_[i]->EngineerDebugPosSet(tModulePara);
  }

  void EngineerDebugPosGet(std::vector< ::ENGINEER_DEBUG_MODULE_PARA_T> & _return, const int32_t iModuleIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EngineerDebugPosGet(_return, iModuleIndex);
    }
    ifaces_[i]->EngineerDebugPosGet(_return, iModuleIndex);
    return;
  }

  void EngineerDebugGetVirtualPosition(std::vector< ::ENGINEER_DEBUG_VIRTUAL_POSITION_T> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EngineerDebugGetVirtualPosition(_return);
    }
    ifaces_[i]->EngineerDebugGetVirtualPosition(_return);
    return;
  }

   ::EXE_STATE::type EngineerDebugMotorActionExecuteAsync(const  ::ENGINEER_DEBUG_MOTOR_PARA_T& tMotorPara, const int32_t iUserData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EngineerDebugMotorActionExecuteAsync(tMotorPara, iUserData);
    }
    return ifaces_[i]->EngineerDebugMotorActionExecuteAsync(tMotorPara, iUserData);
  }

   ::EXE_STATE::type EngineerDebugWeighingAsync(const int32_t iNeedType, const int32_t iSampleOrReagentVol, const int32_t iDiulentVol, const int32_t iCups, const int32_t iUserData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EngineerDebugWeighingAsync(iNeedType, iSampleOrReagentVol, iDiulentVol, iCups, iUserData);
    }
    return ifaces_[i]->EngineerDebugWeighingAsync(iNeedType, iSampleOrReagentVol, iDiulentVol, iCups, iUserData);
  }

   ::EXE_STATE::type EngineerDebugAutoCalibrationAsync(const int32_t iCalibID, const int32_t iType, const int32_t iUserData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EngineerDebugAutoCalibrationAsync(iCalibID, iType, iUserData);
    }
    return ifaces_[i]->EngineerDebugAutoCalibrationAsync(iCalibID, iType, iUserData);
  }

   ::EXE_STATE::type EngineerDebugInjectorKBSet(const  ::ENGINEER_DEBUG_INJECTOR_KB_T& tInjectorKB) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EngineerDebugInjectorKBSet(tInjectorKB);
    }
    return ifaces_[i]->EngineerDebugInjectorKBSet(tInjectorKB);
  }

  void EngineerDebugInjectorKBGet(std::vector< ::ENGINEER_DEBUG_INJECTOR_KB_T> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EngineerDebugInjectorKBGet(_return);
    }
    ifaces_[i]->EngineerDebugInjectorKBGet(_return);
    return;
  }

   ::EXE_STATE::type EngineerDebugRunAsync(const int32_t iModuleIndex, const int32_t iCmd, const int32_t iUserData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EngineerDebugRunAsync(iModuleIndex, iCmd, iUserData);
    }
    return ifaces_[i]->EngineerDebugRunAsync(iModuleIndex, iCmd, iUserData);
  }

   ::EXE_STATE::type ThriftConfigPara(const  ::THRIFT_CONFIG_T& tThriftConfig, const int32_t iUserData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ThriftConfigPara(tThriftConfig, iUserData);
    }
    return ifaces_[i]->ThriftConfigPara(tThriftConfig, iUserData);
  }

   ::EXE_STATE::type SetTimeOut(const int32_t iType, const int32_t iSeconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetTimeOut(iType, iSeconds);
    }
    return ifaces_[i]->SetTimeOut(iType, iSeconds);
  }

   ::EXE_STATE::type GetUploadBackupFile(const int32_t iFileType, const int32_t iRandNo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetUploadBackupFile(iFileType, iRandNo);
    }
    return ifaces_[i]->GetUploadBackupFile(iFileType, iRandNo);
  }

   ::EXE_STATE::type RestoreConfigFile(const std::string& strFileName, const int32_t iFileType, const std::string& hexConfigFile, const std::string& strMD5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RestoreConfigFile(strFileName, iFileType, hexConfigFile, strMD5);
    }
    return ifaces_[i]->RestoreConfigFile(strFileName, iFileType, hexConfigFile, strMD5);
  }

   ::EXE_STATE::type EngineerAgingRunAsync(const  ::SLAVE_ASSEMBLY_AGING_PARA_T& tAssemblyAgingPara, const int32_t iUserData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EngineerAgingRunAsync(tAssemblyAgingPara, iUserData);
    }
    return ifaces_[i]->EngineerAgingRunAsync(tAssemblyAgingPara, iUserData);
  }

  void GetChannelStatus(std::vector< ::CHANNEL_STATUS_T> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetChannelStatus(_return);
    }
    ifaces_[i]->GetChannelStatus(_return);
    return;
  }

   ::EXE_STATE::type SetChannelStatus(const std::vector< ::CHANNEL_STATUS_T> & lstChannelStatus) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetChannelStatus(lstChannelStatus);
    }
    return ifaces_[i]->SetChannelStatus(lstChannelStatus);
  }

   ::EXE_STATE::type StartAdjustChannelAsync(const int32_t iUserData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StartAdjustChannelAsync(iUserData);
    }
    return ifaces_[i]->StartAdjustChannelAsync(iUserData);
  }

   ::EXE_STATE::type SetOpticalLED(const int32_t iOnOrOff, const int32_t iWave) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetOpticalLED(iOnOrOff, iWave);
    }
    return ifaces_[i]->SetOpticalLED(iOnOrOff, iWave);
  }

  void GetChannelAD(std::vector< ::CHANNEL_AD_T> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetChannelAD(_return);
    }
    ifaces_[i]->GetChannelAD(_return);
    return;
  }

  void GetChannelGain( ::CHANNEL_GAIN_T& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetChannelGain(_return);
    }
    ifaces_[i]->GetChannelGain(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class HIOtherConcurrentClient : virtual public HIOtherIf {
 public:
  HIOtherConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HIOtherConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::EXE_STATE::type SetSystemBaseData(const std::string& strJson);
  int32_t send_SetSystemBaseData(const std::string& strJson);
   ::EXE_STATE::type recv_SetSystemBaseData(const int32_t seqid);
   ::EXE_STATE::type ExecuteScriptAsync(const std::string& strFileNmae, const int32_t iUserData);
  int32_t send_ExecuteScriptAsync(const std::string& strFileNmae, const int32_t iUserData);
   ::EXE_STATE::type recv_ExecuteScriptAsync(const int32_t seqid);
   ::EXE_STATE::type UpgradeSlaveProgramAsync(const  ::SLAVE_PROGRAM_T& tSlaveprogram, const int32_t iUserData);
  int32_t send_UpgradeSlaveProgramAsync(const  ::SLAVE_PROGRAM_T& tSlaveprogram, const int32_t iUserData);
   ::EXE_STATE::type recv_UpgradeSlaveProgramAsync(const int32_t seqid);
  void GetVersion(std::string& _return, const int32_t iType);
  int32_t send_GetVersion(const int32_t iType);
  void recv_GetVersion(std::string& _return, const int32_t seqid);
   ::EXE_STATE::type SetInstrumentNo(const std::string& strInstrumentNo);
  int32_t send_SetInstrumentNo(const std::string& strInstrumentNo);
   ::EXE_STATE::type recv_SetInstrumentNo(const int32_t seqid);
  void GetInstrumentNo(std::string& _return);
  int32_t send_GetInstrumentNo();
  void recv_GetInstrumentNo(std::string& _return, const int32_t seqid);
   ::EXE_STATE::type SetSystemTime(const  ::DATE_TIME_T& tDateTime);
  int32_t send_SetSystemTime(const  ::DATE_TIME_T& tDateTime);
   ::EXE_STATE::type recv_SetSystemTime(const int32_t seqid);
  void GetSystemTime( ::DATE_TIME_T& _return);
  int32_t send_GetSystemTime();
  void recv_GetSystemTime( ::DATE_TIME_T& _return, const int32_t seqid);
   ::EXE_STATE::type SetBootStrategy(const std::vector< ::BOOT_PARAM_T> & lstcBootParams, const std::vector<std::string> & lstMAC);
  int32_t send_SetBootStrategy(const std::vector< ::BOOT_PARAM_T> & lstcBootParams, const std::vector<std::string> & lstMAC);
   ::EXE_STATE::type recv_SetBootStrategy(const int32_t seqid);
   ::EXE_STATE::type HeartbeatAsync(const int32_t iUserData);
  int32_t send_HeartbeatAsync(const int32_t iUserData);
   ::EXE_STATE::type recv_HeartbeatAsync(const int32_t seqid);
   ::EXE_STATE::type ThriftMotorParaSet(const  ::THRIFT_MOTOR_PARA_T& tMotorPara);
  int32_t send_ThriftMotorParaSet(const  ::THRIFT_MOTOR_PARA_T& tMotorPara);
   ::EXE_STATE::type recv_ThriftMotorParaSet(const int32_t seqid);
  void ThriftMotorParaGet( ::THRIFT_MOTOR_PARA_T& _return, const int32_t iMotorID);
  int32_t send_ThriftMotorParaGet(const int32_t iMotorID);
  void recv_ThriftMotorParaGet( ::THRIFT_MOTOR_PARA_T& _return, const int32_t seqid);
   ::EXE_STATE::type ThriftMotorPosSet(const int32_t iMotorID, const int32_t iPos, const int32_t iStep);
  int32_t send_ThriftMotorPosSet(const int32_t iMotorID, const int32_t iPos, const int32_t iStep);
   ::EXE_STATE::type recv_ThriftMotorPosSet(const int32_t seqid);
  void ThriftMotorPosGet(std::vector<int32_t> & _return, const int32_t iMotorID);
  int32_t send_ThriftMotorPosGet(const int32_t iMotorID);
  void recv_ThriftMotorPosGet(std::vector<int32_t> & _return, const int32_t seqid);
   ::EXE_STATE::type ThriftMotorReset(const int32_t iMotorID, const int32_t iIsFirst);
  int32_t send_ThriftMotorReset(const int32_t iMotorID, const int32_t iIsFirst);
   ::EXE_STATE::type recv_ThriftMotorReset(const int32_t seqid);
   ::EXE_STATE::type ThriftMotorMove(const int32_t iMotorID, const int32_t iStep);
  int32_t send_ThriftMotorMove(const int32_t iMotorID, const int32_t iStep);
   ::EXE_STATE::type recv_ThriftMotorMove(const int32_t seqid);
   ::EXE_STATE::type ThriftMotorMoveTo(const int32_t iMotorID, const int32_t iStep);
  int32_t send_ThriftMotorMoveTo(const int32_t iMotorID, const int32_t iStep);
   ::EXE_STATE::type recv_ThriftMotorMoveTo(const int32_t seqid);
  void ThriftReadBarcode(std::string& _return, const int32_t iReaderID);
  int32_t send_ThriftReadBarcode(const int32_t iReaderID);
  void recv_ThriftReadBarcode(std::string& _return, const int32_t seqid);
  int32_t ThriftLiquidDetect(const int32_t iNeedleID);
  int32_t send_ThriftLiquidDetect(const int32_t iNeedleID);
  int32_t recv_ThriftLiquidDetect(const int32_t seqid);
   ::EXE_STATE::type ThriftRackMoveIn();
  int32_t send_ThriftRackMoveIn();
   ::EXE_STATE::type recv_ThriftRackMoveIn(const int32_t seqid);
   ::EXE_STATE::type ThriftRackMoveOutHorizontal();
  int32_t send_ThriftRackMoveOutHorizontal();
   ::EXE_STATE::type recv_ThriftRackMoveOutHorizontal(const int32_t seqid);
   ::EXE_STATE::type RotatingReagentBin(const int32_t iReagentPos);
  int32_t send_RotatingReagentBin(const int32_t iReagentPos);
   ::EXE_STATE::type recv_RotatingReagentBin(const int32_t seqid);
   ::EXE_STATE::type EngineerDebugPosSet(const  ::ENGINEER_DEBUG_MODULE_PARA_T& tModulePara);
  int32_t send_EngineerDebugPosSet(const  ::ENGINEER_DEBUG_MODULE_PARA_T& tModulePara);
   ::EXE_STATE::type recv_EngineerDebugPosSet(const int32_t seqid);
  void EngineerDebugPosGet(std::vector< ::ENGINEER_DEBUG_MODULE_PARA_T> & _return, const int32_t iModuleIndex);
  int32_t send_EngineerDebugPosGet(const int32_t iModuleIndex);
  void recv_EngineerDebugPosGet(std::vector< ::ENGINEER_DEBUG_MODULE_PARA_T> & _return, const int32_t seqid);
  void EngineerDebugGetVirtualPosition(std::vector< ::ENGINEER_DEBUG_VIRTUAL_POSITION_T> & _return);
  int32_t send_EngineerDebugGetVirtualPosition();
  void recv_EngineerDebugGetVirtualPosition(std::vector< ::ENGINEER_DEBUG_VIRTUAL_POSITION_T> & _return, const int32_t seqid);
   ::EXE_STATE::type EngineerDebugMotorActionExecuteAsync(const  ::ENGINEER_DEBUG_MOTOR_PARA_T& tMotorPara, const int32_t iUserData);
  int32_t send_EngineerDebugMotorActionExecuteAsync(const  ::ENGINEER_DEBUG_MOTOR_PARA_T& tMotorPara, const int32_t iUserData);
   ::EXE_STATE::type recv_EngineerDebugMotorActionExecuteAsync(const int32_t seqid);
   ::EXE_STATE::type EngineerDebugWeighingAsync(const int32_t iNeedType, const int32_t iSampleOrReagentVol, const int32_t iDiulentVol, const int32_t iCups, const int32_t iUserData);
  int32_t send_EngineerDebugWeighingAsync(const int32_t iNeedType, const int32_t iSampleOrReagentVol, const int32_t iDiulentVol, const int32_t iCups, const int32_t iUserData);
   ::EXE_STATE::type recv_EngineerDebugWeighingAsync(const int32_t seqid);
   ::EXE_STATE::type EngineerDebugAutoCalibrationAsync(const int32_t iCalibID, const int32_t iType, const int32_t iUserData);
  int32_t send_EngineerDebugAutoCalibrationAsync(const int32_t iCalibID, const int32_t iType, const int32_t iUserData);
   ::EXE_STATE::type recv_EngineerDebugAutoCalibrationAsync(const int32_t seqid);
   ::EXE_STATE::type EngineerDebugInjectorKBSet(const  ::ENGINEER_DEBUG_INJECTOR_KB_T& tInjectorKB);
  int32_t send_EngineerDebugInjectorKBSet(const  ::ENGINEER_DEBUG_INJECTOR_KB_T& tInjectorKB);
   ::EXE_STATE::type recv_EngineerDebugInjectorKBSet(const int32_t seqid);
  void EngineerDebugInjectorKBGet(std::vector< ::ENGINEER_DEBUG_INJECTOR_KB_T> & _return);
  int32_t send_EngineerDebugInjectorKBGet();
  void recv_EngineerDebugInjectorKBGet(std::vector< ::ENGINEER_DEBUG_INJECTOR_KB_T> & _return, const int32_t seqid);
   ::EXE_STATE::type EngineerDebugRunAsync(const int32_t iModuleIndex, const int32_t iCmd, const int32_t iUserData);
  int32_t send_EngineerDebugRunAsync(const int32_t iModuleIndex, const int32_t iCmd, const int32_t iUserData);
   ::EXE_STATE::type recv_EngineerDebugRunAsync(const int32_t seqid);
   ::EXE_STATE::type ThriftConfigPara(const  ::THRIFT_CONFIG_T& tThriftConfig, const int32_t iUserData);
  int32_t send_ThriftConfigPara(const  ::THRIFT_CONFIG_T& tThriftConfig, const int32_t iUserData);
   ::EXE_STATE::type recv_ThriftConfigPara(const int32_t seqid);
   ::EXE_STATE::type SetTimeOut(const int32_t iType, const int32_t iSeconds);
  int32_t send_SetTimeOut(const int32_t iType, const int32_t iSeconds);
   ::EXE_STATE::type recv_SetTimeOut(const int32_t seqid);
   ::EXE_STATE::type GetUploadBackupFile(const int32_t iFileType, const int32_t iRandNo);
  int32_t send_GetUploadBackupFile(const int32_t iFileType, const int32_t iRandNo);
   ::EXE_STATE::type recv_GetUploadBackupFile(const int32_t seqid);
   ::EXE_STATE::type RestoreConfigFile(const std::string& strFileName, const int32_t iFileType, const std::string& hexConfigFile, const std::string& strMD5);
  int32_t send_RestoreConfigFile(const std::string& strFileName, const int32_t iFileType, const std::string& hexConfigFile, const std::string& strMD5);
   ::EXE_STATE::type recv_RestoreConfigFile(const int32_t seqid);
   ::EXE_STATE::type EngineerAgingRunAsync(const  ::SLAVE_ASSEMBLY_AGING_PARA_T& tAssemblyAgingPara, const int32_t iUserData);
  int32_t send_EngineerAgingRunAsync(const  ::SLAVE_ASSEMBLY_AGING_PARA_T& tAssemblyAgingPara, const int32_t iUserData);
   ::EXE_STATE::type recv_EngineerAgingRunAsync(const int32_t seqid);
  void GetChannelStatus(std::vector< ::CHANNEL_STATUS_T> & _return);
  int32_t send_GetChannelStatus();
  void recv_GetChannelStatus(std::vector< ::CHANNEL_STATUS_T> & _return, const int32_t seqid);
   ::EXE_STATE::type SetChannelStatus(const std::vector< ::CHANNEL_STATUS_T> & lstChannelStatus);
  int32_t send_SetChannelStatus(const std::vector< ::CHANNEL_STATUS_T> & lstChannelStatus);
   ::EXE_STATE::type recv_SetChannelStatus(const int32_t seqid);
   ::EXE_STATE::type StartAdjustChannelAsync(const int32_t iUserData);
  int32_t send_StartAdjustChannelAsync(const int32_t iUserData);
   ::EXE_STATE::type recv_StartAdjustChannelAsync(const int32_t seqid);
   ::EXE_STATE::type SetOpticalLED(const int32_t iOnOrOff, const int32_t iWave);
  int32_t send_SetOpticalLED(const int32_t iOnOrOff, const int32_t iWave);
   ::EXE_STATE::type recv_SetOpticalLED(const int32_t seqid);
  void GetChannelAD(std::vector< ::CHANNEL_AD_T> & _return);
  int32_t send_GetChannelAD();
  void recv_GetChannelAD(std::vector< ::CHANNEL_AD_T> & _return, const int32_t seqid);
  void GetChannelGain( ::CHANNEL_GAIN_T& _return);
  int32_t send_GetChannelGain();
  void recv_GetChannelGain( ::CHANNEL_GAIN_T& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
