/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SIMaintenance_H
#define SIMaintenance_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "H2103_Slave_Invoke_types.h"

namespace H2103_Slave_Invoke {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SIMaintenanceIf {
 public:
  virtual ~SIMaintenanceIf() {}
  virtual  ::EXE_STATE::type ReportReagentInfo(const  ::REAGENT_SCAN_INFO_T& tReagentScanInfo) = 0;
  virtual  ::EXE_STATE::type ReportReagentRemain(const int32_t iReagPosIndex, const int32_t iRemainVolume, const int32_t iOrderNo) = 0;
  virtual  ::EXE_STATE::type ReportPositionCalibtion(const  ::ENGINEER_DEBUG_POS_CALIB_T& tInfo) = 0;
  virtual  ::EXE_STATE::type ReportPositionCalibtion_H(const  ::ENGINEER_DEBUG_MODULE_PARA_T& tInfo) = 0;
  virtual  ::EXE_STATE::type ReportMaintenanceItemResult(const  ::MAINTENANCE_ITEM_T& tItem, const  ::IBOOL bStart, const  ::IBOOL bStatus) = 0;
  virtual  ::EXE_STATE::type ReportMaintenanceRemainTime(const int32_t iRemainTime) = 0;
};

class SIMaintenanceIfFactory {
 public:
  typedef SIMaintenanceIf Handler;

  virtual ~SIMaintenanceIfFactory() {}

  virtual SIMaintenanceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SIMaintenanceIf* /* handler */) = 0;
};

class SIMaintenanceIfSingletonFactory : virtual public SIMaintenanceIfFactory {
 public:
  SIMaintenanceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<SIMaintenanceIf>& iface) : iface_(iface) {}
  virtual ~SIMaintenanceIfSingletonFactory() {}

  virtual SIMaintenanceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SIMaintenanceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<SIMaintenanceIf> iface_;
};

class SIMaintenanceNull : virtual public SIMaintenanceIf {
 public:
  virtual ~SIMaintenanceNull() {}
   ::EXE_STATE::type ReportReagentInfo(const  ::REAGENT_SCAN_INFO_T& /* tReagentScanInfo */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportReagentRemain(const int32_t /* iReagPosIndex */, const int32_t /* iRemainVolume */, const int32_t /* iOrderNo */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportPositionCalibtion(const  ::ENGINEER_DEBUG_POS_CALIB_T& /* tInfo */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportPositionCalibtion_H(const  ::ENGINEER_DEBUG_MODULE_PARA_T& /* tInfo */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportMaintenanceItemResult(const  ::MAINTENANCE_ITEM_T& /* tItem */, const  ::IBOOL /* bStart */, const  ::IBOOL /* bStatus */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportMaintenanceRemainTime(const int32_t /* iRemainTime */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
};

typedef struct _SIMaintenance_ReportReagentInfo_args__isset {
  _SIMaintenance_ReportReagentInfo_args__isset() : tReagentScanInfo(false) {}
  bool tReagentScanInfo :1;
} _SIMaintenance_ReportReagentInfo_args__isset;

class SIMaintenance_ReportReagentInfo_args {
 public:

  SIMaintenance_ReportReagentInfo_args(const SIMaintenance_ReportReagentInfo_args&);
  SIMaintenance_ReportReagentInfo_args& operator=(const SIMaintenance_ReportReagentInfo_args&);
  SIMaintenance_ReportReagentInfo_args() {
  }

  virtual ~SIMaintenance_ReportReagentInfo_args() throw();
   ::REAGENT_SCAN_INFO_T tReagentScanInfo;

  _SIMaintenance_ReportReagentInfo_args__isset __isset;

  void __set_tReagentScanInfo(const  ::REAGENT_SCAN_INFO_T& val);

  bool operator == (const SIMaintenance_ReportReagentInfo_args & rhs) const
  {
    if (!(tReagentScanInfo == rhs.tReagentScanInfo))
      return false;
    return true;
  }
  bool operator != (const SIMaintenance_ReportReagentInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIMaintenance_ReportReagentInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIMaintenance_ReportReagentInfo_pargs {
 public:


  virtual ~SIMaintenance_ReportReagentInfo_pargs() throw();
  const  ::REAGENT_SCAN_INFO_T* tReagentScanInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIMaintenance_ReportReagentInfo_result__isset {
  _SIMaintenance_ReportReagentInfo_result__isset() : success(false) {}
  bool success :1;
} _SIMaintenance_ReportReagentInfo_result__isset;

class SIMaintenance_ReportReagentInfo_result {
 public:

  SIMaintenance_ReportReagentInfo_result(const SIMaintenance_ReportReagentInfo_result&);
  SIMaintenance_ReportReagentInfo_result& operator=(const SIMaintenance_ReportReagentInfo_result&);
  SIMaintenance_ReportReagentInfo_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SIMaintenance_ReportReagentInfo_result() throw();
   ::EXE_STATE::type success;

  _SIMaintenance_ReportReagentInfo_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SIMaintenance_ReportReagentInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIMaintenance_ReportReagentInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIMaintenance_ReportReagentInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIMaintenance_ReportReagentInfo_presult__isset {
  _SIMaintenance_ReportReagentInfo_presult__isset() : success(false) {}
  bool success :1;
} _SIMaintenance_ReportReagentInfo_presult__isset;

class SIMaintenance_ReportReagentInfo_presult {
 public:


  virtual ~SIMaintenance_ReportReagentInfo_presult() throw();
   ::EXE_STATE::type* success;

  _SIMaintenance_ReportReagentInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SIMaintenance_ReportReagentRemain_args__isset {
  _SIMaintenance_ReportReagentRemain_args__isset() : iReagPosIndex(false), iRemainVolume(false), iOrderNo(false) {}
  bool iReagPosIndex :1;
  bool iRemainVolume :1;
  bool iOrderNo :1;
} _SIMaintenance_ReportReagentRemain_args__isset;

class SIMaintenance_ReportReagentRemain_args {
 public:

  SIMaintenance_ReportReagentRemain_args(const SIMaintenance_ReportReagentRemain_args&);
  SIMaintenance_ReportReagentRemain_args& operator=(const SIMaintenance_ReportReagentRemain_args&);
  SIMaintenance_ReportReagentRemain_args() : iReagPosIndex(0), iRemainVolume(0), iOrderNo(0) {
  }

  virtual ~SIMaintenance_ReportReagentRemain_args() throw();
  int32_t iReagPosIndex;
  int32_t iRemainVolume;
  int32_t iOrderNo;

  _SIMaintenance_ReportReagentRemain_args__isset __isset;

  void __set_iReagPosIndex(const int32_t val);

  void __set_iRemainVolume(const int32_t val);

  void __set_iOrderNo(const int32_t val);

  bool operator == (const SIMaintenance_ReportReagentRemain_args & rhs) const
  {
    if (!(iReagPosIndex == rhs.iReagPosIndex))
      return false;
    if (!(iRemainVolume == rhs.iRemainVolume))
      return false;
    if (!(iOrderNo == rhs.iOrderNo))
      return false;
    return true;
  }
  bool operator != (const SIMaintenance_ReportReagentRemain_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIMaintenance_ReportReagentRemain_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIMaintenance_ReportReagentRemain_pargs {
 public:


  virtual ~SIMaintenance_ReportReagentRemain_pargs() throw();
  const int32_t* iReagPosIndex;
  const int32_t* iRemainVolume;
  const int32_t* iOrderNo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIMaintenance_ReportReagentRemain_result__isset {
  _SIMaintenance_ReportReagentRemain_result__isset() : success(false) {}
  bool success :1;
} _SIMaintenance_ReportReagentRemain_result__isset;

class SIMaintenance_ReportReagentRemain_result {
 public:

  SIMaintenance_ReportReagentRemain_result(const SIMaintenance_ReportReagentRemain_result&);
  SIMaintenance_ReportReagentRemain_result& operator=(const SIMaintenance_ReportReagentRemain_result&);
  SIMaintenance_ReportReagentRemain_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SIMaintenance_ReportReagentRemain_result() throw();
   ::EXE_STATE::type success;

  _SIMaintenance_ReportReagentRemain_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SIMaintenance_ReportReagentRemain_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIMaintenance_ReportReagentRemain_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIMaintenance_ReportReagentRemain_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIMaintenance_ReportReagentRemain_presult__isset {
  _SIMaintenance_ReportReagentRemain_presult__isset() : success(false) {}
  bool success :1;
} _SIMaintenance_ReportReagentRemain_presult__isset;

class SIMaintenance_ReportReagentRemain_presult {
 public:


  virtual ~SIMaintenance_ReportReagentRemain_presult() throw();
   ::EXE_STATE::type* success;

  _SIMaintenance_ReportReagentRemain_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SIMaintenance_ReportPositionCalibtion_args__isset {
  _SIMaintenance_ReportPositionCalibtion_args__isset() : tInfo(false) {}
  bool tInfo :1;
} _SIMaintenance_ReportPositionCalibtion_args__isset;

class SIMaintenance_ReportPositionCalibtion_args {
 public:

  SIMaintenance_ReportPositionCalibtion_args(const SIMaintenance_ReportPositionCalibtion_args&);
  SIMaintenance_ReportPositionCalibtion_args& operator=(const SIMaintenance_ReportPositionCalibtion_args&);
  SIMaintenance_ReportPositionCalibtion_args() {
  }

  virtual ~SIMaintenance_ReportPositionCalibtion_args() throw();
   ::ENGINEER_DEBUG_POS_CALIB_T tInfo;

  _SIMaintenance_ReportPositionCalibtion_args__isset __isset;

  void __set_tInfo(const  ::ENGINEER_DEBUG_POS_CALIB_T& val);

  bool operator == (const SIMaintenance_ReportPositionCalibtion_args & rhs) const
  {
    if (!(tInfo == rhs.tInfo))
      return false;
    return true;
  }
  bool operator != (const SIMaintenance_ReportPositionCalibtion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIMaintenance_ReportPositionCalibtion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIMaintenance_ReportPositionCalibtion_pargs {
 public:


  virtual ~SIMaintenance_ReportPositionCalibtion_pargs() throw();
  const  ::ENGINEER_DEBUG_POS_CALIB_T* tInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIMaintenance_ReportPositionCalibtion_result__isset {
  _SIMaintenance_ReportPositionCalibtion_result__isset() : success(false) {}
  bool success :1;
} _SIMaintenance_ReportPositionCalibtion_result__isset;

class SIMaintenance_ReportPositionCalibtion_result {
 public:

  SIMaintenance_ReportPositionCalibtion_result(const SIMaintenance_ReportPositionCalibtion_result&);
  SIMaintenance_ReportPositionCalibtion_result& operator=(const SIMaintenance_ReportPositionCalibtion_result&);
  SIMaintenance_ReportPositionCalibtion_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SIMaintenance_ReportPositionCalibtion_result() throw();
   ::EXE_STATE::type success;

  _SIMaintenance_ReportPositionCalibtion_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SIMaintenance_ReportPositionCalibtion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIMaintenance_ReportPositionCalibtion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIMaintenance_ReportPositionCalibtion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIMaintenance_ReportPositionCalibtion_presult__isset {
  _SIMaintenance_ReportPositionCalibtion_presult__isset() : success(false) {}
  bool success :1;
} _SIMaintenance_ReportPositionCalibtion_presult__isset;

class SIMaintenance_ReportPositionCalibtion_presult {
 public:


  virtual ~SIMaintenance_ReportPositionCalibtion_presult() throw();
   ::EXE_STATE::type* success;

  _SIMaintenance_ReportPositionCalibtion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SIMaintenance_ReportPositionCalibtion_H_args__isset {
  _SIMaintenance_ReportPositionCalibtion_H_args__isset() : tInfo(false) {}
  bool tInfo :1;
} _SIMaintenance_ReportPositionCalibtion_H_args__isset;

class SIMaintenance_ReportPositionCalibtion_H_args {
 public:

  SIMaintenance_ReportPositionCalibtion_H_args(const SIMaintenance_ReportPositionCalibtion_H_args&);
  SIMaintenance_ReportPositionCalibtion_H_args& operator=(const SIMaintenance_ReportPositionCalibtion_H_args&);
  SIMaintenance_ReportPositionCalibtion_H_args() {
  }

  virtual ~SIMaintenance_ReportPositionCalibtion_H_args() throw();
   ::ENGINEER_DEBUG_MODULE_PARA_T tInfo;

  _SIMaintenance_ReportPositionCalibtion_H_args__isset __isset;

  void __set_tInfo(const  ::ENGINEER_DEBUG_MODULE_PARA_T& val);

  bool operator == (const SIMaintenance_ReportPositionCalibtion_H_args & rhs) const
  {
    if (!(tInfo == rhs.tInfo))
      return false;
    return true;
  }
  bool operator != (const SIMaintenance_ReportPositionCalibtion_H_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIMaintenance_ReportPositionCalibtion_H_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIMaintenance_ReportPositionCalibtion_H_pargs {
 public:


  virtual ~SIMaintenance_ReportPositionCalibtion_H_pargs() throw();
  const  ::ENGINEER_DEBUG_MODULE_PARA_T* tInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIMaintenance_ReportPositionCalibtion_H_result__isset {
  _SIMaintenance_ReportPositionCalibtion_H_result__isset() : success(false) {}
  bool success :1;
} _SIMaintenance_ReportPositionCalibtion_H_result__isset;

class SIMaintenance_ReportPositionCalibtion_H_result {
 public:

  SIMaintenance_ReportPositionCalibtion_H_result(const SIMaintenance_ReportPositionCalibtion_H_result&);
  SIMaintenance_ReportPositionCalibtion_H_result& operator=(const SIMaintenance_ReportPositionCalibtion_H_result&);
  SIMaintenance_ReportPositionCalibtion_H_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SIMaintenance_ReportPositionCalibtion_H_result() throw();
   ::EXE_STATE::type success;

  _SIMaintenance_ReportPositionCalibtion_H_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SIMaintenance_ReportPositionCalibtion_H_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIMaintenance_ReportPositionCalibtion_H_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIMaintenance_ReportPositionCalibtion_H_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIMaintenance_ReportPositionCalibtion_H_presult__isset {
  _SIMaintenance_ReportPositionCalibtion_H_presult__isset() : success(false) {}
  bool success :1;
} _SIMaintenance_ReportPositionCalibtion_H_presult__isset;

class SIMaintenance_ReportPositionCalibtion_H_presult {
 public:


  virtual ~SIMaintenance_ReportPositionCalibtion_H_presult() throw();
   ::EXE_STATE::type* success;

  _SIMaintenance_ReportPositionCalibtion_H_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SIMaintenance_ReportMaintenanceItemResult_args__isset {
  _SIMaintenance_ReportMaintenanceItemResult_args__isset() : tItem(false), bStart(false), bStatus(false) {}
  bool tItem :1;
  bool bStart :1;
  bool bStatus :1;
} _SIMaintenance_ReportMaintenanceItemResult_args__isset;

class SIMaintenance_ReportMaintenanceItemResult_args {
 public:

  SIMaintenance_ReportMaintenanceItemResult_args(const SIMaintenance_ReportMaintenanceItemResult_args&);
  SIMaintenance_ReportMaintenanceItemResult_args& operator=(const SIMaintenance_ReportMaintenanceItemResult_args&);
  SIMaintenance_ReportMaintenanceItemResult_args() : bStart(0), bStatus(0) {
  }

  virtual ~SIMaintenance_ReportMaintenanceItemResult_args() throw();
   ::MAINTENANCE_ITEM_T tItem;
   ::IBOOL bStart;
   ::IBOOL bStatus;

  _SIMaintenance_ReportMaintenanceItemResult_args__isset __isset;

  void __set_tItem(const  ::MAINTENANCE_ITEM_T& val);

  void __set_bStart(const  ::IBOOL val);

  void __set_bStatus(const  ::IBOOL val);

  bool operator == (const SIMaintenance_ReportMaintenanceItemResult_args & rhs) const
  {
    if (!(tItem == rhs.tItem))
      return false;
    if (!(bStart == rhs.bStart))
      return false;
    if (!(bStatus == rhs.bStatus))
      return false;
    return true;
  }
  bool operator != (const SIMaintenance_ReportMaintenanceItemResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIMaintenance_ReportMaintenanceItemResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIMaintenance_ReportMaintenanceItemResult_pargs {
 public:


  virtual ~SIMaintenance_ReportMaintenanceItemResult_pargs() throw();
  const  ::MAINTENANCE_ITEM_T* tItem;
  const  ::IBOOL* bStart;
  const  ::IBOOL* bStatus;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIMaintenance_ReportMaintenanceItemResult_result__isset {
  _SIMaintenance_ReportMaintenanceItemResult_result__isset() : success(false) {}
  bool success :1;
} _SIMaintenance_ReportMaintenanceItemResult_result__isset;

class SIMaintenance_ReportMaintenanceItemResult_result {
 public:

  SIMaintenance_ReportMaintenanceItemResult_result(const SIMaintenance_ReportMaintenanceItemResult_result&);
  SIMaintenance_ReportMaintenanceItemResult_result& operator=(const SIMaintenance_ReportMaintenanceItemResult_result&);
  SIMaintenance_ReportMaintenanceItemResult_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SIMaintenance_ReportMaintenanceItemResult_result() throw();
   ::EXE_STATE::type success;

  _SIMaintenance_ReportMaintenanceItemResult_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SIMaintenance_ReportMaintenanceItemResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIMaintenance_ReportMaintenanceItemResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIMaintenance_ReportMaintenanceItemResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIMaintenance_ReportMaintenanceItemResult_presult__isset {
  _SIMaintenance_ReportMaintenanceItemResult_presult__isset() : success(false) {}
  bool success :1;
} _SIMaintenance_ReportMaintenanceItemResult_presult__isset;

class SIMaintenance_ReportMaintenanceItemResult_presult {
 public:


  virtual ~SIMaintenance_ReportMaintenanceItemResult_presult() throw();
   ::EXE_STATE::type* success;

  _SIMaintenance_ReportMaintenanceItemResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SIMaintenance_ReportMaintenanceRemainTime_args__isset {
  _SIMaintenance_ReportMaintenanceRemainTime_args__isset() : iRemainTime(false) {}
  bool iRemainTime :1;
} _SIMaintenance_ReportMaintenanceRemainTime_args__isset;

class SIMaintenance_ReportMaintenanceRemainTime_args {
 public:

  SIMaintenance_ReportMaintenanceRemainTime_args(const SIMaintenance_ReportMaintenanceRemainTime_args&);
  SIMaintenance_ReportMaintenanceRemainTime_args& operator=(const SIMaintenance_ReportMaintenanceRemainTime_args&);
  SIMaintenance_ReportMaintenanceRemainTime_args() : iRemainTime(0) {
  }

  virtual ~SIMaintenance_ReportMaintenanceRemainTime_args() throw();
  int32_t iRemainTime;

  _SIMaintenance_ReportMaintenanceRemainTime_args__isset __isset;

  void __set_iRemainTime(const int32_t val);

  bool operator == (const SIMaintenance_ReportMaintenanceRemainTime_args & rhs) const
  {
    if (!(iRemainTime == rhs.iRemainTime))
      return false;
    return true;
  }
  bool operator != (const SIMaintenance_ReportMaintenanceRemainTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIMaintenance_ReportMaintenanceRemainTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIMaintenance_ReportMaintenanceRemainTime_pargs {
 public:


  virtual ~SIMaintenance_ReportMaintenanceRemainTime_pargs() throw();
  const int32_t* iRemainTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIMaintenance_ReportMaintenanceRemainTime_result__isset {
  _SIMaintenance_ReportMaintenanceRemainTime_result__isset() : success(false) {}
  bool success :1;
} _SIMaintenance_ReportMaintenanceRemainTime_result__isset;

class SIMaintenance_ReportMaintenanceRemainTime_result {
 public:

  SIMaintenance_ReportMaintenanceRemainTime_result(const SIMaintenance_ReportMaintenanceRemainTime_result&);
  SIMaintenance_ReportMaintenanceRemainTime_result& operator=(const SIMaintenance_ReportMaintenanceRemainTime_result&);
  SIMaintenance_ReportMaintenanceRemainTime_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SIMaintenance_ReportMaintenanceRemainTime_result() throw();
   ::EXE_STATE::type success;

  _SIMaintenance_ReportMaintenanceRemainTime_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SIMaintenance_ReportMaintenanceRemainTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIMaintenance_ReportMaintenanceRemainTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIMaintenance_ReportMaintenanceRemainTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIMaintenance_ReportMaintenanceRemainTime_presult__isset {
  _SIMaintenance_ReportMaintenanceRemainTime_presult__isset() : success(false) {}
  bool success :1;
} _SIMaintenance_ReportMaintenanceRemainTime_presult__isset;

class SIMaintenance_ReportMaintenanceRemainTime_presult {
 public:


  virtual ~SIMaintenance_ReportMaintenanceRemainTime_presult() throw();
   ::EXE_STATE::type* success;

  _SIMaintenance_ReportMaintenanceRemainTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SIMaintenanceClient : virtual public SIMaintenanceIf {
 public:
  SIMaintenanceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SIMaintenanceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::EXE_STATE::type ReportReagentInfo(const  ::REAGENT_SCAN_INFO_T& tReagentScanInfo);
  void send_ReportReagentInfo(const  ::REAGENT_SCAN_INFO_T& tReagentScanInfo);
   ::EXE_STATE::type recv_ReportReagentInfo();
   ::EXE_STATE::type ReportReagentRemain(const int32_t iReagPosIndex, const int32_t iRemainVolume, const int32_t iOrderNo);
  void send_ReportReagentRemain(const int32_t iReagPosIndex, const int32_t iRemainVolume, const int32_t iOrderNo);
   ::EXE_STATE::type recv_ReportReagentRemain();
   ::EXE_STATE::type ReportPositionCalibtion(const  ::ENGINEER_DEBUG_POS_CALIB_T& tInfo);
  void send_ReportPositionCalibtion(const  ::ENGINEER_DEBUG_POS_CALIB_T& tInfo);
   ::EXE_STATE::type recv_ReportPositionCalibtion();
   ::EXE_STATE::type ReportPositionCalibtion_H(const  ::ENGINEER_DEBUG_MODULE_PARA_T& tInfo);
  void send_ReportPositionCalibtion_H(const  ::ENGINEER_DEBUG_MODULE_PARA_T& tInfo);
   ::EXE_STATE::type recv_ReportPositionCalibtion_H();
   ::EXE_STATE::type ReportMaintenanceItemResult(const  ::MAINTENANCE_ITEM_T& tItem, const  ::IBOOL bStart, const  ::IBOOL bStatus);
  void send_ReportMaintenanceItemResult(const  ::MAINTENANCE_ITEM_T& tItem, const  ::IBOOL bStart, const  ::IBOOL bStatus);
   ::EXE_STATE::type recv_ReportMaintenanceItemResult();
   ::EXE_STATE::type ReportMaintenanceRemainTime(const int32_t iRemainTime);
  void send_ReportMaintenanceRemainTime(const int32_t iRemainTime);
   ::EXE_STATE::type recv_ReportMaintenanceRemainTime();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SIMaintenanceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<SIMaintenanceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SIMaintenanceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ReportReagentInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportReagentRemain(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportPositionCalibtion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportPositionCalibtion_H(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportMaintenanceItemResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportMaintenanceRemainTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SIMaintenanceProcessor(::apache::thrift::stdcxx::shared_ptr<SIMaintenanceIf> iface) :
    iface_(iface) {
    processMap_["ReportReagentInfo"] = &SIMaintenanceProcessor::process_ReportReagentInfo;
    processMap_["ReportReagentRemain"] = &SIMaintenanceProcessor::process_ReportReagentRemain;
    processMap_["ReportPositionCalibtion"] = &SIMaintenanceProcessor::process_ReportPositionCalibtion;
    processMap_["ReportPositionCalibtion_H"] = &SIMaintenanceProcessor::process_ReportPositionCalibtion_H;
    processMap_["ReportMaintenanceItemResult"] = &SIMaintenanceProcessor::process_ReportMaintenanceItemResult;
    processMap_["ReportMaintenanceRemainTime"] = &SIMaintenanceProcessor::process_ReportMaintenanceRemainTime;
  }

  virtual ~SIMaintenanceProcessor() {}
};

class SIMaintenanceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SIMaintenanceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< SIMaintenanceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< SIMaintenanceIfFactory > handlerFactory_;
};

class SIMaintenanceMultiface : virtual public SIMaintenanceIf {
 public:
  SIMaintenanceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<SIMaintenanceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SIMaintenanceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<SIMaintenanceIf> > ifaces_;
  SIMaintenanceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<SIMaintenanceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
   ::EXE_STATE::type ReportReagentInfo(const  ::REAGENT_SCAN_INFO_T& tReagentScanInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportReagentInfo(tReagentScanInfo);
    }
    return ifaces_[i]->ReportReagentInfo(tReagentScanInfo);
  }

   ::EXE_STATE::type ReportReagentRemain(const int32_t iReagPosIndex, const int32_t iRemainVolume, const int32_t iOrderNo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportReagentRemain(iReagPosIndex, iRemainVolume, iOrderNo);
    }
    return ifaces_[i]->ReportReagentRemain(iReagPosIndex, iRemainVolume, iOrderNo);
  }

   ::EXE_STATE::type ReportPositionCalibtion(const  ::ENGINEER_DEBUG_POS_CALIB_T& tInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportPositionCalibtion(tInfo);
    }
    return ifaces_[i]->ReportPositionCalibtion(tInfo);
  }

   ::EXE_STATE::type ReportPositionCalibtion_H(const  ::ENGINEER_DEBUG_MODULE_PARA_T& tInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportPositionCalibtion_H(tInfo);
    }
    return ifaces_[i]->ReportPositionCalibtion_H(tInfo);
  }

   ::EXE_STATE::type ReportMaintenanceItemResult(const  ::MAINTENANCE_ITEM_T& tItem, const  ::IBOOL bStart, const  ::IBOOL bStatus) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportMaintenanceItemResult(tItem, bStart, bStatus);
    }
    return ifaces_[i]->ReportMaintenanceItemResult(tItem, bStart, bStatus);
  }

   ::EXE_STATE::type ReportMaintenanceRemainTime(const int32_t iRemainTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportMaintenanceRemainTime(iRemainTime);
    }
    return ifaces_[i]->ReportMaintenanceRemainTime(iRemainTime);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SIMaintenanceConcurrentClient : virtual public SIMaintenanceIf {
 public:
  SIMaintenanceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SIMaintenanceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::EXE_STATE::type ReportReagentInfo(const  ::REAGENT_SCAN_INFO_T& tReagentScanInfo);
  int32_t send_ReportReagentInfo(const  ::REAGENT_SCAN_INFO_T& tReagentScanInfo);
   ::EXE_STATE::type recv_ReportReagentInfo(const int32_t seqid);
   ::EXE_STATE::type ReportReagentRemain(const int32_t iReagPosIndex, const int32_t iRemainVolume, const int32_t iOrderNo);
  int32_t send_ReportReagentRemain(const int32_t iReagPosIndex, const int32_t iRemainVolume, const int32_t iOrderNo);
   ::EXE_STATE::type recv_ReportReagentRemain(const int32_t seqid);
   ::EXE_STATE::type ReportPositionCalibtion(const  ::ENGINEER_DEBUG_POS_CALIB_T& tInfo);
  int32_t send_ReportPositionCalibtion(const  ::ENGINEER_DEBUG_POS_CALIB_T& tInfo);
   ::EXE_STATE::type recv_ReportPositionCalibtion(const int32_t seqid);
   ::EXE_STATE::type ReportPositionCalibtion_H(const  ::ENGINEER_DEBUG_MODULE_PARA_T& tInfo);
  int32_t send_ReportPositionCalibtion_H(const  ::ENGINEER_DEBUG_MODULE_PARA_T& tInfo);
   ::EXE_STATE::type recv_ReportPositionCalibtion_H(const int32_t seqid);
   ::EXE_STATE::type ReportMaintenanceItemResult(const  ::MAINTENANCE_ITEM_T& tItem, const  ::IBOOL bStart, const  ::IBOOL bStatus);
  int32_t send_ReportMaintenanceItemResult(const  ::MAINTENANCE_ITEM_T& tItem, const  ::IBOOL bStart, const  ::IBOOL bStatus);
   ::EXE_STATE::type recv_ReportMaintenanceItemResult(const int32_t seqid);
   ::EXE_STATE::type ReportMaintenanceRemainTime(const int32_t iRemainTime);
  int32_t send_ReportMaintenanceRemainTime(const int32_t iRemainTime);
   ::EXE_STATE::type recv_ReportMaintenanceRemainTime(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
