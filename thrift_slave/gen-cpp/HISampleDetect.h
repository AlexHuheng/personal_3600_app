/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HISampleDetect_H
#define HISampleDetect_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "H2103_Host_Invoke_types.h"

namespace H2103_Host_Invoke {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class HISampleDetectIf {
 public:
  virtual ~HISampleDetectIf() {}
  virtual  ::EXE_STATE::type InstrumentSelfTestAsync(const std::vector< ::REAGENT_MIX_INFO_T> & lstReagMixInfo, const std::vector< ::REAGENT_POS_INFO_T> & lstReagPosInfo, const int32_t iUserData) = 0;
  virtual  ::EXE_STATE::type CreateSampleOrder(const  ::SAMPLE_ORDER_INFO_T& tSampleOrderInfo) = 0;
  virtual  ::EXE_STATE::type UpdateSTATSampleOrder(const int32_t iSampleOrderNo) = 0;
  virtual  ::EXE_STATE::type RemoveSlotOrder(const int32_t iSlotNo) = 0;
  virtual int32_t IsTestFinished() = 0;
  virtual  ::EXE_STATE::type NormalStopAsync(const int32_t iUserData) = 0;
  virtual  ::EXE_STATE::type ConsumablesStopAsync(const int32_t iUserData) = 0;
  virtual  ::EXE_STATE::type SetSampleStopAsync(const int32_t iSampleStop, const int32_t iUserData) = 0;
  virtual void QueryIsOpenReagentBinCoverOrDiluentCover(std::vector<int32_t> & _return) = 0;
  virtual  ::EXE_STATE::type DeleteOrder(const int32_t iOrderNo) = 0;
  virtual  ::EXE_STATE::type UpdateOrder(const int32_t iOrderNo, const int32_t iReagentType, const  ::ORDER_INFO_T& tOrderInfo, const int32_t iSamplePos) = 0;
};

class HISampleDetectIfFactory {
 public:
  typedef HISampleDetectIf Handler;

  virtual ~HISampleDetectIfFactory() {}

  virtual HISampleDetectIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HISampleDetectIf* /* handler */) = 0;
};

class HISampleDetectIfSingletonFactory : virtual public HISampleDetectIfFactory {
 public:
  HISampleDetectIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<HISampleDetectIf>& iface) : iface_(iface) {}
  virtual ~HISampleDetectIfSingletonFactory() {}

  virtual HISampleDetectIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HISampleDetectIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<HISampleDetectIf> iface_;
};

class HISampleDetectNull : virtual public HISampleDetectIf {
 public:
  virtual ~HISampleDetectNull() {}
   ::EXE_STATE::type InstrumentSelfTestAsync(const std::vector< ::REAGENT_MIX_INFO_T> & /* lstReagMixInfo */, const std::vector< ::REAGENT_POS_INFO_T> & /* lstReagPosInfo */, const int32_t /* iUserData */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type CreateSampleOrder(const  ::SAMPLE_ORDER_INFO_T& /* tSampleOrderInfo */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type UpdateSTATSampleOrder(const int32_t /* iSampleOrderNo */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type RemoveSlotOrder(const int32_t /* iSlotNo */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
  int32_t IsTestFinished() {
    int32_t _return = 0;
    return _return;
  }
   ::EXE_STATE::type NormalStopAsync(const int32_t /* iUserData */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ConsumablesStopAsync(const int32_t /* iUserData */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type SetSampleStopAsync(const int32_t /* iSampleStop */, const int32_t /* iUserData */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
  void QueryIsOpenReagentBinCoverOrDiluentCover(std::vector<int32_t> & /* _return */) {
    return;
  }
   ::EXE_STATE::type DeleteOrder(const int32_t /* iOrderNo */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type UpdateOrder(const int32_t /* iOrderNo */, const int32_t /* iReagentType */, const  ::ORDER_INFO_T& /* tOrderInfo */, const int32_t /* iSamplePos */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
};

typedef struct _HISampleDetect_InstrumentSelfTestAsync_args__isset {
  _HISampleDetect_InstrumentSelfTestAsync_args__isset() : lstReagMixInfo(false), lstReagPosInfo(false), iUserData(false) {}
  bool lstReagMixInfo :1;
  bool lstReagPosInfo :1;
  bool iUserData :1;
} _HISampleDetect_InstrumentSelfTestAsync_args__isset;

class HISampleDetect_InstrumentSelfTestAsync_args {
 public:

  HISampleDetect_InstrumentSelfTestAsync_args(const HISampleDetect_InstrumentSelfTestAsync_args&);
  HISampleDetect_InstrumentSelfTestAsync_args& operator=(const HISampleDetect_InstrumentSelfTestAsync_args&);
  HISampleDetect_InstrumentSelfTestAsync_args() : iUserData(0) {
  }

  virtual ~HISampleDetect_InstrumentSelfTestAsync_args() throw();
  std::vector< ::REAGENT_MIX_INFO_T>  lstReagMixInfo;
  std::vector< ::REAGENT_POS_INFO_T>  lstReagPosInfo;
  int32_t iUserData;

  _HISampleDetect_InstrumentSelfTestAsync_args__isset __isset;

  void __set_lstReagMixInfo(const std::vector< ::REAGENT_MIX_INFO_T> & val);

  void __set_lstReagPosInfo(const std::vector< ::REAGENT_POS_INFO_T> & val);

  void __set_iUserData(const int32_t val);

  bool operator == (const HISampleDetect_InstrumentSelfTestAsync_args & rhs) const
  {
    if (!(lstReagMixInfo == rhs.lstReagMixInfo))
      return false;
    if (!(lstReagPosInfo == rhs.lstReagPosInfo))
      return false;
    if (!(iUserData == rhs.iUserData))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_InstrumentSelfTestAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_InstrumentSelfTestAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HISampleDetect_InstrumentSelfTestAsync_pargs {
 public:


  virtual ~HISampleDetect_InstrumentSelfTestAsync_pargs() throw();
  const std::vector< ::REAGENT_MIX_INFO_T> * lstReagMixInfo;
  const std::vector< ::REAGENT_POS_INFO_T> * lstReagPosInfo;
  const int32_t* iUserData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_InstrumentSelfTestAsync_result__isset {
  _HISampleDetect_InstrumentSelfTestAsync_result__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_InstrumentSelfTestAsync_result__isset;

class HISampleDetect_InstrumentSelfTestAsync_result {
 public:

  HISampleDetect_InstrumentSelfTestAsync_result(const HISampleDetect_InstrumentSelfTestAsync_result&);
  HISampleDetect_InstrumentSelfTestAsync_result& operator=(const HISampleDetect_InstrumentSelfTestAsync_result&);
  HISampleDetect_InstrumentSelfTestAsync_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HISampleDetect_InstrumentSelfTestAsync_result() throw();
   ::EXE_STATE::type success;

  _HISampleDetect_InstrumentSelfTestAsync_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HISampleDetect_InstrumentSelfTestAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_InstrumentSelfTestAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_InstrumentSelfTestAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_InstrumentSelfTestAsync_presult__isset {
  _HISampleDetect_InstrumentSelfTestAsync_presult__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_InstrumentSelfTestAsync_presult__isset;

class HISampleDetect_InstrumentSelfTestAsync_presult {
 public:


  virtual ~HISampleDetect_InstrumentSelfTestAsync_presult() throw();
   ::EXE_STATE::type* success;

  _HISampleDetect_InstrumentSelfTestAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HISampleDetect_CreateSampleOrder_args__isset {
  _HISampleDetect_CreateSampleOrder_args__isset() : tSampleOrderInfo(false) {}
  bool tSampleOrderInfo :1;
} _HISampleDetect_CreateSampleOrder_args__isset;

class HISampleDetect_CreateSampleOrder_args {
 public:

  HISampleDetect_CreateSampleOrder_args(const HISampleDetect_CreateSampleOrder_args&);
  HISampleDetect_CreateSampleOrder_args& operator=(const HISampleDetect_CreateSampleOrder_args&);
  HISampleDetect_CreateSampleOrder_args() {
  }

  virtual ~HISampleDetect_CreateSampleOrder_args() throw();
   ::SAMPLE_ORDER_INFO_T tSampleOrderInfo;

  _HISampleDetect_CreateSampleOrder_args__isset __isset;

  void __set_tSampleOrderInfo(const  ::SAMPLE_ORDER_INFO_T& val);

  bool operator == (const HISampleDetect_CreateSampleOrder_args & rhs) const
  {
    if (!(tSampleOrderInfo == rhs.tSampleOrderInfo))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_CreateSampleOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_CreateSampleOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HISampleDetect_CreateSampleOrder_pargs {
 public:


  virtual ~HISampleDetect_CreateSampleOrder_pargs() throw();
  const  ::SAMPLE_ORDER_INFO_T* tSampleOrderInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_CreateSampleOrder_result__isset {
  _HISampleDetect_CreateSampleOrder_result__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_CreateSampleOrder_result__isset;

class HISampleDetect_CreateSampleOrder_result {
 public:

  HISampleDetect_CreateSampleOrder_result(const HISampleDetect_CreateSampleOrder_result&);
  HISampleDetect_CreateSampleOrder_result& operator=(const HISampleDetect_CreateSampleOrder_result&);
  HISampleDetect_CreateSampleOrder_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HISampleDetect_CreateSampleOrder_result() throw();
   ::EXE_STATE::type success;

  _HISampleDetect_CreateSampleOrder_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HISampleDetect_CreateSampleOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_CreateSampleOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_CreateSampleOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_CreateSampleOrder_presult__isset {
  _HISampleDetect_CreateSampleOrder_presult__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_CreateSampleOrder_presult__isset;

class HISampleDetect_CreateSampleOrder_presult {
 public:


  virtual ~HISampleDetect_CreateSampleOrder_presult() throw();
   ::EXE_STATE::type* success;

  _HISampleDetect_CreateSampleOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HISampleDetect_UpdateSTATSampleOrder_args__isset {
  _HISampleDetect_UpdateSTATSampleOrder_args__isset() : iSampleOrderNo(false) {}
  bool iSampleOrderNo :1;
} _HISampleDetect_UpdateSTATSampleOrder_args__isset;

class HISampleDetect_UpdateSTATSampleOrder_args {
 public:

  HISampleDetect_UpdateSTATSampleOrder_args(const HISampleDetect_UpdateSTATSampleOrder_args&);
  HISampleDetect_UpdateSTATSampleOrder_args& operator=(const HISampleDetect_UpdateSTATSampleOrder_args&);
  HISampleDetect_UpdateSTATSampleOrder_args() : iSampleOrderNo(0) {
  }

  virtual ~HISampleDetect_UpdateSTATSampleOrder_args() throw();
  int32_t iSampleOrderNo;

  _HISampleDetect_UpdateSTATSampleOrder_args__isset __isset;

  void __set_iSampleOrderNo(const int32_t val);

  bool operator == (const HISampleDetect_UpdateSTATSampleOrder_args & rhs) const
  {
    if (!(iSampleOrderNo == rhs.iSampleOrderNo))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_UpdateSTATSampleOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_UpdateSTATSampleOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HISampleDetect_UpdateSTATSampleOrder_pargs {
 public:


  virtual ~HISampleDetect_UpdateSTATSampleOrder_pargs() throw();
  const int32_t* iSampleOrderNo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_UpdateSTATSampleOrder_result__isset {
  _HISampleDetect_UpdateSTATSampleOrder_result__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_UpdateSTATSampleOrder_result__isset;

class HISampleDetect_UpdateSTATSampleOrder_result {
 public:

  HISampleDetect_UpdateSTATSampleOrder_result(const HISampleDetect_UpdateSTATSampleOrder_result&);
  HISampleDetect_UpdateSTATSampleOrder_result& operator=(const HISampleDetect_UpdateSTATSampleOrder_result&);
  HISampleDetect_UpdateSTATSampleOrder_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HISampleDetect_UpdateSTATSampleOrder_result() throw();
   ::EXE_STATE::type success;

  _HISampleDetect_UpdateSTATSampleOrder_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HISampleDetect_UpdateSTATSampleOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_UpdateSTATSampleOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_UpdateSTATSampleOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_UpdateSTATSampleOrder_presult__isset {
  _HISampleDetect_UpdateSTATSampleOrder_presult__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_UpdateSTATSampleOrder_presult__isset;

class HISampleDetect_UpdateSTATSampleOrder_presult {
 public:


  virtual ~HISampleDetect_UpdateSTATSampleOrder_presult() throw();
   ::EXE_STATE::type* success;

  _HISampleDetect_UpdateSTATSampleOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HISampleDetect_RemoveSlotOrder_args__isset {
  _HISampleDetect_RemoveSlotOrder_args__isset() : iSlotNo(false) {}
  bool iSlotNo :1;
} _HISampleDetect_RemoveSlotOrder_args__isset;

class HISampleDetect_RemoveSlotOrder_args {
 public:

  HISampleDetect_RemoveSlotOrder_args(const HISampleDetect_RemoveSlotOrder_args&);
  HISampleDetect_RemoveSlotOrder_args& operator=(const HISampleDetect_RemoveSlotOrder_args&);
  HISampleDetect_RemoveSlotOrder_args() : iSlotNo(0) {
  }

  virtual ~HISampleDetect_RemoveSlotOrder_args() throw();
  int32_t iSlotNo;

  _HISampleDetect_RemoveSlotOrder_args__isset __isset;

  void __set_iSlotNo(const int32_t val);

  bool operator == (const HISampleDetect_RemoveSlotOrder_args & rhs) const
  {
    if (!(iSlotNo == rhs.iSlotNo))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_RemoveSlotOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_RemoveSlotOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HISampleDetect_RemoveSlotOrder_pargs {
 public:


  virtual ~HISampleDetect_RemoveSlotOrder_pargs() throw();
  const int32_t* iSlotNo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_RemoveSlotOrder_result__isset {
  _HISampleDetect_RemoveSlotOrder_result__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_RemoveSlotOrder_result__isset;

class HISampleDetect_RemoveSlotOrder_result {
 public:

  HISampleDetect_RemoveSlotOrder_result(const HISampleDetect_RemoveSlotOrder_result&);
  HISampleDetect_RemoveSlotOrder_result& operator=(const HISampleDetect_RemoveSlotOrder_result&);
  HISampleDetect_RemoveSlotOrder_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HISampleDetect_RemoveSlotOrder_result() throw();
   ::EXE_STATE::type success;

  _HISampleDetect_RemoveSlotOrder_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HISampleDetect_RemoveSlotOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_RemoveSlotOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_RemoveSlotOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_RemoveSlotOrder_presult__isset {
  _HISampleDetect_RemoveSlotOrder_presult__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_RemoveSlotOrder_presult__isset;

class HISampleDetect_RemoveSlotOrder_presult {
 public:


  virtual ~HISampleDetect_RemoveSlotOrder_presult() throw();
   ::EXE_STATE::type* success;

  _HISampleDetect_RemoveSlotOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HISampleDetect_IsTestFinished_args {
 public:

  HISampleDetect_IsTestFinished_args(const HISampleDetect_IsTestFinished_args&);
  HISampleDetect_IsTestFinished_args& operator=(const HISampleDetect_IsTestFinished_args&);
  HISampleDetect_IsTestFinished_args() {
  }

  virtual ~HISampleDetect_IsTestFinished_args() throw();

  bool operator == (const HISampleDetect_IsTestFinished_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HISampleDetect_IsTestFinished_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_IsTestFinished_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HISampleDetect_IsTestFinished_pargs {
 public:


  virtual ~HISampleDetect_IsTestFinished_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_IsTestFinished_result__isset {
  _HISampleDetect_IsTestFinished_result__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_IsTestFinished_result__isset;

class HISampleDetect_IsTestFinished_result {
 public:

  HISampleDetect_IsTestFinished_result(const HISampleDetect_IsTestFinished_result&);
  HISampleDetect_IsTestFinished_result& operator=(const HISampleDetect_IsTestFinished_result&);
  HISampleDetect_IsTestFinished_result() : success(0) {
  }

  virtual ~HISampleDetect_IsTestFinished_result() throw();
  int32_t success;

  _HISampleDetect_IsTestFinished_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const HISampleDetect_IsTestFinished_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_IsTestFinished_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_IsTestFinished_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_IsTestFinished_presult__isset {
  _HISampleDetect_IsTestFinished_presult__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_IsTestFinished_presult__isset;

class HISampleDetect_IsTestFinished_presult {
 public:


  virtual ~HISampleDetect_IsTestFinished_presult() throw();
  int32_t* success;

  _HISampleDetect_IsTestFinished_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HISampleDetect_NormalStopAsync_args__isset {
  _HISampleDetect_NormalStopAsync_args__isset() : iUserData(false) {}
  bool iUserData :1;
} _HISampleDetect_NormalStopAsync_args__isset;

class HISampleDetect_NormalStopAsync_args {
 public:

  HISampleDetect_NormalStopAsync_args(const HISampleDetect_NormalStopAsync_args&);
  HISampleDetect_NormalStopAsync_args& operator=(const HISampleDetect_NormalStopAsync_args&);
  HISampleDetect_NormalStopAsync_args() : iUserData(0) {
  }

  virtual ~HISampleDetect_NormalStopAsync_args() throw();
  int32_t iUserData;

  _HISampleDetect_NormalStopAsync_args__isset __isset;

  void __set_iUserData(const int32_t val);

  bool operator == (const HISampleDetect_NormalStopAsync_args & rhs) const
  {
    if (!(iUserData == rhs.iUserData))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_NormalStopAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_NormalStopAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HISampleDetect_NormalStopAsync_pargs {
 public:


  virtual ~HISampleDetect_NormalStopAsync_pargs() throw();
  const int32_t* iUserData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_NormalStopAsync_result__isset {
  _HISampleDetect_NormalStopAsync_result__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_NormalStopAsync_result__isset;

class HISampleDetect_NormalStopAsync_result {
 public:

  HISampleDetect_NormalStopAsync_result(const HISampleDetect_NormalStopAsync_result&);
  HISampleDetect_NormalStopAsync_result& operator=(const HISampleDetect_NormalStopAsync_result&);
  HISampleDetect_NormalStopAsync_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HISampleDetect_NormalStopAsync_result() throw();
   ::EXE_STATE::type success;

  _HISampleDetect_NormalStopAsync_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HISampleDetect_NormalStopAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_NormalStopAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_NormalStopAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_NormalStopAsync_presult__isset {
  _HISampleDetect_NormalStopAsync_presult__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_NormalStopAsync_presult__isset;

class HISampleDetect_NormalStopAsync_presult {
 public:


  virtual ~HISampleDetect_NormalStopAsync_presult() throw();
   ::EXE_STATE::type* success;

  _HISampleDetect_NormalStopAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HISampleDetect_ConsumablesStopAsync_args__isset {
  _HISampleDetect_ConsumablesStopAsync_args__isset() : iUserData(false) {}
  bool iUserData :1;
} _HISampleDetect_ConsumablesStopAsync_args__isset;

class HISampleDetect_ConsumablesStopAsync_args {
 public:

  HISampleDetect_ConsumablesStopAsync_args(const HISampleDetect_ConsumablesStopAsync_args&);
  HISampleDetect_ConsumablesStopAsync_args& operator=(const HISampleDetect_ConsumablesStopAsync_args&);
  HISampleDetect_ConsumablesStopAsync_args() : iUserData(0) {
  }

  virtual ~HISampleDetect_ConsumablesStopAsync_args() throw();
  int32_t iUserData;

  _HISampleDetect_ConsumablesStopAsync_args__isset __isset;

  void __set_iUserData(const int32_t val);

  bool operator == (const HISampleDetect_ConsumablesStopAsync_args & rhs) const
  {
    if (!(iUserData == rhs.iUserData))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_ConsumablesStopAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_ConsumablesStopAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HISampleDetect_ConsumablesStopAsync_pargs {
 public:


  virtual ~HISampleDetect_ConsumablesStopAsync_pargs() throw();
  const int32_t* iUserData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_ConsumablesStopAsync_result__isset {
  _HISampleDetect_ConsumablesStopAsync_result__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_ConsumablesStopAsync_result__isset;

class HISampleDetect_ConsumablesStopAsync_result {
 public:

  HISampleDetect_ConsumablesStopAsync_result(const HISampleDetect_ConsumablesStopAsync_result&);
  HISampleDetect_ConsumablesStopAsync_result& operator=(const HISampleDetect_ConsumablesStopAsync_result&);
  HISampleDetect_ConsumablesStopAsync_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HISampleDetect_ConsumablesStopAsync_result() throw();
   ::EXE_STATE::type success;

  _HISampleDetect_ConsumablesStopAsync_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HISampleDetect_ConsumablesStopAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_ConsumablesStopAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_ConsumablesStopAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_ConsumablesStopAsync_presult__isset {
  _HISampleDetect_ConsumablesStopAsync_presult__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_ConsumablesStopAsync_presult__isset;

class HISampleDetect_ConsumablesStopAsync_presult {
 public:


  virtual ~HISampleDetect_ConsumablesStopAsync_presult() throw();
   ::EXE_STATE::type* success;

  _HISampleDetect_ConsumablesStopAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HISampleDetect_SetSampleStopAsync_args__isset {
  _HISampleDetect_SetSampleStopAsync_args__isset() : iSampleStop(false), iUserData(false) {}
  bool iSampleStop :1;
  bool iUserData :1;
} _HISampleDetect_SetSampleStopAsync_args__isset;

class HISampleDetect_SetSampleStopAsync_args {
 public:

  HISampleDetect_SetSampleStopAsync_args(const HISampleDetect_SetSampleStopAsync_args&);
  HISampleDetect_SetSampleStopAsync_args& operator=(const HISampleDetect_SetSampleStopAsync_args&);
  HISampleDetect_SetSampleStopAsync_args() : iSampleStop(0), iUserData(0) {
  }

  virtual ~HISampleDetect_SetSampleStopAsync_args() throw();
  int32_t iSampleStop;
  int32_t iUserData;

  _HISampleDetect_SetSampleStopAsync_args__isset __isset;

  void __set_iSampleStop(const int32_t val);

  void __set_iUserData(const int32_t val);

  bool operator == (const HISampleDetect_SetSampleStopAsync_args & rhs) const
  {
    if (!(iSampleStop == rhs.iSampleStop))
      return false;
    if (!(iUserData == rhs.iUserData))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_SetSampleStopAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_SetSampleStopAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HISampleDetect_SetSampleStopAsync_pargs {
 public:


  virtual ~HISampleDetect_SetSampleStopAsync_pargs() throw();
  const int32_t* iSampleStop;
  const int32_t* iUserData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_SetSampleStopAsync_result__isset {
  _HISampleDetect_SetSampleStopAsync_result__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_SetSampleStopAsync_result__isset;

class HISampleDetect_SetSampleStopAsync_result {
 public:

  HISampleDetect_SetSampleStopAsync_result(const HISampleDetect_SetSampleStopAsync_result&);
  HISampleDetect_SetSampleStopAsync_result& operator=(const HISampleDetect_SetSampleStopAsync_result&);
  HISampleDetect_SetSampleStopAsync_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HISampleDetect_SetSampleStopAsync_result() throw();
   ::EXE_STATE::type success;

  _HISampleDetect_SetSampleStopAsync_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HISampleDetect_SetSampleStopAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_SetSampleStopAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_SetSampleStopAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_SetSampleStopAsync_presult__isset {
  _HISampleDetect_SetSampleStopAsync_presult__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_SetSampleStopAsync_presult__isset;

class HISampleDetect_SetSampleStopAsync_presult {
 public:


  virtual ~HISampleDetect_SetSampleStopAsync_presult() throw();
   ::EXE_STATE::type* success;

  _HISampleDetect_SetSampleStopAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_args {
 public:

  HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_args(const HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_args&);
  HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_args& operator=(const HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_args&);
  HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_args() {
  }

  virtual ~HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_args() throw();

  bool operator == (const HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_pargs {
 public:


  virtual ~HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_result__isset {
  _HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_result__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_result__isset;

class HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_result {
 public:

  HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_result(const HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_result&);
  HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_result& operator=(const HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_result&);
  HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_result() {
  }

  virtual ~HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_result() throw();
  std::vector<int32_t>  success;

  _HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_presult__isset {
  _HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_presult__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_presult__isset;

class HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_presult {
 public:


  virtual ~HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_presult() throw();
  std::vector<int32_t> * success;

  _HISampleDetect_QueryIsOpenReagentBinCoverOrDiluentCover_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HISampleDetect_DeleteOrder_args__isset {
  _HISampleDetect_DeleteOrder_args__isset() : iOrderNo(false) {}
  bool iOrderNo :1;
} _HISampleDetect_DeleteOrder_args__isset;

class HISampleDetect_DeleteOrder_args {
 public:

  HISampleDetect_DeleteOrder_args(const HISampleDetect_DeleteOrder_args&);
  HISampleDetect_DeleteOrder_args& operator=(const HISampleDetect_DeleteOrder_args&);
  HISampleDetect_DeleteOrder_args() : iOrderNo(0) {
  }

  virtual ~HISampleDetect_DeleteOrder_args() throw();
  int32_t iOrderNo;

  _HISampleDetect_DeleteOrder_args__isset __isset;

  void __set_iOrderNo(const int32_t val);

  bool operator == (const HISampleDetect_DeleteOrder_args & rhs) const
  {
    if (!(iOrderNo == rhs.iOrderNo))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_DeleteOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_DeleteOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HISampleDetect_DeleteOrder_pargs {
 public:


  virtual ~HISampleDetect_DeleteOrder_pargs() throw();
  const int32_t* iOrderNo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_DeleteOrder_result__isset {
  _HISampleDetect_DeleteOrder_result__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_DeleteOrder_result__isset;

class HISampleDetect_DeleteOrder_result {
 public:

  HISampleDetect_DeleteOrder_result(const HISampleDetect_DeleteOrder_result&);
  HISampleDetect_DeleteOrder_result& operator=(const HISampleDetect_DeleteOrder_result&);
  HISampleDetect_DeleteOrder_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HISampleDetect_DeleteOrder_result() throw();
   ::EXE_STATE::type success;

  _HISampleDetect_DeleteOrder_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HISampleDetect_DeleteOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_DeleteOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_DeleteOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_DeleteOrder_presult__isset {
  _HISampleDetect_DeleteOrder_presult__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_DeleteOrder_presult__isset;

class HISampleDetect_DeleteOrder_presult {
 public:


  virtual ~HISampleDetect_DeleteOrder_presult() throw();
   ::EXE_STATE::type* success;

  _HISampleDetect_DeleteOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _HISampleDetect_UpdateOrder_args__isset {
  _HISampleDetect_UpdateOrder_args__isset() : iOrderNo(false), iReagentType(false), tOrderInfo(false), iSamplePos(false) {}
  bool iOrderNo :1;
  bool iReagentType :1;
  bool tOrderInfo :1;
  bool iSamplePos :1;
} _HISampleDetect_UpdateOrder_args__isset;

class HISampleDetect_UpdateOrder_args {
 public:

  HISampleDetect_UpdateOrder_args(const HISampleDetect_UpdateOrder_args&);
  HISampleDetect_UpdateOrder_args& operator=(const HISampleDetect_UpdateOrder_args&);
  HISampleDetect_UpdateOrder_args() : iOrderNo(0), iReagentType(0), iSamplePos(0) {
  }

  virtual ~HISampleDetect_UpdateOrder_args() throw();
  int32_t iOrderNo;
  int32_t iReagentType;
   ::ORDER_INFO_T tOrderInfo;
  int32_t iSamplePos;

  _HISampleDetect_UpdateOrder_args__isset __isset;

  void __set_iOrderNo(const int32_t val);

  void __set_iReagentType(const int32_t val);

  void __set_tOrderInfo(const  ::ORDER_INFO_T& val);

  void __set_iSamplePos(const int32_t val);

  bool operator == (const HISampleDetect_UpdateOrder_args & rhs) const
  {
    if (!(iOrderNo == rhs.iOrderNo))
      return false;
    if (!(iReagentType == rhs.iReagentType))
      return false;
    if (!(tOrderInfo == rhs.tOrderInfo))
      return false;
    if (!(iSamplePos == rhs.iSamplePos))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_UpdateOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_UpdateOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HISampleDetect_UpdateOrder_pargs {
 public:


  virtual ~HISampleDetect_UpdateOrder_pargs() throw();
  const int32_t* iOrderNo;
  const int32_t* iReagentType;
  const  ::ORDER_INFO_T* tOrderInfo;
  const int32_t* iSamplePos;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_UpdateOrder_result__isset {
  _HISampleDetect_UpdateOrder_result__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_UpdateOrder_result__isset;

class HISampleDetect_UpdateOrder_result {
 public:

  HISampleDetect_UpdateOrder_result(const HISampleDetect_UpdateOrder_result&);
  HISampleDetect_UpdateOrder_result& operator=(const HISampleDetect_UpdateOrder_result&);
  HISampleDetect_UpdateOrder_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~HISampleDetect_UpdateOrder_result() throw();
   ::EXE_STATE::type success;

  _HISampleDetect_UpdateOrder_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const HISampleDetect_UpdateOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HISampleDetect_UpdateOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HISampleDetect_UpdateOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HISampleDetect_UpdateOrder_presult__isset {
  _HISampleDetect_UpdateOrder_presult__isset() : success(false) {}
  bool success :1;
} _HISampleDetect_UpdateOrder_presult__isset;

class HISampleDetect_UpdateOrder_presult {
 public:


  virtual ~HISampleDetect_UpdateOrder_presult() throw();
   ::EXE_STATE::type* success;

  _HISampleDetect_UpdateOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HISampleDetectClient : virtual public HISampleDetectIf {
 public:
  HISampleDetectClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HISampleDetectClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::EXE_STATE::type InstrumentSelfTestAsync(const std::vector< ::REAGENT_MIX_INFO_T> & lstReagMixInfo, const std::vector< ::REAGENT_POS_INFO_T> & lstReagPosInfo, const int32_t iUserData);
  void send_InstrumentSelfTestAsync(const std::vector< ::REAGENT_MIX_INFO_T> & lstReagMixInfo, const std::vector< ::REAGENT_POS_INFO_T> & lstReagPosInfo, const int32_t iUserData);
   ::EXE_STATE::type recv_InstrumentSelfTestAsync();
   ::EXE_STATE::type CreateSampleOrder(const  ::SAMPLE_ORDER_INFO_T& tSampleOrderInfo);
  void send_CreateSampleOrder(const  ::SAMPLE_ORDER_INFO_T& tSampleOrderInfo);
   ::EXE_STATE::type recv_CreateSampleOrder();
   ::EXE_STATE::type UpdateSTATSampleOrder(const int32_t iSampleOrderNo);
  void send_UpdateSTATSampleOrder(const int32_t iSampleOrderNo);
   ::EXE_STATE::type recv_UpdateSTATSampleOrder();
   ::EXE_STATE::type RemoveSlotOrder(const int32_t iSlotNo);
  void send_RemoveSlotOrder(const int32_t iSlotNo);
   ::EXE_STATE::type recv_RemoveSlotOrder();
  int32_t IsTestFinished();
  void send_IsTestFinished();
  int32_t recv_IsTestFinished();
   ::EXE_STATE::type NormalStopAsync(const int32_t iUserData);
  void send_NormalStopAsync(const int32_t iUserData);
   ::EXE_STATE::type recv_NormalStopAsync();
   ::EXE_STATE::type ConsumablesStopAsync(const int32_t iUserData);
  void send_ConsumablesStopAsync(const int32_t iUserData);
   ::EXE_STATE::type recv_ConsumablesStopAsync();
   ::EXE_STATE::type SetSampleStopAsync(const int32_t iSampleStop, const int32_t iUserData);
  void send_SetSampleStopAsync(const int32_t iSampleStop, const int32_t iUserData);
   ::EXE_STATE::type recv_SetSampleStopAsync();
  void QueryIsOpenReagentBinCoverOrDiluentCover(std::vector<int32_t> & _return);
  void send_QueryIsOpenReagentBinCoverOrDiluentCover();
  void recv_QueryIsOpenReagentBinCoverOrDiluentCover(std::vector<int32_t> & _return);
   ::EXE_STATE::type DeleteOrder(const int32_t iOrderNo);
  void send_DeleteOrder(const int32_t iOrderNo);
   ::EXE_STATE::type recv_DeleteOrder();
   ::EXE_STATE::type UpdateOrder(const int32_t iOrderNo, const int32_t iReagentType, const  ::ORDER_INFO_T& tOrderInfo, const int32_t iSamplePos);
  void send_UpdateOrder(const int32_t iOrderNo, const int32_t iReagentType, const  ::ORDER_INFO_T& tOrderInfo, const int32_t iSamplePos);
   ::EXE_STATE::type recv_UpdateOrder();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HISampleDetectProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<HISampleDetectIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HISampleDetectProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_InstrumentSelfTestAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateSampleOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateSTATSampleOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveSlotOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsTestFinished(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_NormalStopAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ConsumablesStopAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetSampleStopAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryIsOpenReagentBinCoverOrDiluentCover(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DeleteOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HISampleDetectProcessor(::apache::thrift::stdcxx::shared_ptr<HISampleDetectIf> iface) :
    iface_(iface) {
    processMap_["InstrumentSelfTestAsync"] = &HISampleDetectProcessor::process_InstrumentSelfTestAsync;
    processMap_["CreateSampleOrder"] = &HISampleDetectProcessor::process_CreateSampleOrder;
    processMap_["UpdateSTATSampleOrder"] = &HISampleDetectProcessor::process_UpdateSTATSampleOrder;
    processMap_["RemoveSlotOrder"] = &HISampleDetectProcessor::process_RemoveSlotOrder;
    processMap_["IsTestFinished"] = &HISampleDetectProcessor::process_IsTestFinished;
    processMap_["NormalStopAsync"] = &HISampleDetectProcessor::process_NormalStopAsync;
    processMap_["ConsumablesStopAsync"] = &HISampleDetectProcessor::process_ConsumablesStopAsync;
    processMap_["SetSampleStopAsync"] = &HISampleDetectProcessor::process_SetSampleStopAsync;
    processMap_["QueryIsOpenReagentBinCoverOrDiluentCover"] = &HISampleDetectProcessor::process_QueryIsOpenReagentBinCoverOrDiluentCover;
    processMap_["DeleteOrder"] = &HISampleDetectProcessor::process_DeleteOrder;
    processMap_["UpdateOrder"] = &HISampleDetectProcessor::process_UpdateOrder;
  }

  virtual ~HISampleDetectProcessor() {}
};

class HISampleDetectProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HISampleDetectProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< HISampleDetectIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< HISampleDetectIfFactory > handlerFactory_;
};

class HISampleDetectMultiface : virtual public HISampleDetectIf {
 public:
  HISampleDetectMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<HISampleDetectIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HISampleDetectMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<HISampleDetectIf> > ifaces_;
  HISampleDetectMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<HISampleDetectIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
   ::EXE_STATE::type InstrumentSelfTestAsync(const std::vector< ::REAGENT_MIX_INFO_T> & lstReagMixInfo, const std::vector< ::REAGENT_POS_INFO_T> & lstReagPosInfo, const int32_t iUserData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->InstrumentSelfTestAsync(lstReagMixInfo, lstReagPosInfo, iUserData);
    }
    return ifaces_[i]->InstrumentSelfTestAsync(lstReagMixInfo, lstReagPosInfo, iUserData);
  }

   ::EXE_STATE::type CreateSampleOrder(const  ::SAMPLE_ORDER_INFO_T& tSampleOrderInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateSampleOrder(tSampleOrderInfo);
    }
    return ifaces_[i]->CreateSampleOrder(tSampleOrderInfo);
  }

   ::EXE_STATE::type UpdateSTATSampleOrder(const int32_t iSampleOrderNo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateSTATSampleOrder(iSampleOrderNo);
    }
    return ifaces_[i]->UpdateSTATSampleOrder(iSampleOrderNo);
  }

   ::EXE_STATE::type RemoveSlotOrder(const int32_t iSlotNo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RemoveSlotOrder(iSlotNo);
    }
    return ifaces_[i]->RemoveSlotOrder(iSlotNo);
  }

  int32_t IsTestFinished() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->IsTestFinished();
    }
    return ifaces_[i]->IsTestFinished();
  }

   ::EXE_STATE::type NormalStopAsync(const int32_t iUserData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->NormalStopAsync(iUserData);
    }
    return ifaces_[i]->NormalStopAsync(iUserData);
  }

   ::EXE_STATE::type ConsumablesStopAsync(const int32_t iUserData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ConsumablesStopAsync(iUserData);
    }
    return ifaces_[i]->ConsumablesStopAsync(iUserData);
  }

   ::EXE_STATE::type SetSampleStopAsync(const int32_t iSampleStop, const int32_t iUserData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetSampleStopAsync(iSampleStop, iUserData);
    }
    return ifaces_[i]->SetSampleStopAsync(iSampleStop, iUserData);
  }

  void QueryIsOpenReagentBinCoverOrDiluentCover(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryIsOpenReagentBinCoverOrDiluentCover(_return);
    }
    ifaces_[i]->QueryIsOpenReagentBinCoverOrDiluentCover(_return);
    return;
  }

   ::EXE_STATE::type DeleteOrder(const int32_t iOrderNo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DeleteOrder(iOrderNo);
    }
    return ifaces_[i]->DeleteOrder(iOrderNo);
  }

   ::EXE_STATE::type UpdateOrder(const int32_t iOrderNo, const int32_t iReagentType, const  ::ORDER_INFO_T& tOrderInfo, const int32_t iSamplePos) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateOrder(iOrderNo, iReagentType, tOrderInfo, iSamplePos);
    }
    return ifaces_[i]->UpdateOrder(iOrderNo, iReagentType, tOrderInfo, iSamplePos);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class HISampleDetectConcurrentClient : virtual public HISampleDetectIf {
 public:
  HISampleDetectConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HISampleDetectConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::EXE_STATE::type InstrumentSelfTestAsync(const std::vector< ::REAGENT_MIX_INFO_T> & lstReagMixInfo, const std::vector< ::REAGENT_POS_INFO_T> & lstReagPosInfo, const int32_t iUserData);
  int32_t send_InstrumentSelfTestAsync(const std::vector< ::REAGENT_MIX_INFO_T> & lstReagMixInfo, const std::vector< ::REAGENT_POS_INFO_T> & lstReagPosInfo, const int32_t iUserData);
   ::EXE_STATE::type recv_InstrumentSelfTestAsync(const int32_t seqid);
   ::EXE_STATE::type CreateSampleOrder(const  ::SAMPLE_ORDER_INFO_T& tSampleOrderInfo);
  int32_t send_CreateSampleOrder(const  ::SAMPLE_ORDER_INFO_T& tSampleOrderInfo);
   ::EXE_STATE::type recv_CreateSampleOrder(const int32_t seqid);
   ::EXE_STATE::type UpdateSTATSampleOrder(const int32_t iSampleOrderNo);
  int32_t send_UpdateSTATSampleOrder(const int32_t iSampleOrderNo);
   ::EXE_STATE::type recv_UpdateSTATSampleOrder(const int32_t seqid);
   ::EXE_STATE::type RemoveSlotOrder(const int32_t iSlotNo);
  int32_t send_RemoveSlotOrder(const int32_t iSlotNo);
   ::EXE_STATE::type recv_RemoveSlotOrder(const int32_t seqid);
  int32_t IsTestFinished();
  int32_t send_IsTestFinished();
  int32_t recv_IsTestFinished(const int32_t seqid);
   ::EXE_STATE::type NormalStopAsync(const int32_t iUserData);
  int32_t send_NormalStopAsync(const int32_t iUserData);
   ::EXE_STATE::type recv_NormalStopAsync(const int32_t seqid);
   ::EXE_STATE::type ConsumablesStopAsync(const int32_t iUserData);
  int32_t send_ConsumablesStopAsync(const int32_t iUserData);
   ::EXE_STATE::type recv_ConsumablesStopAsync(const int32_t seqid);
   ::EXE_STATE::type SetSampleStopAsync(const int32_t iSampleStop, const int32_t iUserData);
  int32_t send_SetSampleStopAsync(const int32_t iSampleStop, const int32_t iUserData);
   ::EXE_STATE::type recv_SetSampleStopAsync(const int32_t seqid);
  void QueryIsOpenReagentBinCoverOrDiluentCover(std::vector<int32_t> & _return);
  int32_t send_QueryIsOpenReagentBinCoverOrDiluentCover();
  void recv_QueryIsOpenReagentBinCoverOrDiluentCover(std::vector<int32_t> & _return, const int32_t seqid);
   ::EXE_STATE::type DeleteOrder(const int32_t iOrderNo);
  int32_t send_DeleteOrder(const int32_t iOrderNo);
   ::EXE_STATE::type recv_DeleteOrder(const int32_t seqid);
   ::EXE_STATE::type UpdateOrder(const int32_t iOrderNo, const int32_t iReagentType, const  ::ORDER_INFO_T& tOrderInfo, const int32_t iSamplePos);
  int32_t send_UpdateOrder(const int32_t iOrderNo, const int32_t iReagentType, const  ::ORDER_INFO_T& tOrderInfo, const int32_t iSamplePos);
   ::EXE_STATE::type recv_UpdateOrder(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
