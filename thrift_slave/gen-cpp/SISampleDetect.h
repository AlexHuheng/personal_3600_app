/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SISampleDetect_H
#define SISampleDetect_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "H2103_Slave_Invoke_types.h"

namespace H2103_Slave_Invoke {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SISampleDetectIf {
 public:
  virtual ~SISampleDetectIf() {}
  virtual  ::EXE_STATE::type ReportPullRack(const int32_t iSlotNo) = 0;
  virtual  ::EXE_STATE::type ReportPushRackError(const int32_t iSlotNo, const int32_t iErrorCode) = 0;
  virtual  ::EXE_STATE::type ReportSampleRack(const std::vector< ::SAMPLE_TUBE_INFO_T> & lstTubeInfos) = 0;
  virtual  ::EXE_STATE::type ReportSampleQuality(const int32_t iSampleOrderNo, const  ::SAMPLE_QUALITY_T& tSampleQuality) = 0;
  virtual  ::EXE_STATE::type ReportOrderState(const int32_t iOrderNo, const  ::ORDER_STATE::type state, const int32_t iIncruOrDetectPos) = 0;
  virtual void QuerySpareReagent( ::REAGENT_INFO_T& _return, const int32_t iOrderNo, const  ::REAGENT_INFO_T& reagentInfo) = 0;
  virtual  ::EXE_STATE::type ReportAlarmMessage(const int32_t iOrderNo, const std::string& strAlarmCode) = 0;
  virtual  ::EXE_STATE::type ReportOrderResult(const int32_t iOrderNo, const  ::RESULT_INFO_T& tResultInfo) = 0;
  virtual  ::EXE_STATE::type ReportTestRemainTime(const int32_t iRemainTime) = 0;
};

class SISampleDetectIfFactory {
 public:
  typedef SISampleDetectIf Handler;

  virtual ~SISampleDetectIfFactory() {}

  virtual SISampleDetectIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SISampleDetectIf* /* handler */) = 0;
};

class SISampleDetectIfSingletonFactory : virtual public SISampleDetectIfFactory {
 public:
  SISampleDetectIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<SISampleDetectIf>& iface) : iface_(iface) {}
  virtual ~SISampleDetectIfSingletonFactory() {}

  virtual SISampleDetectIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SISampleDetectIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<SISampleDetectIf> iface_;
};

class SISampleDetectNull : virtual public SISampleDetectIf {
 public:
  virtual ~SISampleDetectNull() {}
   ::EXE_STATE::type ReportPullRack(const int32_t /* iSlotNo */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportPushRackError(const int32_t /* iSlotNo */, const int32_t /* iErrorCode */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportSampleRack(const std::vector< ::SAMPLE_TUBE_INFO_T> & /* lstTubeInfos */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportSampleQuality(const int32_t /* iSampleOrderNo */, const  ::SAMPLE_QUALITY_T& /* tSampleQuality */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportOrderState(const int32_t /* iOrderNo */, const  ::ORDER_STATE::type /* state */, const int32_t /* iIncruOrDetectPos */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
  void QuerySpareReagent( ::REAGENT_INFO_T& /* _return */, const int32_t /* iOrderNo */, const  ::REAGENT_INFO_T& /* reagentInfo */) {
    return;
  }
   ::EXE_STATE::type ReportAlarmMessage(const int32_t /* iOrderNo */, const std::string& /* strAlarmCode */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportOrderResult(const int32_t /* iOrderNo */, const  ::RESULT_INFO_T& /* tResultInfo */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportTestRemainTime(const int32_t /* iRemainTime */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
};

typedef struct _SISampleDetect_ReportPullRack_args__isset {
  _SISampleDetect_ReportPullRack_args__isset() : iSlotNo(false) {}
  bool iSlotNo :1;
} _SISampleDetect_ReportPullRack_args__isset;

class SISampleDetect_ReportPullRack_args {
 public:

  SISampleDetect_ReportPullRack_args(const SISampleDetect_ReportPullRack_args&);
  SISampleDetect_ReportPullRack_args& operator=(const SISampleDetect_ReportPullRack_args&);
  SISampleDetect_ReportPullRack_args() : iSlotNo(0) {
  }

  virtual ~SISampleDetect_ReportPullRack_args() throw();
  int32_t iSlotNo;

  _SISampleDetect_ReportPullRack_args__isset __isset;

  void __set_iSlotNo(const int32_t val);

  bool operator == (const SISampleDetect_ReportPullRack_args & rhs) const
  {
    if (!(iSlotNo == rhs.iSlotNo))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportPullRack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportPullRack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SISampleDetect_ReportPullRack_pargs {
 public:


  virtual ~SISampleDetect_ReportPullRack_pargs() throw();
  const int32_t* iSlotNo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportPullRack_result__isset {
  _SISampleDetect_ReportPullRack_result__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportPullRack_result__isset;

class SISampleDetect_ReportPullRack_result {
 public:

  SISampleDetect_ReportPullRack_result(const SISampleDetect_ReportPullRack_result&);
  SISampleDetect_ReportPullRack_result& operator=(const SISampleDetect_ReportPullRack_result&);
  SISampleDetect_ReportPullRack_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SISampleDetect_ReportPullRack_result() throw();
   ::EXE_STATE::type success;

  _SISampleDetect_ReportPullRack_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SISampleDetect_ReportPullRack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportPullRack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportPullRack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportPullRack_presult__isset {
  _SISampleDetect_ReportPullRack_presult__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportPullRack_presult__isset;

class SISampleDetect_ReportPullRack_presult {
 public:


  virtual ~SISampleDetect_ReportPullRack_presult() throw();
   ::EXE_STATE::type* success;

  _SISampleDetect_ReportPullRack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SISampleDetect_ReportPushRackError_args__isset {
  _SISampleDetect_ReportPushRackError_args__isset() : iSlotNo(false), iErrorCode(false) {}
  bool iSlotNo :1;
  bool iErrorCode :1;
} _SISampleDetect_ReportPushRackError_args__isset;

class SISampleDetect_ReportPushRackError_args {
 public:

  SISampleDetect_ReportPushRackError_args(const SISampleDetect_ReportPushRackError_args&);
  SISampleDetect_ReportPushRackError_args& operator=(const SISampleDetect_ReportPushRackError_args&);
  SISampleDetect_ReportPushRackError_args() : iSlotNo(0), iErrorCode(0) {
  }

  virtual ~SISampleDetect_ReportPushRackError_args() throw();
  int32_t iSlotNo;
  int32_t iErrorCode;

  _SISampleDetect_ReportPushRackError_args__isset __isset;

  void __set_iSlotNo(const int32_t val);

  void __set_iErrorCode(const int32_t val);

  bool operator == (const SISampleDetect_ReportPushRackError_args & rhs) const
  {
    if (!(iSlotNo == rhs.iSlotNo))
      return false;
    if (!(iErrorCode == rhs.iErrorCode))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportPushRackError_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportPushRackError_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SISampleDetect_ReportPushRackError_pargs {
 public:


  virtual ~SISampleDetect_ReportPushRackError_pargs() throw();
  const int32_t* iSlotNo;
  const int32_t* iErrorCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportPushRackError_result__isset {
  _SISampleDetect_ReportPushRackError_result__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportPushRackError_result__isset;

class SISampleDetect_ReportPushRackError_result {
 public:

  SISampleDetect_ReportPushRackError_result(const SISampleDetect_ReportPushRackError_result&);
  SISampleDetect_ReportPushRackError_result& operator=(const SISampleDetect_ReportPushRackError_result&);
  SISampleDetect_ReportPushRackError_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SISampleDetect_ReportPushRackError_result() throw();
   ::EXE_STATE::type success;

  _SISampleDetect_ReportPushRackError_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SISampleDetect_ReportPushRackError_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportPushRackError_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportPushRackError_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportPushRackError_presult__isset {
  _SISampleDetect_ReportPushRackError_presult__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportPushRackError_presult__isset;

class SISampleDetect_ReportPushRackError_presult {
 public:


  virtual ~SISampleDetect_ReportPushRackError_presult() throw();
   ::EXE_STATE::type* success;

  _SISampleDetect_ReportPushRackError_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SISampleDetect_ReportSampleRack_args__isset {
  _SISampleDetect_ReportSampleRack_args__isset() : lstTubeInfos(false) {}
  bool lstTubeInfos :1;
} _SISampleDetect_ReportSampleRack_args__isset;

class SISampleDetect_ReportSampleRack_args {
 public:

  SISampleDetect_ReportSampleRack_args(const SISampleDetect_ReportSampleRack_args&);
  SISampleDetect_ReportSampleRack_args& operator=(const SISampleDetect_ReportSampleRack_args&);
  SISampleDetect_ReportSampleRack_args() {
  }

  virtual ~SISampleDetect_ReportSampleRack_args() throw();
  std::vector< ::SAMPLE_TUBE_INFO_T>  lstTubeInfos;

  _SISampleDetect_ReportSampleRack_args__isset __isset;

  void __set_lstTubeInfos(const std::vector< ::SAMPLE_TUBE_INFO_T> & val);

  bool operator == (const SISampleDetect_ReportSampleRack_args & rhs) const
  {
    if (!(lstTubeInfos == rhs.lstTubeInfos))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportSampleRack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportSampleRack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SISampleDetect_ReportSampleRack_pargs {
 public:


  virtual ~SISampleDetect_ReportSampleRack_pargs() throw();
  const std::vector< ::SAMPLE_TUBE_INFO_T> * lstTubeInfos;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportSampleRack_result__isset {
  _SISampleDetect_ReportSampleRack_result__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportSampleRack_result__isset;

class SISampleDetect_ReportSampleRack_result {
 public:

  SISampleDetect_ReportSampleRack_result(const SISampleDetect_ReportSampleRack_result&);
  SISampleDetect_ReportSampleRack_result& operator=(const SISampleDetect_ReportSampleRack_result&);
  SISampleDetect_ReportSampleRack_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SISampleDetect_ReportSampleRack_result() throw();
   ::EXE_STATE::type success;

  _SISampleDetect_ReportSampleRack_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SISampleDetect_ReportSampleRack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportSampleRack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportSampleRack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportSampleRack_presult__isset {
  _SISampleDetect_ReportSampleRack_presult__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportSampleRack_presult__isset;

class SISampleDetect_ReportSampleRack_presult {
 public:


  virtual ~SISampleDetect_ReportSampleRack_presult() throw();
   ::EXE_STATE::type* success;

  _SISampleDetect_ReportSampleRack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SISampleDetect_ReportSampleQuality_args__isset {
  _SISampleDetect_ReportSampleQuality_args__isset() : iSampleOrderNo(false), tSampleQuality(false) {}
  bool iSampleOrderNo :1;
  bool tSampleQuality :1;
} _SISampleDetect_ReportSampleQuality_args__isset;

class SISampleDetect_ReportSampleQuality_args {
 public:

  SISampleDetect_ReportSampleQuality_args(const SISampleDetect_ReportSampleQuality_args&);
  SISampleDetect_ReportSampleQuality_args& operator=(const SISampleDetect_ReportSampleQuality_args&);
  SISampleDetect_ReportSampleQuality_args() : iSampleOrderNo(0) {
  }

  virtual ~SISampleDetect_ReportSampleQuality_args() throw();
  int32_t iSampleOrderNo;
   ::SAMPLE_QUALITY_T tSampleQuality;

  _SISampleDetect_ReportSampleQuality_args__isset __isset;

  void __set_iSampleOrderNo(const int32_t val);

  void __set_tSampleQuality(const  ::SAMPLE_QUALITY_T& val);

  bool operator == (const SISampleDetect_ReportSampleQuality_args & rhs) const
  {
    if (!(iSampleOrderNo == rhs.iSampleOrderNo))
      return false;
    if (!(tSampleQuality == rhs.tSampleQuality))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportSampleQuality_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportSampleQuality_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SISampleDetect_ReportSampleQuality_pargs {
 public:


  virtual ~SISampleDetect_ReportSampleQuality_pargs() throw();
  const int32_t* iSampleOrderNo;
  const  ::SAMPLE_QUALITY_T* tSampleQuality;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportSampleQuality_result__isset {
  _SISampleDetect_ReportSampleQuality_result__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportSampleQuality_result__isset;

class SISampleDetect_ReportSampleQuality_result {
 public:

  SISampleDetect_ReportSampleQuality_result(const SISampleDetect_ReportSampleQuality_result&);
  SISampleDetect_ReportSampleQuality_result& operator=(const SISampleDetect_ReportSampleQuality_result&);
  SISampleDetect_ReportSampleQuality_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SISampleDetect_ReportSampleQuality_result() throw();
   ::EXE_STATE::type success;

  _SISampleDetect_ReportSampleQuality_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SISampleDetect_ReportSampleQuality_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportSampleQuality_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportSampleQuality_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportSampleQuality_presult__isset {
  _SISampleDetect_ReportSampleQuality_presult__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportSampleQuality_presult__isset;

class SISampleDetect_ReportSampleQuality_presult {
 public:


  virtual ~SISampleDetect_ReportSampleQuality_presult() throw();
   ::EXE_STATE::type* success;

  _SISampleDetect_ReportSampleQuality_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SISampleDetect_ReportOrderState_args__isset {
  _SISampleDetect_ReportOrderState_args__isset() : iOrderNo(false), state(false), iIncruOrDetectPos(false) {}
  bool iOrderNo :1;
  bool state :1;
  bool iIncruOrDetectPos :1;
} _SISampleDetect_ReportOrderState_args__isset;

class SISampleDetect_ReportOrderState_args {
 public:

  SISampleDetect_ReportOrderState_args(const SISampleDetect_ReportOrderState_args&);
  SISampleDetect_ReportOrderState_args& operator=(const SISampleDetect_ReportOrderState_args&);
  SISampleDetect_ReportOrderState_args() : iOrderNo(0), state(( ::ORDER_STATE::type)0), iIncruOrDetectPos(0) {
  }

  virtual ~SISampleDetect_ReportOrderState_args() throw();
  int32_t iOrderNo;
   ::ORDER_STATE::type state;
  int32_t iIncruOrDetectPos;

  _SISampleDetect_ReportOrderState_args__isset __isset;

  void __set_iOrderNo(const int32_t val);

  void __set_state(const  ::ORDER_STATE::type val);

  void __set_iIncruOrDetectPos(const int32_t val);

  bool operator == (const SISampleDetect_ReportOrderState_args & rhs) const
  {
    if (!(iOrderNo == rhs.iOrderNo))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(iIncruOrDetectPos == rhs.iIncruOrDetectPos))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportOrderState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportOrderState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SISampleDetect_ReportOrderState_pargs {
 public:


  virtual ~SISampleDetect_ReportOrderState_pargs() throw();
  const int32_t* iOrderNo;
  const  ::ORDER_STATE::type* state;
  const int32_t* iIncruOrDetectPos;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportOrderState_result__isset {
  _SISampleDetect_ReportOrderState_result__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportOrderState_result__isset;

class SISampleDetect_ReportOrderState_result {
 public:

  SISampleDetect_ReportOrderState_result(const SISampleDetect_ReportOrderState_result&);
  SISampleDetect_ReportOrderState_result& operator=(const SISampleDetect_ReportOrderState_result&);
  SISampleDetect_ReportOrderState_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SISampleDetect_ReportOrderState_result() throw();
   ::EXE_STATE::type success;

  _SISampleDetect_ReportOrderState_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SISampleDetect_ReportOrderState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportOrderState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportOrderState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportOrderState_presult__isset {
  _SISampleDetect_ReportOrderState_presult__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportOrderState_presult__isset;

class SISampleDetect_ReportOrderState_presult {
 public:


  virtual ~SISampleDetect_ReportOrderState_presult() throw();
   ::EXE_STATE::type* success;

  _SISampleDetect_ReportOrderState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SISampleDetect_QuerySpareReagent_args__isset {
  _SISampleDetect_QuerySpareReagent_args__isset() : iOrderNo(false), reagentInfo(false) {}
  bool iOrderNo :1;
  bool reagentInfo :1;
} _SISampleDetect_QuerySpareReagent_args__isset;

class SISampleDetect_QuerySpareReagent_args {
 public:

  SISampleDetect_QuerySpareReagent_args(const SISampleDetect_QuerySpareReagent_args&);
  SISampleDetect_QuerySpareReagent_args& operator=(const SISampleDetect_QuerySpareReagent_args&);
  SISampleDetect_QuerySpareReagent_args() : iOrderNo(0) {
  }

  virtual ~SISampleDetect_QuerySpareReagent_args() throw();
  int32_t iOrderNo;
   ::REAGENT_INFO_T reagentInfo;

  _SISampleDetect_QuerySpareReagent_args__isset __isset;

  void __set_iOrderNo(const int32_t val);

  void __set_reagentInfo(const  ::REAGENT_INFO_T& val);

  bool operator == (const SISampleDetect_QuerySpareReagent_args & rhs) const
  {
    if (!(iOrderNo == rhs.iOrderNo))
      return false;
    if (!(reagentInfo == rhs.reagentInfo))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_QuerySpareReagent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_QuerySpareReagent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SISampleDetect_QuerySpareReagent_pargs {
 public:


  virtual ~SISampleDetect_QuerySpareReagent_pargs() throw();
  const int32_t* iOrderNo;
  const  ::REAGENT_INFO_T* reagentInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_QuerySpareReagent_result__isset {
  _SISampleDetect_QuerySpareReagent_result__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_QuerySpareReagent_result__isset;

class SISampleDetect_QuerySpareReagent_result {
 public:

  SISampleDetect_QuerySpareReagent_result(const SISampleDetect_QuerySpareReagent_result&);
  SISampleDetect_QuerySpareReagent_result& operator=(const SISampleDetect_QuerySpareReagent_result&);
  SISampleDetect_QuerySpareReagent_result() {
  }

  virtual ~SISampleDetect_QuerySpareReagent_result() throw();
   ::REAGENT_INFO_T success;

  _SISampleDetect_QuerySpareReagent_result__isset __isset;

  void __set_success(const  ::REAGENT_INFO_T& val);

  bool operator == (const SISampleDetect_QuerySpareReagent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_QuerySpareReagent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_QuerySpareReagent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_QuerySpareReagent_presult__isset {
  _SISampleDetect_QuerySpareReagent_presult__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_QuerySpareReagent_presult__isset;

class SISampleDetect_QuerySpareReagent_presult {
 public:


  virtual ~SISampleDetect_QuerySpareReagent_presult() throw();
   ::REAGENT_INFO_T* success;

  _SISampleDetect_QuerySpareReagent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SISampleDetect_ReportAlarmMessage_args__isset {
  _SISampleDetect_ReportAlarmMessage_args__isset() : iOrderNo(false), strAlarmCode(false) {}
  bool iOrderNo :1;
  bool strAlarmCode :1;
} _SISampleDetect_ReportAlarmMessage_args__isset;

class SISampleDetect_ReportAlarmMessage_args {
 public:

  SISampleDetect_ReportAlarmMessage_args(const SISampleDetect_ReportAlarmMessage_args&);
  SISampleDetect_ReportAlarmMessage_args& operator=(const SISampleDetect_ReportAlarmMessage_args&);
  SISampleDetect_ReportAlarmMessage_args() : iOrderNo(0), strAlarmCode() {
  }

  virtual ~SISampleDetect_ReportAlarmMessage_args() throw();
  int32_t iOrderNo;
  std::string strAlarmCode;

  _SISampleDetect_ReportAlarmMessage_args__isset __isset;

  void __set_iOrderNo(const int32_t val);

  void __set_strAlarmCode(const std::string& val);

  bool operator == (const SISampleDetect_ReportAlarmMessage_args & rhs) const
  {
    if (!(iOrderNo == rhs.iOrderNo))
      return false;
    if (!(strAlarmCode == rhs.strAlarmCode))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportAlarmMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportAlarmMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SISampleDetect_ReportAlarmMessage_pargs {
 public:


  virtual ~SISampleDetect_ReportAlarmMessage_pargs() throw();
  const int32_t* iOrderNo;
  const std::string* strAlarmCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportAlarmMessage_result__isset {
  _SISampleDetect_ReportAlarmMessage_result__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportAlarmMessage_result__isset;

class SISampleDetect_ReportAlarmMessage_result {
 public:

  SISampleDetect_ReportAlarmMessage_result(const SISampleDetect_ReportAlarmMessage_result&);
  SISampleDetect_ReportAlarmMessage_result& operator=(const SISampleDetect_ReportAlarmMessage_result&);
  SISampleDetect_ReportAlarmMessage_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SISampleDetect_ReportAlarmMessage_result() throw();
   ::EXE_STATE::type success;

  _SISampleDetect_ReportAlarmMessage_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SISampleDetect_ReportAlarmMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportAlarmMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportAlarmMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportAlarmMessage_presult__isset {
  _SISampleDetect_ReportAlarmMessage_presult__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportAlarmMessage_presult__isset;

class SISampleDetect_ReportAlarmMessage_presult {
 public:


  virtual ~SISampleDetect_ReportAlarmMessage_presult() throw();
   ::EXE_STATE::type* success;

  _SISampleDetect_ReportAlarmMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SISampleDetect_ReportOrderResult_args__isset {
  _SISampleDetect_ReportOrderResult_args__isset() : iOrderNo(false), tResultInfo(false) {}
  bool iOrderNo :1;
  bool tResultInfo :1;
} _SISampleDetect_ReportOrderResult_args__isset;

class SISampleDetect_ReportOrderResult_args {
 public:

  SISampleDetect_ReportOrderResult_args(const SISampleDetect_ReportOrderResult_args&);
  SISampleDetect_ReportOrderResult_args& operator=(const SISampleDetect_ReportOrderResult_args&);
  SISampleDetect_ReportOrderResult_args() : iOrderNo(0) {
  }

  virtual ~SISampleDetect_ReportOrderResult_args() throw();
  int32_t iOrderNo;
   ::RESULT_INFO_T tResultInfo;

  _SISampleDetect_ReportOrderResult_args__isset __isset;

  void __set_iOrderNo(const int32_t val);

  void __set_tResultInfo(const  ::RESULT_INFO_T& val);

  bool operator == (const SISampleDetect_ReportOrderResult_args & rhs) const
  {
    if (!(iOrderNo == rhs.iOrderNo))
      return false;
    if (!(tResultInfo == rhs.tResultInfo))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportOrderResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportOrderResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SISampleDetect_ReportOrderResult_pargs {
 public:


  virtual ~SISampleDetect_ReportOrderResult_pargs() throw();
  const int32_t* iOrderNo;
  const  ::RESULT_INFO_T* tResultInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportOrderResult_result__isset {
  _SISampleDetect_ReportOrderResult_result__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportOrderResult_result__isset;

class SISampleDetect_ReportOrderResult_result {
 public:

  SISampleDetect_ReportOrderResult_result(const SISampleDetect_ReportOrderResult_result&);
  SISampleDetect_ReportOrderResult_result& operator=(const SISampleDetect_ReportOrderResult_result&);
  SISampleDetect_ReportOrderResult_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SISampleDetect_ReportOrderResult_result() throw();
   ::EXE_STATE::type success;

  _SISampleDetect_ReportOrderResult_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SISampleDetect_ReportOrderResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportOrderResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportOrderResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportOrderResult_presult__isset {
  _SISampleDetect_ReportOrderResult_presult__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportOrderResult_presult__isset;

class SISampleDetect_ReportOrderResult_presult {
 public:


  virtual ~SISampleDetect_ReportOrderResult_presult() throw();
   ::EXE_STATE::type* success;

  _SISampleDetect_ReportOrderResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SISampleDetect_ReportTestRemainTime_args__isset {
  _SISampleDetect_ReportTestRemainTime_args__isset() : iRemainTime(false) {}
  bool iRemainTime :1;
} _SISampleDetect_ReportTestRemainTime_args__isset;

class SISampleDetect_ReportTestRemainTime_args {
 public:

  SISampleDetect_ReportTestRemainTime_args(const SISampleDetect_ReportTestRemainTime_args&);
  SISampleDetect_ReportTestRemainTime_args& operator=(const SISampleDetect_ReportTestRemainTime_args&);
  SISampleDetect_ReportTestRemainTime_args() : iRemainTime(0) {
  }

  virtual ~SISampleDetect_ReportTestRemainTime_args() throw();
  int32_t iRemainTime;

  _SISampleDetect_ReportTestRemainTime_args__isset __isset;

  void __set_iRemainTime(const int32_t val);

  bool operator == (const SISampleDetect_ReportTestRemainTime_args & rhs) const
  {
    if (!(iRemainTime == rhs.iRemainTime))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportTestRemainTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportTestRemainTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SISampleDetect_ReportTestRemainTime_pargs {
 public:


  virtual ~SISampleDetect_ReportTestRemainTime_pargs() throw();
  const int32_t* iRemainTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportTestRemainTime_result__isset {
  _SISampleDetect_ReportTestRemainTime_result__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportTestRemainTime_result__isset;

class SISampleDetect_ReportTestRemainTime_result {
 public:

  SISampleDetect_ReportTestRemainTime_result(const SISampleDetect_ReportTestRemainTime_result&);
  SISampleDetect_ReportTestRemainTime_result& operator=(const SISampleDetect_ReportTestRemainTime_result&);
  SISampleDetect_ReportTestRemainTime_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SISampleDetect_ReportTestRemainTime_result() throw();
   ::EXE_STATE::type success;

  _SISampleDetect_ReportTestRemainTime_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SISampleDetect_ReportTestRemainTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SISampleDetect_ReportTestRemainTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SISampleDetect_ReportTestRemainTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SISampleDetect_ReportTestRemainTime_presult__isset {
  _SISampleDetect_ReportTestRemainTime_presult__isset() : success(false) {}
  bool success :1;
} _SISampleDetect_ReportTestRemainTime_presult__isset;

class SISampleDetect_ReportTestRemainTime_presult {
 public:


  virtual ~SISampleDetect_ReportTestRemainTime_presult() throw();
   ::EXE_STATE::type* success;

  _SISampleDetect_ReportTestRemainTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SISampleDetectClient : virtual public SISampleDetectIf {
 public:
  SISampleDetectClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SISampleDetectClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::EXE_STATE::type ReportPullRack(const int32_t iSlotNo);
  void send_ReportPullRack(const int32_t iSlotNo);
   ::EXE_STATE::type recv_ReportPullRack();
   ::EXE_STATE::type ReportPushRackError(const int32_t iSlotNo, const int32_t iErrorCode);
  void send_ReportPushRackError(const int32_t iSlotNo, const int32_t iErrorCode);
   ::EXE_STATE::type recv_ReportPushRackError();
   ::EXE_STATE::type ReportSampleRack(const std::vector< ::SAMPLE_TUBE_INFO_T> & lstTubeInfos);
  void send_ReportSampleRack(const std::vector< ::SAMPLE_TUBE_INFO_T> & lstTubeInfos);
   ::EXE_STATE::type recv_ReportSampleRack();
   ::EXE_STATE::type ReportSampleQuality(const int32_t iSampleOrderNo, const  ::SAMPLE_QUALITY_T& tSampleQuality);
  void send_ReportSampleQuality(const int32_t iSampleOrderNo, const  ::SAMPLE_QUALITY_T& tSampleQuality);
   ::EXE_STATE::type recv_ReportSampleQuality();
   ::EXE_STATE::type ReportOrderState(const int32_t iOrderNo, const  ::ORDER_STATE::type state, const int32_t iIncruOrDetectPos);
  void send_ReportOrderState(const int32_t iOrderNo, const  ::ORDER_STATE::type state, const int32_t iIncruOrDetectPos);
   ::EXE_STATE::type recv_ReportOrderState();
  void QuerySpareReagent( ::REAGENT_INFO_T& _return, const int32_t iOrderNo, const  ::REAGENT_INFO_T& reagentInfo);
  void send_QuerySpareReagent(const int32_t iOrderNo, const  ::REAGENT_INFO_T& reagentInfo);
  void recv_QuerySpareReagent( ::REAGENT_INFO_T& _return);
   ::EXE_STATE::type ReportAlarmMessage(const int32_t iOrderNo, const std::string& strAlarmCode);
  void send_ReportAlarmMessage(const int32_t iOrderNo, const std::string& strAlarmCode);
   ::EXE_STATE::type recv_ReportAlarmMessage();
   ::EXE_STATE::type ReportOrderResult(const int32_t iOrderNo, const  ::RESULT_INFO_T& tResultInfo);
  void send_ReportOrderResult(const int32_t iOrderNo, const  ::RESULT_INFO_T& tResultInfo);
   ::EXE_STATE::type recv_ReportOrderResult();
   ::EXE_STATE::type ReportTestRemainTime(const int32_t iRemainTime);
  void send_ReportTestRemainTime(const int32_t iRemainTime);
   ::EXE_STATE::type recv_ReportTestRemainTime();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SISampleDetectProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<SISampleDetectIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SISampleDetectProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ReportPullRack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportPushRackError(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportSampleRack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportSampleQuality(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportOrderState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QuerySpareReagent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportAlarmMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportOrderResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportTestRemainTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SISampleDetectProcessor(::apache::thrift::stdcxx::shared_ptr<SISampleDetectIf> iface) :
    iface_(iface) {
    processMap_["ReportPullRack"] = &SISampleDetectProcessor::process_ReportPullRack;
    processMap_["ReportPushRackError"] = &SISampleDetectProcessor::process_ReportPushRackError;
    processMap_["ReportSampleRack"] = &SISampleDetectProcessor::process_ReportSampleRack;
    processMap_["ReportSampleQuality"] = &SISampleDetectProcessor::process_ReportSampleQuality;
    processMap_["ReportOrderState"] = &SISampleDetectProcessor::process_ReportOrderState;
    processMap_["QuerySpareReagent"] = &SISampleDetectProcessor::process_QuerySpareReagent;
    processMap_["ReportAlarmMessage"] = &SISampleDetectProcessor::process_ReportAlarmMessage;
    processMap_["ReportOrderResult"] = &SISampleDetectProcessor::process_ReportOrderResult;
    processMap_["ReportTestRemainTime"] = &SISampleDetectProcessor::process_ReportTestRemainTime;
  }

  virtual ~SISampleDetectProcessor() {}
};

class SISampleDetectProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SISampleDetectProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< SISampleDetectIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< SISampleDetectIfFactory > handlerFactory_;
};

class SISampleDetectMultiface : virtual public SISampleDetectIf {
 public:
  SISampleDetectMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<SISampleDetectIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SISampleDetectMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<SISampleDetectIf> > ifaces_;
  SISampleDetectMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<SISampleDetectIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
   ::EXE_STATE::type ReportPullRack(const int32_t iSlotNo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportPullRack(iSlotNo);
    }
    return ifaces_[i]->ReportPullRack(iSlotNo);
  }

   ::EXE_STATE::type ReportPushRackError(const int32_t iSlotNo, const int32_t iErrorCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportPushRackError(iSlotNo, iErrorCode);
    }
    return ifaces_[i]->ReportPushRackError(iSlotNo, iErrorCode);
  }

   ::EXE_STATE::type ReportSampleRack(const std::vector< ::SAMPLE_TUBE_INFO_T> & lstTubeInfos) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportSampleRack(lstTubeInfos);
    }
    return ifaces_[i]->ReportSampleRack(lstTubeInfos);
  }

   ::EXE_STATE::type ReportSampleQuality(const int32_t iSampleOrderNo, const  ::SAMPLE_QUALITY_T& tSampleQuality) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportSampleQuality(iSampleOrderNo, tSampleQuality);
    }
    return ifaces_[i]->ReportSampleQuality(iSampleOrderNo, tSampleQuality);
  }

   ::EXE_STATE::type ReportOrderState(const int32_t iOrderNo, const  ::ORDER_STATE::type state, const int32_t iIncruOrDetectPos) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportOrderState(iOrderNo, state, iIncruOrDetectPos);
    }
    return ifaces_[i]->ReportOrderState(iOrderNo, state, iIncruOrDetectPos);
  }

  void QuerySpareReagent( ::REAGENT_INFO_T& _return, const int32_t iOrderNo, const  ::REAGENT_INFO_T& reagentInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QuerySpareReagent(_return, iOrderNo, reagentInfo);
    }
    ifaces_[i]->QuerySpareReagent(_return, iOrderNo, reagentInfo);
    return;
  }

   ::EXE_STATE::type ReportAlarmMessage(const int32_t iOrderNo, const std::string& strAlarmCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportAlarmMessage(iOrderNo, strAlarmCode);
    }
    return ifaces_[i]->ReportAlarmMessage(iOrderNo, strAlarmCode);
  }

   ::EXE_STATE::type ReportOrderResult(const int32_t iOrderNo, const  ::RESULT_INFO_T& tResultInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportOrderResult(iOrderNo, tResultInfo);
    }
    return ifaces_[i]->ReportOrderResult(iOrderNo, tResultInfo);
  }

   ::EXE_STATE::type ReportTestRemainTime(const int32_t iRemainTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportTestRemainTime(iRemainTime);
    }
    return ifaces_[i]->ReportTestRemainTime(iRemainTime);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SISampleDetectConcurrentClient : virtual public SISampleDetectIf {
 public:
  SISampleDetectConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SISampleDetectConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::EXE_STATE::type ReportPullRack(const int32_t iSlotNo);
  int32_t send_ReportPullRack(const int32_t iSlotNo);
   ::EXE_STATE::type recv_ReportPullRack(const int32_t seqid);
   ::EXE_STATE::type ReportPushRackError(const int32_t iSlotNo, const int32_t iErrorCode);
  int32_t send_ReportPushRackError(const int32_t iSlotNo, const int32_t iErrorCode);
   ::EXE_STATE::type recv_ReportPushRackError(const int32_t seqid);
   ::EXE_STATE::type ReportSampleRack(const std::vector< ::SAMPLE_TUBE_INFO_T> & lstTubeInfos);
  int32_t send_ReportSampleRack(const std::vector< ::SAMPLE_TUBE_INFO_T> & lstTubeInfos);
   ::EXE_STATE::type recv_ReportSampleRack(const int32_t seqid);
   ::EXE_STATE::type ReportSampleQuality(const int32_t iSampleOrderNo, const  ::SAMPLE_QUALITY_T& tSampleQuality);
  int32_t send_ReportSampleQuality(const int32_t iSampleOrderNo, const  ::SAMPLE_QUALITY_T& tSampleQuality);
   ::EXE_STATE::type recv_ReportSampleQuality(const int32_t seqid);
   ::EXE_STATE::type ReportOrderState(const int32_t iOrderNo, const  ::ORDER_STATE::type state, const int32_t iIncruOrDetectPos);
  int32_t send_ReportOrderState(const int32_t iOrderNo, const  ::ORDER_STATE::type state, const int32_t iIncruOrDetectPos);
   ::EXE_STATE::type recv_ReportOrderState(const int32_t seqid);
  void QuerySpareReagent( ::REAGENT_INFO_T& _return, const int32_t iOrderNo, const  ::REAGENT_INFO_T& reagentInfo);
  int32_t send_QuerySpareReagent(const int32_t iOrderNo, const  ::REAGENT_INFO_T& reagentInfo);
  void recv_QuerySpareReagent( ::REAGENT_INFO_T& _return, const int32_t seqid);
   ::EXE_STATE::type ReportAlarmMessage(const int32_t iOrderNo, const std::string& strAlarmCode);
  int32_t send_ReportAlarmMessage(const int32_t iOrderNo, const std::string& strAlarmCode);
   ::EXE_STATE::type recv_ReportAlarmMessage(const int32_t seqid);
   ::EXE_STATE::type ReportOrderResult(const int32_t iOrderNo, const  ::RESULT_INFO_T& tResultInfo);
  int32_t send_ReportOrderResult(const int32_t iOrderNo, const  ::RESULT_INFO_T& tResultInfo);
   ::EXE_STATE::type recv_ReportOrderResult(const int32_t seqid);
   ::EXE_STATE::type ReportTestRemainTime(const int32_t iRemainTime);
  int32_t send_ReportTestRemainTime(const int32_t iRemainTime);
   ::EXE_STATE::type recv_ReportTestRemainTime(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
