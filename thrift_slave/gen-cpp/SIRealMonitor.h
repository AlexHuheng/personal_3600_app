/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SIRealMonitor_H
#define SIRealMonitor_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "H2103_Slave_Invoke_types.h"

namespace H2103_Slave_Invoke {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SIRealMonitorIf {
 public:
  virtual ~SIRealMonitorIf() {}
  virtual  ::EXE_STATE::type ReportIOState(const  ::OUTPUT_IO::type sensor, const int32_t iState) = 0;
  virtual  ::EXE_STATE::type ReportReagentSupplyConsume(const  ::REAGENT_SUPPLY_TYPE::type eType, const int32_t iPosIndex, const int32_t iVol) = 0;
  virtual  ::EXE_STATE::type ReportReagentBracketRotating(const int32_t iBracketIndex) = 0;
};

class SIRealMonitorIfFactory {
 public:
  typedef SIRealMonitorIf Handler;

  virtual ~SIRealMonitorIfFactory() {}

  virtual SIRealMonitorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SIRealMonitorIf* /* handler */) = 0;
};

class SIRealMonitorIfSingletonFactory : virtual public SIRealMonitorIfFactory {
 public:
  SIRealMonitorIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<SIRealMonitorIf>& iface) : iface_(iface) {}
  virtual ~SIRealMonitorIfSingletonFactory() {}

  virtual SIRealMonitorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SIRealMonitorIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<SIRealMonitorIf> iface_;
};

class SIRealMonitorNull : virtual public SIRealMonitorIf {
 public:
  virtual ~SIRealMonitorNull() {}
   ::EXE_STATE::type ReportIOState(const  ::OUTPUT_IO::type /* sensor */, const int32_t /* iState */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportReagentSupplyConsume(const  ::REAGENT_SUPPLY_TYPE::type /* eType */, const int32_t /* iPosIndex */, const int32_t /* iVol */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportReagentBracketRotating(const int32_t /* iBracketIndex */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
};

typedef struct _SIRealMonitor_ReportIOState_args__isset {
  _SIRealMonitor_ReportIOState_args__isset() : sensor(false), iState(false) {}
  bool sensor :1;
  bool iState :1;
} _SIRealMonitor_ReportIOState_args__isset;

class SIRealMonitor_ReportIOState_args {
 public:

  SIRealMonitor_ReportIOState_args(const SIRealMonitor_ReportIOState_args&);
  SIRealMonitor_ReportIOState_args& operator=(const SIRealMonitor_ReportIOState_args&);
  SIRealMonitor_ReportIOState_args() : sensor(( ::OUTPUT_IO::type)0), iState(0) {
  }

  virtual ~SIRealMonitor_ReportIOState_args() throw();
   ::OUTPUT_IO::type sensor;
  int32_t iState;

  _SIRealMonitor_ReportIOState_args__isset __isset;

  void __set_sensor(const  ::OUTPUT_IO::type val);

  void __set_iState(const int32_t val);

  bool operator == (const SIRealMonitor_ReportIOState_args & rhs) const
  {
    if (!(sensor == rhs.sensor))
      return false;
    if (!(iState == rhs.iState))
      return false;
    return true;
  }
  bool operator != (const SIRealMonitor_ReportIOState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIRealMonitor_ReportIOState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIRealMonitor_ReportIOState_pargs {
 public:


  virtual ~SIRealMonitor_ReportIOState_pargs() throw();
  const  ::OUTPUT_IO::type* sensor;
  const int32_t* iState;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIRealMonitor_ReportIOState_result__isset {
  _SIRealMonitor_ReportIOState_result__isset() : success(false) {}
  bool success :1;
} _SIRealMonitor_ReportIOState_result__isset;

class SIRealMonitor_ReportIOState_result {
 public:

  SIRealMonitor_ReportIOState_result(const SIRealMonitor_ReportIOState_result&);
  SIRealMonitor_ReportIOState_result& operator=(const SIRealMonitor_ReportIOState_result&);
  SIRealMonitor_ReportIOState_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SIRealMonitor_ReportIOState_result() throw();
   ::EXE_STATE::type success;

  _SIRealMonitor_ReportIOState_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SIRealMonitor_ReportIOState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIRealMonitor_ReportIOState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIRealMonitor_ReportIOState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIRealMonitor_ReportIOState_presult__isset {
  _SIRealMonitor_ReportIOState_presult__isset() : success(false) {}
  bool success :1;
} _SIRealMonitor_ReportIOState_presult__isset;

class SIRealMonitor_ReportIOState_presult {
 public:


  virtual ~SIRealMonitor_ReportIOState_presult() throw();
   ::EXE_STATE::type* success;

  _SIRealMonitor_ReportIOState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SIRealMonitor_ReportReagentSupplyConsume_args__isset {
  _SIRealMonitor_ReportReagentSupplyConsume_args__isset() : eType(false), iPosIndex(false), iVol(false) {}
  bool eType :1;
  bool iPosIndex :1;
  bool iVol :1;
} _SIRealMonitor_ReportReagentSupplyConsume_args__isset;

class SIRealMonitor_ReportReagentSupplyConsume_args {
 public:

  SIRealMonitor_ReportReagentSupplyConsume_args(const SIRealMonitor_ReportReagentSupplyConsume_args&);
  SIRealMonitor_ReportReagentSupplyConsume_args& operator=(const SIRealMonitor_ReportReagentSupplyConsume_args&);
  SIRealMonitor_ReportReagentSupplyConsume_args() : eType(( ::REAGENT_SUPPLY_TYPE::type)0), iPosIndex(0), iVol(0) {
  }

  virtual ~SIRealMonitor_ReportReagentSupplyConsume_args() throw();
   ::REAGENT_SUPPLY_TYPE::type eType;
  int32_t iPosIndex;
  int32_t iVol;

  _SIRealMonitor_ReportReagentSupplyConsume_args__isset __isset;

  void __set_eType(const  ::REAGENT_SUPPLY_TYPE::type val);

  void __set_iPosIndex(const int32_t val);

  void __set_iVol(const int32_t val);

  bool operator == (const SIRealMonitor_ReportReagentSupplyConsume_args & rhs) const
  {
    if (!(eType == rhs.eType))
      return false;
    if (!(iPosIndex == rhs.iPosIndex))
      return false;
    if (!(iVol == rhs.iVol))
      return false;
    return true;
  }
  bool operator != (const SIRealMonitor_ReportReagentSupplyConsume_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIRealMonitor_ReportReagentSupplyConsume_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIRealMonitor_ReportReagentSupplyConsume_pargs {
 public:


  virtual ~SIRealMonitor_ReportReagentSupplyConsume_pargs() throw();
  const  ::REAGENT_SUPPLY_TYPE::type* eType;
  const int32_t* iPosIndex;
  const int32_t* iVol;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIRealMonitor_ReportReagentSupplyConsume_result__isset {
  _SIRealMonitor_ReportReagentSupplyConsume_result__isset() : success(false) {}
  bool success :1;
} _SIRealMonitor_ReportReagentSupplyConsume_result__isset;

class SIRealMonitor_ReportReagentSupplyConsume_result {
 public:

  SIRealMonitor_ReportReagentSupplyConsume_result(const SIRealMonitor_ReportReagentSupplyConsume_result&);
  SIRealMonitor_ReportReagentSupplyConsume_result& operator=(const SIRealMonitor_ReportReagentSupplyConsume_result&);
  SIRealMonitor_ReportReagentSupplyConsume_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SIRealMonitor_ReportReagentSupplyConsume_result() throw();
   ::EXE_STATE::type success;

  _SIRealMonitor_ReportReagentSupplyConsume_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SIRealMonitor_ReportReagentSupplyConsume_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIRealMonitor_ReportReagentSupplyConsume_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIRealMonitor_ReportReagentSupplyConsume_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIRealMonitor_ReportReagentSupplyConsume_presult__isset {
  _SIRealMonitor_ReportReagentSupplyConsume_presult__isset() : success(false) {}
  bool success :1;
} _SIRealMonitor_ReportReagentSupplyConsume_presult__isset;

class SIRealMonitor_ReportReagentSupplyConsume_presult {
 public:


  virtual ~SIRealMonitor_ReportReagentSupplyConsume_presult() throw();
   ::EXE_STATE::type* success;

  _SIRealMonitor_ReportReagentSupplyConsume_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SIRealMonitor_ReportReagentBracketRotating_args__isset {
  _SIRealMonitor_ReportReagentBracketRotating_args__isset() : iBracketIndex(false) {}
  bool iBracketIndex :1;
} _SIRealMonitor_ReportReagentBracketRotating_args__isset;

class SIRealMonitor_ReportReagentBracketRotating_args {
 public:

  SIRealMonitor_ReportReagentBracketRotating_args(const SIRealMonitor_ReportReagentBracketRotating_args&);
  SIRealMonitor_ReportReagentBracketRotating_args& operator=(const SIRealMonitor_ReportReagentBracketRotating_args&);
  SIRealMonitor_ReportReagentBracketRotating_args() : iBracketIndex(0) {
  }

  virtual ~SIRealMonitor_ReportReagentBracketRotating_args() throw();
  int32_t iBracketIndex;

  _SIRealMonitor_ReportReagentBracketRotating_args__isset __isset;

  void __set_iBracketIndex(const int32_t val);

  bool operator == (const SIRealMonitor_ReportReagentBracketRotating_args & rhs) const
  {
    if (!(iBracketIndex == rhs.iBracketIndex))
      return false;
    return true;
  }
  bool operator != (const SIRealMonitor_ReportReagentBracketRotating_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIRealMonitor_ReportReagentBracketRotating_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIRealMonitor_ReportReagentBracketRotating_pargs {
 public:


  virtual ~SIRealMonitor_ReportReagentBracketRotating_pargs() throw();
  const int32_t* iBracketIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIRealMonitor_ReportReagentBracketRotating_result__isset {
  _SIRealMonitor_ReportReagentBracketRotating_result__isset() : success(false) {}
  bool success :1;
} _SIRealMonitor_ReportReagentBracketRotating_result__isset;

class SIRealMonitor_ReportReagentBracketRotating_result {
 public:

  SIRealMonitor_ReportReagentBracketRotating_result(const SIRealMonitor_ReportReagentBracketRotating_result&);
  SIRealMonitor_ReportReagentBracketRotating_result& operator=(const SIRealMonitor_ReportReagentBracketRotating_result&);
  SIRealMonitor_ReportReagentBracketRotating_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SIRealMonitor_ReportReagentBracketRotating_result() throw();
   ::EXE_STATE::type success;

  _SIRealMonitor_ReportReagentBracketRotating_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SIRealMonitor_ReportReagentBracketRotating_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIRealMonitor_ReportReagentBracketRotating_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIRealMonitor_ReportReagentBracketRotating_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIRealMonitor_ReportReagentBracketRotating_presult__isset {
  _SIRealMonitor_ReportReagentBracketRotating_presult__isset() : success(false) {}
  bool success :1;
} _SIRealMonitor_ReportReagentBracketRotating_presult__isset;

class SIRealMonitor_ReportReagentBracketRotating_presult {
 public:


  virtual ~SIRealMonitor_ReportReagentBracketRotating_presult() throw();
   ::EXE_STATE::type* success;

  _SIRealMonitor_ReportReagentBracketRotating_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SIRealMonitorClient : virtual public SIRealMonitorIf {
 public:
  SIRealMonitorClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SIRealMonitorClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::EXE_STATE::type ReportIOState(const  ::OUTPUT_IO::type sensor, const int32_t iState);
  void send_ReportIOState(const  ::OUTPUT_IO::type sensor, const int32_t iState);
   ::EXE_STATE::type recv_ReportIOState();
   ::EXE_STATE::type ReportReagentSupplyConsume(const  ::REAGENT_SUPPLY_TYPE::type eType, const int32_t iPosIndex, const int32_t iVol);
  void send_ReportReagentSupplyConsume(const  ::REAGENT_SUPPLY_TYPE::type eType, const int32_t iPosIndex, const int32_t iVol);
   ::EXE_STATE::type recv_ReportReagentSupplyConsume();
   ::EXE_STATE::type ReportReagentBracketRotating(const int32_t iBracketIndex);
  void send_ReportReagentBracketRotating(const int32_t iBracketIndex);
   ::EXE_STATE::type recv_ReportReagentBracketRotating();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SIRealMonitorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<SIRealMonitorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SIRealMonitorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ReportIOState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportReagentSupplyConsume(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportReagentBracketRotating(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SIRealMonitorProcessor(::apache::thrift::stdcxx::shared_ptr<SIRealMonitorIf> iface) :
    iface_(iface) {
    processMap_["ReportIOState"] = &SIRealMonitorProcessor::process_ReportIOState;
    processMap_["ReportReagentSupplyConsume"] = &SIRealMonitorProcessor::process_ReportReagentSupplyConsume;
    processMap_["ReportReagentBracketRotating"] = &SIRealMonitorProcessor::process_ReportReagentBracketRotating;
  }

  virtual ~SIRealMonitorProcessor() {}
};

class SIRealMonitorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SIRealMonitorProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< SIRealMonitorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< SIRealMonitorIfFactory > handlerFactory_;
};

class SIRealMonitorMultiface : virtual public SIRealMonitorIf {
 public:
  SIRealMonitorMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<SIRealMonitorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SIRealMonitorMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<SIRealMonitorIf> > ifaces_;
  SIRealMonitorMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<SIRealMonitorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
   ::EXE_STATE::type ReportIOState(const  ::OUTPUT_IO::type sensor, const int32_t iState) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportIOState(sensor, iState);
    }
    return ifaces_[i]->ReportIOState(sensor, iState);
  }

   ::EXE_STATE::type ReportReagentSupplyConsume(const  ::REAGENT_SUPPLY_TYPE::type eType, const int32_t iPosIndex, const int32_t iVol) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportReagentSupplyConsume(eType, iPosIndex, iVol);
    }
    return ifaces_[i]->ReportReagentSupplyConsume(eType, iPosIndex, iVol);
  }

   ::EXE_STATE::type ReportReagentBracketRotating(const int32_t iBracketIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportReagentBracketRotating(iBracketIndex);
    }
    return ifaces_[i]->ReportReagentBracketRotating(iBracketIndex);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SIRealMonitorConcurrentClient : virtual public SIRealMonitorIf {
 public:
  SIRealMonitorConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SIRealMonitorConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::EXE_STATE::type ReportIOState(const  ::OUTPUT_IO::type sensor, const int32_t iState);
  int32_t send_ReportIOState(const  ::OUTPUT_IO::type sensor, const int32_t iState);
   ::EXE_STATE::type recv_ReportIOState(const int32_t seqid);
   ::EXE_STATE::type ReportReagentSupplyConsume(const  ::REAGENT_SUPPLY_TYPE::type eType, const int32_t iPosIndex, const int32_t iVol);
  int32_t send_ReportReagentSupplyConsume(const  ::REAGENT_SUPPLY_TYPE::type eType, const int32_t iPosIndex, const int32_t iVol);
   ::EXE_STATE::type recv_ReportReagentSupplyConsume(const int32_t seqid);
   ::EXE_STATE::type ReportReagentBracketRotating(const int32_t iBracketIndex);
  int32_t send_ReportReagentBracketRotating(const int32_t iBracketIndex);
   ::EXE_STATE::type recv_ReportReagentBracketRotating(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
