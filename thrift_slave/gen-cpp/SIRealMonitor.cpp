/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "SIRealMonitor.h"

namespace H2103_Slave_Invoke {


SIRealMonitor_ReportIOState_args::~SIRealMonitor_ReportIOState_args() throw() {
}


uint32_t SIRealMonitor_ReportIOState_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->sensor = ( ::OUTPUT_IO::type)ecast12;
          this->__isset.sensor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iState);
          this->__isset.iState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SIRealMonitor_ReportIOState_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SIRealMonitor_ReportIOState_args");

  xfer += oprot->writeFieldBegin("sensor", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->sensor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iState", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->iState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SIRealMonitor_ReportIOState_pargs::~SIRealMonitor_ReportIOState_pargs() throw() {
}


uint32_t SIRealMonitor_ReportIOState_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SIRealMonitor_ReportIOState_pargs");

  xfer += oprot->writeFieldBegin("sensor", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)(*(this->sensor)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iState", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->iState)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SIRealMonitor_ReportIOState_result::~SIRealMonitor_ReportIOState_result() throw() {
}


uint32_t SIRealMonitor_ReportIOState_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast13;
          xfer += iprot->readI32(ecast13);
          this->success = ( ::EXE_STATE::type)ecast13;
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SIRealMonitor_ReportIOState_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SIRealMonitor_ReportIOState_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32((int32_t)this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SIRealMonitor_ReportIOState_presult::~SIRealMonitor_ReportIOState_presult() throw() {
}


uint32_t SIRealMonitor_ReportIOState_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          (*(this->success)) = ( ::EXE_STATE::type)ecast14;
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SIRealMonitor_ReportReagentSupplyConsume_args::~SIRealMonitor_ReportReagentSupplyConsume_args() throw() {
}


uint32_t SIRealMonitor_ReportReagentSupplyConsume_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast15;
          xfer += iprot->readI32(ecast15);
          this->eType = ( ::REAGENT_SUPPLY_TYPE::type)ecast15;
          this->__isset.eType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iPosIndex);
          this->__isset.iPosIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iVol);
          this->__isset.iVol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SIRealMonitor_ReportReagentSupplyConsume_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SIRealMonitor_ReportReagentSupplyConsume_args");

  xfer += oprot->writeFieldBegin("eType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->eType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iPosIndex", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->iPosIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iVol", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->iVol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SIRealMonitor_ReportReagentSupplyConsume_pargs::~SIRealMonitor_ReportReagentSupplyConsume_pargs() throw() {
}


uint32_t SIRealMonitor_ReportReagentSupplyConsume_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SIRealMonitor_ReportReagentSupplyConsume_pargs");

  xfer += oprot->writeFieldBegin("eType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)(*(this->eType)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iPosIndex", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->iPosIndex)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iVol", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->iVol)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SIRealMonitor_ReportReagentSupplyConsume_result::~SIRealMonitor_ReportReagentSupplyConsume_result() throw() {
}


uint32_t SIRealMonitor_ReportReagentSupplyConsume_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->success = ( ::EXE_STATE::type)ecast16;
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SIRealMonitor_ReportReagentSupplyConsume_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SIRealMonitor_ReportReagentSupplyConsume_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32((int32_t)this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SIRealMonitor_ReportReagentSupplyConsume_presult::~SIRealMonitor_ReportReagentSupplyConsume_presult() throw() {
}


uint32_t SIRealMonitor_ReportReagentSupplyConsume_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast17;
          xfer += iprot->readI32(ecast17);
          (*(this->success)) = ( ::EXE_STATE::type)ecast17;
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SIRealMonitor_ReportReagentBracketRotating_args::~SIRealMonitor_ReportReagentBracketRotating_args() throw() {
}


uint32_t SIRealMonitor_ReportReagentBracketRotating_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iBracketIndex);
          this->__isset.iBracketIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SIRealMonitor_ReportReagentBracketRotating_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SIRealMonitor_ReportReagentBracketRotating_args");

  xfer += oprot->writeFieldBegin("iBracketIndex", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->iBracketIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SIRealMonitor_ReportReagentBracketRotating_pargs::~SIRealMonitor_ReportReagentBracketRotating_pargs() throw() {
}


uint32_t SIRealMonitor_ReportReagentBracketRotating_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SIRealMonitor_ReportReagentBracketRotating_pargs");

  xfer += oprot->writeFieldBegin("iBracketIndex", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->iBracketIndex)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SIRealMonitor_ReportReagentBracketRotating_result::~SIRealMonitor_ReportReagentBracketRotating_result() throw() {
}


uint32_t SIRealMonitor_ReportReagentBracketRotating_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->success = ( ::EXE_STATE::type)ecast18;
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SIRealMonitor_ReportReagentBracketRotating_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SIRealMonitor_ReportReagentBracketRotating_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32((int32_t)this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SIRealMonitor_ReportReagentBracketRotating_presult::~SIRealMonitor_ReportReagentBracketRotating_presult() throw() {
}


uint32_t SIRealMonitor_ReportReagentBracketRotating_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast19;
          xfer += iprot->readI32(ecast19);
          (*(this->success)) = ( ::EXE_STATE::type)ecast19;
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

 ::EXE_STATE::type SIRealMonitorClient::ReportIOState(const  ::OUTPUT_IO::type sensor, const int32_t iState)
{
  send_ReportIOState(sensor, iState);
  return recv_ReportIOState();
}

void SIRealMonitorClient::send_ReportIOState(const  ::OUTPUT_IO::type sensor, const int32_t iState)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ReportIOState", ::apache::thrift::protocol::T_CALL, cseqid);

  SIRealMonitor_ReportIOState_pargs args;
  args.sensor = &sensor;
  args.iState = &iState;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

 ::EXE_STATE::type SIRealMonitorClient::recv_ReportIOState()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ReportIOState") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
   ::EXE_STATE::type _return;
  SIRealMonitor_ReportIOState_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ReportIOState failed: unknown result");
}

 ::EXE_STATE::type SIRealMonitorClient::ReportReagentSupplyConsume(const  ::REAGENT_SUPPLY_TYPE::type eType, const int32_t iPosIndex, const int32_t iVol)
{
  send_ReportReagentSupplyConsume(eType, iPosIndex, iVol);
  return recv_ReportReagentSupplyConsume();
}

void SIRealMonitorClient::send_ReportReagentSupplyConsume(const  ::REAGENT_SUPPLY_TYPE::type eType, const int32_t iPosIndex, const int32_t iVol)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ReportReagentSupplyConsume", ::apache::thrift::protocol::T_CALL, cseqid);

  SIRealMonitor_ReportReagentSupplyConsume_pargs args;
  args.eType = &eType;
  args.iPosIndex = &iPosIndex;
  args.iVol = &iVol;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

 ::EXE_STATE::type SIRealMonitorClient::recv_ReportReagentSupplyConsume()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ReportReagentSupplyConsume") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
   ::EXE_STATE::type _return;
  SIRealMonitor_ReportReagentSupplyConsume_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ReportReagentSupplyConsume failed: unknown result");
}

 ::EXE_STATE::type SIRealMonitorClient::ReportReagentBracketRotating(const int32_t iBracketIndex)
{
  send_ReportReagentBracketRotating(iBracketIndex);
  return recv_ReportReagentBracketRotating();
}

void SIRealMonitorClient::send_ReportReagentBracketRotating(const int32_t iBracketIndex)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ReportReagentBracketRotating", ::apache::thrift::protocol::T_CALL, cseqid);

  SIRealMonitor_ReportReagentBracketRotating_pargs args;
  args.iBracketIndex = &iBracketIndex;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

 ::EXE_STATE::type SIRealMonitorClient::recv_ReportReagentBracketRotating()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ReportReagentBracketRotating") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
   ::EXE_STATE::type _return;
  SIRealMonitor_ReportReagentBracketRotating_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ReportReagentBracketRotating failed: unknown result");
}

bool SIRealMonitorProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void SIRealMonitorProcessor::process_ReportIOState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SIRealMonitor.ReportIOState", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SIRealMonitor.ReportIOState");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SIRealMonitor.ReportIOState");
  }

  SIRealMonitor_ReportIOState_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SIRealMonitor.ReportIOState", bytes);
  }

  SIRealMonitor_ReportIOState_result result;
  try {
    result.success = iface_->ReportIOState(args.sensor, args.iState);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SIRealMonitor.ReportIOState");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ReportIOState", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SIRealMonitor.ReportIOState");
  }

  oprot->writeMessageBegin("ReportIOState", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SIRealMonitor.ReportIOState", bytes);
  }
}

void SIRealMonitorProcessor::process_ReportReagentSupplyConsume(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SIRealMonitor.ReportReagentSupplyConsume", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SIRealMonitor.ReportReagentSupplyConsume");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SIRealMonitor.ReportReagentSupplyConsume");
  }

  SIRealMonitor_ReportReagentSupplyConsume_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SIRealMonitor.ReportReagentSupplyConsume", bytes);
  }

  SIRealMonitor_ReportReagentSupplyConsume_result result;
  try {
    result.success = iface_->ReportReagentSupplyConsume(args.eType, args.iPosIndex, args.iVol);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SIRealMonitor.ReportReagentSupplyConsume");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ReportReagentSupplyConsume", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SIRealMonitor.ReportReagentSupplyConsume");
  }

  oprot->writeMessageBegin("ReportReagentSupplyConsume", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SIRealMonitor.ReportReagentSupplyConsume", bytes);
  }
}

void SIRealMonitorProcessor::process_ReportReagentBracketRotating(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SIRealMonitor.ReportReagentBracketRotating", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SIRealMonitor.ReportReagentBracketRotating");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SIRealMonitor.ReportReagentBracketRotating");
  }

  SIRealMonitor_ReportReagentBracketRotating_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SIRealMonitor.ReportReagentBracketRotating", bytes);
  }

  SIRealMonitor_ReportReagentBracketRotating_result result;
  try {
    result.success = iface_->ReportReagentBracketRotating(args.iBracketIndex);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SIRealMonitor.ReportReagentBracketRotating");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ReportReagentBracketRotating", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SIRealMonitor.ReportReagentBracketRotating");
  }

  oprot->writeMessageBegin("ReportReagentBracketRotating", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SIRealMonitor.ReportReagentBracketRotating", bytes);
  }
}

::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > SIRealMonitorProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< SIRealMonitorIfFactory > cleanup(handlerFactory_);
  ::apache::thrift::stdcxx::shared_ptr< SIRealMonitorIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > processor(new SIRealMonitorProcessor(handler));
  return processor;
}

 ::EXE_STATE::type SIRealMonitorConcurrentClient::ReportIOState(const  ::OUTPUT_IO::type sensor, const int32_t iState)
{
  int32_t seqid = send_ReportIOState(sensor, iState);
  return recv_ReportIOState(seqid);
}

int32_t SIRealMonitorConcurrentClient::send_ReportIOState(const  ::OUTPUT_IO::type sensor, const int32_t iState)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("ReportIOState", ::apache::thrift::protocol::T_CALL, cseqid);

  SIRealMonitor_ReportIOState_pargs args;
  args.sensor = &sensor;
  args.iState = &iState;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

 ::EXE_STATE::type SIRealMonitorConcurrentClient::recv_ReportIOState(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("ReportIOState") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
       ::EXE_STATE::type _return;
      SIRealMonitor_ReportIOState_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ReportIOState failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

 ::EXE_STATE::type SIRealMonitorConcurrentClient::ReportReagentSupplyConsume(const  ::REAGENT_SUPPLY_TYPE::type eType, const int32_t iPosIndex, const int32_t iVol)
{
  int32_t seqid = send_ReportReagentSupplyConsume(eType, iPosIndex, iVol);
  return recv_ReportReagentSupplyConsume(seqid);
}

int32_t SIRealMonitorConcurrentClient::send_ReportReagentSupplyConsume(const  ::REAGENT_SUPPLY_TYPE::type eType, const int32_t iPosIndex, const int32_t iVol)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("ReportReagentSupplyConsume", ::apache::thrift::protocol::T_CALL, cseqid);

  SIRealMonitor_ReportReagentSupplyConsume_pargs args;
  args.eType = &eType;
  args.iPosIndex = &iPosIndex;
  args.iVol = &iVol;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

 ::EXE_STATE::type SIRealMonitorConcurrentClient::recv_ReportReagentSupplyConsume(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("ReportReagentSupplyConsume") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
       ::EXE_STATE::type _return;
      SIRealMonitor_ReportReagentSupplyConsume_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ReportReagentSupplyConsume failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

 ::EXE_STATE::type SIRealMonitorConcurrentClient::ReportReagentBracketRotating(const int32_t iBracketIndex)
{
  int32_t seqid = send_ReportReagentBracketRotating(iBracketIndex);
  return recv_ReportReagentBracketRotating(seqid);
}

int32_t SIRealMonitorConcurrentClient::send_ReportReagentBracketRotating(const int32_t iBracketIndex)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("ReportReagentBracketRotating", ::apache::thrift::protocol::T_CALL, cseqid);

  SIRealMonitor_ReportReagentBracketRotating_pargs args;
  args.iBracketIndex = &iBracketIndex;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

 ::EXE_STATE::type SIRealMonitorConcurrentClient::recv_ReportReagentBracketRotating(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("ReportReagentBracketRotating") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
       ::EXE_STATE::type _return;
      SIRealMonitor_ReportReagentBracketRotating_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ReportReagentBracketRotating failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

} // namespace

