/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SIOther_H
#define SIOther_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "H2103_Slave_Invoke_types.h"

namespace H2103_Slave_Invoke {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SIOtherIf {
 public:
  virtual ~SIOtherIf() {}
  virtual  ::EXE_STATE::type ReportAsnycInvokeResult(const int32_t iUserData, const  ::EXE_STATE::type eExeState, const  ::ASYNC_RETURN_T& tReturn) = 0;
  virtual  ::EXE_STATE::type ReportDeviceAbnormal(const int32_t iOrderNo, const std::string& strAlarmCode) = 0;
  virtual  ::EXE_STATE::type Heartbeat() = 0;
  virtual  ::EXE_STATE::type UploadBackupFile(const int32_t iFileType, const int32_t iRandNo, const std::string& hexData, const int32_t iSeqNo, const int32_t iIsEnd, const std::string& strMD5) = 0;
  virtual  ::EXE_STATE::type ReportRunTimes(const int32_t iRunType, const int32_t iTimes, const int32_t iReserve) = 0;
};

class SIOtherIfFactory {
 public:
  typedef SIOtherIf Handler;

  virtual ~SIOtherIfFactory() {}

  virtual SIOtherIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SIOtherIf* /* handler */) = 0;
};

class SIOtherIfSingletonFactory : virtual public SIOtherIfFactory {
 public:
  SIOtherIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<SIOtherIf>& iface) : iface_(iface) {}
  virtual ~SIOtherIfSingletonFactory() {}

  virtual SIOtherIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SIOtherIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<SIOtherIf> iface_;
};

class SIOtherNull : virtual public SIOtherIf {
 public:
  virtual ~SIOtherNull() {}
   ::EXE_STATE::type ReportAsnycInvokeResult(const int32_t /* iUserData */, const  ::EXE_STATE::type /* eExeState */, const  ::ASYNC_RETURN_T& /* tReturn */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportDeviceAbnormal(const int32_t /* iOrderNo */, const std::string& /* strAlarmCode */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type Heartbeat() {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type UploadBackupFile(const int32_t /* iFileType */, const int32_t /* iRandNo */, const std::string& /* hexData */, const int32_t /* iSeqNo */, const int32_t /* iIsEnd */, const std::string& /* strMD5 */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
   ::EXE_STATE::type ReportRunTimes(const int32_t /* iRunType */, const int32_t /* iTimes */, const int32_t /* iReserve */) {
     ::EXE_STATE::type _return = ( ::EXE_STATE::type)0;
    return _return;
  }
};

typedef struct _SIOther_ReportAsnycInvokeResult_args__isset {
  _SIOther_ReportAsnycInvokeResult_args__isset() : iUserData(false), eExeState(false), tReturn(false) {}
  bool iUserData :1;
  bool eExeState :1;
  bool tReturn :1;
} _SIOther_ReportAsnycInvokeResult_args__isset;

class SIOther_ReportAsnycInvokeResult_args {
 public:

  SIOther_ReportAsnycInvokeResult_args(const SIOther_ReportAsnycInvokeResult_args&);
  SIOther_ReportAsnycInvokeResult_args& operator=(const SIOther_ReportAsnycInvokeResult_args&);
  SIOther_ReportAsnycInvokeResult_args() : iUserData(0), eExeState(( ::EXE_STATE::type)0) {
  }

  virtual ~SIOther_ReportAsnycInvokeResult_args() throw();
  int32_t iUserData;
   ::EXE_STATE::type eExeState;
   ::ASYNC_RETURN_T tReturn;

  _SIOther_ReportAsnycInvokeResult_args__isset __isset;

  void __set_iUserData(const int32_t val);

  void __set_eExeState(const  ::EXE_STATE::type val);

  void __set_tReturn(const  ::ASYNC_RETURN_T& val);

  bool operator == (const SIOther_ReportAsnycInvokeResult_args & rhs) const
  {
    if (!(iUserData == rhs.iUserData))
      return false;
    if (!(eExeState == rhs.eExeState))
      return false;
    if (!(tReturn == rhs.tReturn))
      return false;
    return true;
  }
  bool operator != (const SIOther_ReportAsnycInvokeResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIOther_ReportAsnycInvokeResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIOther_ReportAsnycInvokeResult_pargs {
 public:


  virtual ~SIOther_ReportAsnycInvokeResult_pargs() throw();
  const int32_t* iUserData;
  const  ::EXE_STATE::type* eExeState;
  const  ::ASYNC_RETURN_T* tReturn;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIOther_ReportAsnycInvokeResult_result__isset {
  _SIOther_ReportAsnycInvokeResult_result__isset() : success(false) {}
  bool success :1;
} _SIOther_ReportAsnycInvokeResult_result__isset;

class SIOther_ReportAsnycInvokeResult_result {
 public:

  SIOther_ReportAsnycInvokeResult_result(const SIOther_ReportAsnycInvokeResult_result&);
  SIOther_ReportAsnycInvokeResult_result& operator=(const SIOther_ReportAsnycInvokeResult_result&);
  SIOther_ReportAsnycInvokeResult_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SIOther_ReportAsnycInvokeResult_result() throw();
   ::EXE_STATE::type success;

  _SIOther_ReportAsnycInvokeResult_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SIOther_ReportAsnycInvokeResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIOther_ReportAsnycInvokeResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIOther_ReportAsnycInvokeResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIOther_ReportAsnycInvokeResult_presult__isset {
  _SIOther_ReportAsnycInvokeResult_presult__isset() : success(false) {}
  bool success :1;
} _SIOther_ReportAsnycInvokeResult_presult__isset;

class SIOther_ReportAsnycInvokeResult_presult {
 public:


  virtual ~SIOther_ReportAsnycInvokeResult_presult() throw();
   ::EXE_STATE::type* success;

  _SIOther_ReportAsnycInvokeResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SIOther_ReportDeviceAbnormal_args__isset {
  _SIOther_ReportDeviceAbnormal_args__isset() : iOrderNo(false), strAlarmCode(false) {}
  bool iOrderNo :1;
  bool strAlarmCode :1;
} _SIOther_ReportDeviceAbnormal_args__isset;

class SIOther_ReportDeviceAbnormal_args {
 public:

  SIOther_ReportDeviceAbnormal_args(const SIOther_ReportDeviceAbnormal_args&);
  SIOther_ReportDeviceAbnormal_args& operator=(const SIOther_ReportDeviceAbnormal_args&);
  SIOther_ReportDeviceAbnormal_args() : iOrderNo(0), strAlarmCode() {
  }

  virtual ~SIOther_ReportDeviceAbnormal_args() throw();
  int32_t iOrderNo;
  std::string strAlarmCode;

  _SIOther_ReportDeviceAbnormal_args__isset __isset;

  void __set_iOrderNo(const int32_t val);

  void __set_strAlarmCode(const std::string& val);

  bool operator == (const SIOther_ReportDeviceAbnormal_args & rhs) const
  {
    if (!(iOrderNo == rhs.iOrderNo))
      return false;
    if (!(strAlarmCode == rhs.strAlarmCode))
      return false;
    return true;
  }
  bool operator != (const SIOther_ReportDeviceAbnormal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIOther_ReportDeviceAbnormal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIOther_ReportDeviceAbnormal_pargs {
 public:


  virtual ~SIOther_ReportDeviceAbnormal_pargs() throw();
  const int32_t* iOrderNo;
  const std::string* strAlarmCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIOther_ReportDeviceAbnormal_result__isset {
  _SIOther_ReportDeviceAbnormal_result__isset() : success(false) {}
  bool success :1;
} _SIOther_ReportDeviceAbnormal_result__isset;

class SIOther_ReportDeviceAbnormal_result {
 public:

  SIOther_ReportDeviceAbnormal_result(const SIOther_ReportDeviceAbnormal_result&);
  SIOther_ReportDeviceAbnormal_result& operator=(const SIOther_ReportDeviceAbnormal_result&);
  SIOther_ReportDeviceAbnormal_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SIOther_ReportDeviceAbnormal_result() throw();
   ::EXE_STATE::type success;

  _SIOther_ReportDeviceAbnormal_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SIOther_ReportDeviceAbnormal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIOther_ReportDeviceAbnormal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIOther_ReportDeviceAbnormal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIOther_ReportDeviceAbnormal_presult__isset {
  _SIOther_ReportDeviceAbnormal_presult__isset() : success(false) {}
  bool success :1;
} _SIOther_ReportDeviceAbnormal_presult__isset;

class SIOther_ReportDeviceAbnormal_presult {
 public:


  virtual ~SIOther_ReportDeviceAbnormal_presult() throw();
   ::EXE_STATE::type* success;

  _SIOther_ReportDeviceAbnormal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SIOther_Heartbeat_args {
 public:

  SIOther_Heartbeat_args(const SIOther_Heartbeat_args&);
  SIOther_Heartbeat_args& operator=(const SIOther_Heartbeat_args&);
  SIOther_Heartbeat_args() {
  }

  virtual ~SIOther_Heartbeat_args() throw();

  bool operator == (const SIOther_Heartbeat_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SIOther_Heartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIOther_Heartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIOther_Heartbeat_pargs {
 public:


  virtual ~SIOther_Heartbeat_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIOther_Heartbeat_result__isset {
  _SIOther_Heartbeat_result__isset() : success(false) {}
  bool success :1;
} _SIOther_Heartbeat_result__isset;

class SIOther_Heartbeat_result {
 public:

  SIOther_Heartbeat_result(const SIOther_Heartbeat_result&);
  SIOther_Heartbeat_result& operator=(const SIOther_Heartbeat_result&);
  SIOther_Heartbeat_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SIOther_Heartbeat_result() throw();
   ::EXE_STATE::type success;

  _SIOther_Heartbeat_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SIOther_Heartbeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIOther_Heartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIOther_Heartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIOther_Heartbeat_presult__isset {
  _SIOther_Heartbeat_presult__isset() : success(false) {}
  bool success :1;
} _SIOther_Heartbeat_presult__isset;

class SIOther_Heartbeat_presult {
 public:


  virtual ~SIOther_Heartbeat_presult() throw();
   ::EXE_STATE::type* success;

  _SIOther_Heartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SIOther_UploadBackupFile_args__isset {
  _SIOther_UploadBackupFile_args__isset() : iFileType(false), iRandNo(false), hexData(false), iSeqNo(false), iIsEnd(false), strMD5(false) {}
  bool iFileType :1;
  bool iRandNo :1;
  bool hexData :1;
  bool iSeqNo :1;
  bool iIsEnd :1;
  bool strMD5 :1;
} _SIOther_UploadBackupFile_args__isset;

class SIOther_UploadBackupFile_args {
 public:

  SIOther_UploadBackupFile_args(const SIOther_UploadBackupFile_args&);
  SIOther_UploadBackupFile_args& operator=(const SIOther_UploadBackupFile_args&);
  SIOther_UploadBackupFile_args() : iFileType(0), iRandNo(0), hexData(), iSeqNo(0), iIsEnd(0), strMD5() {
  }

  virtual ~SIOther_UploadBackupFile_args() throw();
  int32_t iFileType;
  int32_t iRandNo;
  std::string hexData;
  int32_t iSeqNo;
  int32_t iIsEnd;
  std::string strMD5;

  _SIOther_UploadBackupFile_args__isset __isset;

  void __set_iFileType(const int32_t val);

  void __set_iRandNo(const int32_t val);

  void __set_hexData(const std::string& val);

  void __set_iSeqNo(const int32_t val);

  void __set_iIsEnd(const int32_t val);

  void __set_strMD5(const std::string& val);

  bool operator == (const SIOther_UploadBackupFile_args & rhs) const
  {
    if (!(iFileType == rhs.iFileType))
      return false;
    if (!(iRandNo == rhs.iRandNo))
      return false;
    if (!(hexData == rhs.hexData))
      return false;
    if (!(iSeqNo == rhs.iSeqNo))
      return false;
    if (!(iIsEnd == rhs.iIsEnd))
      return false;
    if (!(strMD5 == rhs.strMD5))
      return false;
    return true;
  }
  bool operator != (const SIOther_UploadBackupFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIOther_UploadBackupFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIOther_UploadBackupFile_pargs {
 public:


  virtual ~SIOther_UploadBackupFile_pargs() throw();
  const int32_t* iFileType;
  const int32_t* iRandNo;
  const std::string* hexData;
  const int32_t* iSeqNo;
  const int32_t* iIsEnd;
  const std::string* strMD5;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIOther_UploadBackupFile_result__isset {
  _SIOther_UploadBackupFile_result__isset() : success(false) {}
  bool success :1;
} _SIOther_UploadBackupFile_result__isset;

class SIOther_UploadBackupFile_result {
 public:

  SIOther_UploadBackupFile_result(const SIOther_UploadBackupFile_result&);
  SIOther_UploadBackupFile_result& operator=(const SIOther_UploadBackupFile_result&);
  SIOther_UploadBackupFile_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SIOther_UploadBackupFile_result() throw();
   ::EXE_STATE::type success;

  _SIOther_UploadBackupFile_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SIOther_UploadBackupFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIOther_UploadBackupFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIOther_UploadBackupFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIOther_UploadBackupFile_presult__isset {
  _SIOther_UploadBackupFile_presult__isset() : success(false) {}
  bool success :1;
} _SIOther_UploadBackupFile_presult__isset;

class SIOther_UploadBackupFile_presult {
 public:


  virtual ~SIOther_UploadBackupFile_presult() throw();
   ::EXE_STATE::type* success;

  _SIOther_UploadBackupFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SIOther_ReportRunTimes_args__isset {
  _SIOther_ReportRunTimes_args__isset() : iRunType(false), iTimes(false), iReserve(false) {}
  bool iRunType :1;
  bool iTimes :1;
  bool iReserve :1;
} _SIOther_ReportRunTimes_args__isset;

class SIOther_ReportRunTimes_args {
 public:

  SIOther_ReportRunTimes_args(const SIOther_ReportRunTimes_args&);
  SIOther_ReportRunTimes_args& operator=(const SIOther_ReportRunTimes_args&);
  SIOther_ReportRunTimes_args() : iRunType(0), iTimes(0), iReserve(0) {
  }

  virtual ~SIOther_ReportRunTimes_args() throw();
  int32_t iRunType;
  int32_t iTimes;
  int32_t iReserve;

  _SIOther_ReportRunTimes_args__isset __isset;

  void __set_iRunType(const int32_t val);

  void __set_iTimes(const int32_t val);

  void __set_iReserve(const int32_t val);

  bool operator == (const SIOther_ReportRunTimes_args & rhs) const
  {
    if (!(iRunType == rhs.iRunType))
      return false;
    if (!(iTimes == rhs.iTimes))
      return false;
    if (!(iReserve == rhs.iReserve))
      return false;
    return true;
  }
  bool operator != (const SIOther_ReportRunTimes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIOther_ReportRunTimes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SIOther_ReportRunTimes_pargs {
 public:


  virtual ~SIOther_ReportRunTimes_pargs() throw();
  const int32_t* iRunType;
  const int32_t* iTimes;
  const int32_t* iReserve;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIOther_ReportRunTimes_result__isset {
  _SIOther_ReportRunTimes_result__isset() : success(false) {}
  bool success :1;
} _SIOther_ReportRunTimes_result__isset;

class SIOther_ReportRunTimes_result {
 public:

  SIOther_ReportRunTimes_result(const SIOther_ReportRunTimes_result&);
  SIOther_ReportRunTimes_result& operator=(const SIOther_ReportRunTimes_result&);
  SIOther_ReportRunTimes_result() : success(( ::EXE_STATE::type)0) {
  }

  virtual ~SIOther_ReportRunTimes_result() throw();
   ::EXE_STATE::type success;

  _SIOther_ReportRunTimes_result__isset __isset;

  void __set_success(const  ::EXE_STATE::type val);

  bool operator == (const SIOther_ReportRunTimes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SIOther_ReportRunTimes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SIOther_ReportRunTimes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SIOther_ReportRunTimes_presult__isset {
  _SIOther_ReportRunTimes_presult__isset() : success(false) {}
  bool success :1;
} _SIOther_ReportRunTimes_presult__isset;

class SIOther_ReportRunTimes_presult {
 public:


  virtual ~SIOther_ReportRunTimes_presult() throw();
   ::EXE_STATE::type* success;

  _SIOther_ReportRunTimes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SIOtherClient : virtual public SIOtherIf {
 public:
  SIOtherClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SIOtherClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::EXE_STATE::type ReportAsnycInvokeResult(const int32_t iUserData, const  ::EXE_STATE::type eExeState, const  ::ASYNC_RETURN_T& tReturn);
  void send_ReportAsnycInvokeResult(const int32_t iUserData, const  ::EXE_STATE::type eExeState, const  ::ASYNC_RETURN_T& tReturn);
   ::EXE_STATE::type recv_ReportAsnycInvokeResult();
   ::EXE_STATE::type ReportDeviceAbnormal(const int32_t iOrderNo, const std::string& strAlarmCode);
  void send_ReportDeviceAbnormal(const int32_t iOrderNo, const std::string& strAlarmCode);
   ::EXE_STATE::type recv_ReportDeviceAbnormal();
   ::EXE_STATE::type Heartbeat();
  void send_Heartbeat();
   ::EXE_STATE::type recv_Heartbeat();
   ::EXE_STATE::type UploadBackupFile(const int32_t iFileType, const int32_t iRandNo, const std::string& hexData, const int32_t iSeqNo, const int32_t iIsEnd, const std::string& strMD5);
  void send_UploadBackupFile(const int32_t iFileType, const int32_t iRandNo, const std::string& hexData, const int32_t iSeqNo, const int32_t iIsEnd, const std::string& strMD5);
   ::EXE_STATE::type recv_UploadBackupFile();
   ::EXE_STATE::type ReportRunTimes(const int32_t iRunType, const int32_t iTimes, const int32_t iReserve);
  void send_ReportRunTimes(const int32_t iRunType, const int32_t iTimes, const int32_t iReserve);
   ::EXE_STATE::type recv_ReportRunTimes();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SIOtherProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<SIOtherIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SIOtherProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ReportAsnycInvokeResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportDeviceAbnormal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Heartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UploadBackupFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportRunTimes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SIOtherProcessor(::apache::thrift::stdcxx::shared_ptr<SIOtherIf> iface) :
    iface_(iface) {
    processMap_["ReportAsnycInvokeResult"] = &SIOtherProcessor::process_ReportAsnycInvokeResult;
    processMap_["ReportDeviceAbnormal"] = &SIOtherProcessor::process_ReportDeviceAbnormal;
    processMap_["Heartbeat"] = &SIOtherProcessor::process_Heartbeat;
    processMap_["UploadBackupFile"] = &SIOtherProcessor::process_UploadBackupFile;
    processMap_["ReportRunTimes"] = &SIOtherProcessor::process_ReportRunTimes;
  }

  virtual ~SIOtherProcessor() {}
};

class SIOtherProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SIOtherProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< SIOtherIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< SIOtherIfFactory > handlerFactory_;
};

class SIOtherMultiface : virtual public SIOtherIf {
 public:
  SIOtherMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<SIOtherIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SIOtherMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<SIOtherIf> > ifaces_;
  SIOtherMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<SIOtherIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
   ::EXE_STATE::type ReportAsnycInvokeResult(const int32_t iUserData, const  ::EXE_STATE::type eExeState, const  ::ASYNC_RETURN_T& tReturn) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportAsnycInvokeResult(iUserData, eExeState, tReturn);
    }
    return ifaces_[i]->ReportAsnycInvokeResult(iUserData, eExeState, tReturn);
  }

   ::EXE_STATE::type ReportDeviceAbnormal(const int32_t iOrderNo, const std::string& strAlarmCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportDeviceAbnormal(iOrderNo, strAlarmCode);
    }
    return ifaces_[i]->ReportDeviceAbnormal(iOrderNo, strAlarmCode);
  }

   ::EXE_STATE::type Heartbeat() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Heartbeat();
    }
    return ifaces_[i]->Heartbeat();
  }

   ::EXE_STATE::type UploadBackupFile(const int32_t iFileType, const int32_t iRandNo, const std::string& hexData, const int32_t iSeqNo, const int32_t iIsEnd, const std::string& strMD5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadBackupFile(iFileType, iRandNo, hexData, iSeqNo, iIsEnd, strMD5);
    }
    return ifaces_[i]->UploadBackupFile(iFileType, iRandNo, hexData, iSeqNo, iIsEnd, strMD5);
  }

   ::EXE_STATE::type ReportRunTimes(const int32_t iRunType, const int32_t iTimes, const int32_t iReserve) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportRunTimes(iRunType, iTimes, iReserve);
    }
    return ifaces_[i]->ReportRunTimes(iRunType, iTimes, iReserve);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SIOtherConcurrentClient : virtual public SIOtherIf {
 public:
  SIOtherConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SIOtherConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::EXE_STATE::type ReportAsnycInvokeResult(const int32_t iUserData, const  ::EXE_STATE::type eExeState, const  ::ASYNC_RETURN_T& tReturn);
  int32_t send_ReportAsnycInvokeResult(const int32_t iUserData, const  ::EXE_STATE::type eExeState, const  ::ASYNC_RETURN_T& tReturn);
   ::EXE_STATE::type recv_ReportAsnycInvokeResult(const int32_t seqid);
   ::EXE_STATE::type ReportDeviceAbnormal(const int32_t iOrderNo, const std::string& strAlarmCode);
  int32_t send_ReportDeviceAbnormal(const int32_t iOrderNo, const std::string& strAlarmCode);
   ::EXE_STATE::type recv_ReportDeviceAbnormal(const int32_t seqid);
   ::EXE_STATE::type Heartbeat();
  int32_t send_Heartbeat();
   ::EXE_STATE::type recv_Heartbeat(const int32_t seqid);
   ::EXE_STATE::type UploadBackupFile(const int32_t iFileType, const int32_t iRandNo, const std::string& hexData, const int32_t iSeqNo, const int32_t iIsEnd, const std::string& strMD5);
  int32_t send_UploadBackupFile(const int32_t iFileType, const int32_t iRandNo, const std::string& hexData, const int32_t iSeqNo, const int32_t iIsEnd, const std::string& strMD5);
   ::EXE_STATE::type recv_UploadBackupFile(const int32_t seqid);
   ::EXE_STATE::type ReportRunTimes(const int32_t iRunType, const int32_t iTimes, const int32_t iReserve);
  int32_t send_ReportRunTimes(const int32_t iRunType, const int32_t iTimes, const int32_t iReserve);
   ::EXE_STATE::type recv_ReportRunTimes(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
